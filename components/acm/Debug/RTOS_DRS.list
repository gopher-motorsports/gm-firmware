
RTOS_DRS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008410  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  080084d0  080084d0  000184d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008654  08008654  00020104  2**0
                  CONTENTS
  4 .ARM          00000000  08008654  08008654  00020104  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008654  08008654  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008654  08008654  00018654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008658  08008658  00018658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800865c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033bc  20000108  08008760  00020108  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200034c4  08008760  000234c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   000197dd  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034b6  00000000  00000000  00039909  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015d8  00000000  00000000  0003cdc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001450  00000000  00000000  0003e398  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001981d  00000000  00000000  0003f7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001214f  00000000  00000000  00059005  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d253  00000000  00000000  0006b154  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f1  00000000  00000000  000f83a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050a4  00000000  00000000  000f8498  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000108 	.word	0x20000108
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080084b8 	.word	0x080084b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000010c 	.word	0x2000010c
 8000104:	080084b8 	.word	0x080084b8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f000 fc77 	bl	8000cf8 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fbbf 	bl	8000b98 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 fc69 	bl	8000cf8 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fc5f 	bl	8000cf8 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fbe5 	bl	8000c18 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fbdb 	bl	8000c18 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_d2uiz>:
 8000470:	b570      	push	{r4, r5, r6, lr}
 8000472:	2200      	movs	r2, #0
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <__aeabi_d2uiz+0x38>)
 8000476:	0004      	movs	r4, r0
 8000478:	000d      	movs	r5, r1
 800047a:	f7ff ffef 	bl	800045c <__aeabi_dcmpge>
 800047e:	2800      	cmp	r0, #0
 8000480:	d104      	bne.n	800048c <__aeabi_d2uiz+0x1c>
 8000482:	0020      	movs	r0, r4
 8000484:	0029      	movs	r1, r5
 8000486:	f001 fab3 	bl	80019f0 <__aeabi_d2iz>
 800048a:	bd70      	pop	{r4, r5, r6, pc}
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <__aeabi_d2uiz+0x38>)
 800048e:	2200      	movs	r2, #0
 8000490:	0020      	movs	r0, r4
 8000492:	0029      	movs	r1, r5
 8000494:	f000 ff10 	bl	80012b8 <__aeabi_dsub>
 8000498:	f001 faaa 	bl	80019f0 <__aeabi_d2iz>
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	061b      	lsls	r3, r3, #24
 80004a0:	469c      	mov	ip, r3
 80004a2:	4460      	add	r0, ip
 80004a4:	e7f1      	b.n	800048a <__aeabi_d2uiz+0x1a>
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	41e00000 	.word	0x41e00000

080004ac <__aeabi_dadd>:
 80004ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ae:	4647      	mov	r7, r8
 80004b0:	46ce      	mov	lr, r9
 80004b2:	030e      	lsls	r6, r1, #12
 80004b4:	004d      	lsls	r5, r1, #1
 80004b6:	0a76      	lsrs	r6, r6, #9
 80004b8:	0fcc      	lsrs	r4, r1, #31
 80004ba:	0f41      	lsrs	r1, r0, #29
 80004bc:	4331      	orrs	r1, r6
 80004be:	4689      	mov	r9, r1
 80004c0:	0319      	lsls	r1, r3, #12
 80004c2:	b580      	push	{r7, lr}
 80004c4:	0a49      	lsrs	r1, r1, #9
 80004c6:	0f57      	lsrs	r7, r2, #29
 80004c8:	005e      	lsls	r6, r3, #1
 80004ca:	430f      	orrs	r7, r1
 80004cc:	0d6d      	lsrs	r5, r5, #21
 80004ce:	00c0      	lsls	r0, r0, #3
 80004d0:	0d76      	lsrs	r6, r6, #21
 80004d2:	0fdb      	lsrs	r3, r3, #31
 80004d4:	46b8      	mov	r8, r7
 80004d6:	00d2      	lsls	r2, r2, #3
 80004d8:	429c      	cmp	r4, r3
 80004da:	d100      	bne.n	80004de <__aeabi_dadd+0x32>
 80004dc:	e0a3      	b.n	8000626 <__aeabi_dadd+0x17a>
 80004de:	1baf      	subs	r7, r5, r6
 80004e0:	2f00      	cmp	r7, #0
 80004e2:	dc00      	bgt.n	80004e6 <__aeabi_dadd+0x3a>
 80004e4:	e083      	b.n	80005ee <__aeabi_dadd+0x142>
 80004e6:	2e00      	cmp	r6, #0
 80004e8:	d100      	bne.n	80004ec <__aeabi_dadd+0x40>
 80004ea:	e0c1      	b.n	8000670 <__aeabi_dadd+0x1c4>
 80004ec:	4bc9      	ldr	r3, [pc, #804]	; (8000814 <__aeabi_dadd+0x368>)
 80004ee:	429d      	cmp	r5, r3
 80004f0:	d100      	bne.n	80004f4 <__aeabi_dadd+0x48>
 80004f2:	e188      	b.n	8000806 <__aeabi_dadd+0x35a>
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	4641      	mov	r1, r8
 80004f8:	041b      	lsls	r3, r3, #16
 80004fa:	4319      	orrs	r1, r3
 80004fc:	4688      	mov	r8, r1
 80004fe:	2f38      	cmp	r7, #56	; 0x38
 8000500:	dd00      	ble.n	8000504 <__aeabi_dadd+0x58>
 8000502:	e15d      	b.n	80007c0 <__aeabi_dadd+0x314>
 8000504:	2f1f      	cmp	r7, #31
 8000506:	dd00      	ble.n	800050a <__aeabi_dadd+0x5e>
 8000508:	e207      	b.n	800091a <__aeabi_dadd+0x46e>
 800050a:	2320      	movs	r3, #32
 800050c:	0011      	movs	r1, r2
 800050e:	4646      	mov	r6, r8
 8000510:	1bdb      	subs	r3, r3, r7
 8000512:	409e      	lsls	r6, r3
 8000514:	40f9      	lsrs	r1, r7
 8000516:	409a      	lsls	r2, r3
 8000518:	430e      	orrs	r6, r1
 800051a:	4641      	mov	r1, r8
 800051c:	1e53      	subs	r3, r2, #1
 800051e:	419a      	sbcs	r2, r3
 8000520:	40f9      	lsrs	r1, r7
 8000522:	464b      	mov	r3, r9
 8000524:	1a5b      	subs	r3, r3, r1
 8000526:	4699      	mov	r9, r3
 8000528:	4332      	orrs	r2, r6
 800052a:	1a87      	subs	r7, r0, r2
 800052c:	42b8      	cmp	r0, r7
 800052e:	4180      	sbcs	r0, r0
 8000530:	464b      	mov	r3, r9
 8000532:	4241      	negs	r1, r0
 8000534:	1a59      	subs	r1, r3, r1
 8000536:	020b      	lsls	r3, r1, #8
 8000538:	d400      	bmi.n	800053c <__aeabi_dadd+0x90>
 800053a:	e0d7      	b.n	80006ec <__aeabi_dadd+0x240>
 800053c:	0249      	lsls	r1, r1, #9
 800053e:	0a4e      	lsrs	r6, r1, #9
 8000540:	2e00      	cmp	r6, #0
 8000542:	d100      	bne.n	8000546 <__aeabi_dadd+0x9a>
 8000544:	e12f      	b.n	80007a6 <__aeabi_dadd+0x2fa>
 8000546:	0030      	movs	r0, r6
 8000548:	f001 fac4 	bl	8001ad4 <__clzsi2>
 800054c:	0003      	movs	r3, r0
 800054e:	3b08      	subs	r3, #8
 8000550:	2220      	movs	r2, #32
 8000552:	0039      	movs	r1, r7
 8000554:	1ad2      	subs	r2, r2, r3
 8000556:	409e      	lsls	r6, r3
 8000558:	40d1      	lsrs	r1, r2
 800055a:	409f      	lsls	r7, r3
 800055c:	430e      	orrs	r6, r1
 800055e:	429d      	cmp	r5, r3
 8000560:	dd00      	ble.n	8000564 <__aeabi_dadd+0xb8>
 8000562:	e11c      	b.n	800079e <__aeabi_dadd+0x2f2>
 8000564:	1b5d      	subs	r5, r3, r5
 8000566:	1c6b      	adds	r3, r5, #1
 8000568:	2b1f      	cmp	r3, #31
 800056a:	dd00      	ble.n	800056e <__aeabi_dadd+0xc2>
 800056c:	e1aa      	b.n	80008c4 <__aeabi_dadd+0x418>
 800056e:	2120      	movs	r1, #32
 8000570:	1ac9      	subs	r1, r1, r3
 8000572:	003d      	movs	r5, r7
 8000574:	0030      	movs	r0, r6
 8000576:	408f      	lsls	r7, r1
 8000578:	4088      	lsls	r0, r1
 800057a:	40dd      	lsrs	r5, r3
 800057c:	1e79      	subs	r1, r7, #1
 800057e:	418f      	sbcs	r7, r1
 8000580:	0031      	movs	r1, r6
 8000582:	4328      	orrs	r0, r5
 8000584:	40d9      	lsrs	r1, r3
 8000586:	2500      	movs	r5, #0
 8000588:	4307      	orrs	r7, r0
 800058a:	077b      	lsls	r3, r7, #29
 800058c:	d009      	beq.n	80005a2 <__aeabi_dadd+0xf6>
 800058e:	230f      	movs	r3, #15
 8000590:	403b      	ands	r3, r7
 8000592:	2b04      	cmp	r3, #4
 8000594:	d005      	beq.n	80005a2 <__aeabi_dadd+0xf6>
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	42bb      	cmp	r3, r7
 800059a:	41bf      	sbcs	r7, r7
 800059c:	427f      	negs	r7, r7
 800059e:	19c9      	adds	r1, r1, r7
 80005a0:	001f      	movs	r7, r3
 80005a2:	020b      	lsls	r3, r1, #8
 80005a4:	d400      	bmi.n	80005a8 <__aeabi_dadd+0xfc>
 80005a6:	e0a4      	b.n	80006f2 <__aeabi_dadd+0x246>
 80005a8:	1c6a      	adds	r2, r5, #1
 80005aa:	4b9a      	ldr	r3, [pc, #616]	; (8000814 <__aeabi_dadd+0x368>)
 80005ac:	0555      	lsls	r5, r2, #21
 80005ae:	0d6d      	lsrs	r5, r5, #21
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d100      	bne.n	80005b6 <__aeabi_dadd+0x10a>
 80005b4:	e0aa      	b.n	800070c <__aeabi_dadd+0x260>
 80005b6:	4a98      	ldr	r2, [pc, #608]	; (8000818 <__aeabi_dadd+0x36c>)
 80005b8:	08ff      	lsrs	r7, r7, #3
 80005ba:	400a      	ands	r2, r1
 80005bc:	0750      	lsls	r0, r2, #29
 80005be:	4338      	orrs	r0, r7
 80005c0:	4684      	mov	ip, r0
 80005c2:	0252      	lsls	r2, r2, #9
 80005c4:	0b12      	lsrs	r2, r2, #12
 80005c6:	2100      	movs	r1, #0
 80005c8:	0312      	lsls	r2, r2, #12
 80005ca:	0b13      	lsrs	r3, r2, #12
 80005cc:	0d0a      	lsrs	r2, r1, #20
 80005ce:	0512      	lsls	r2, r2, #20
 80005d0:	431a      	orrs	r2, r3
 80005d2:	4b92      	ldr	r3, [pc, #584]	; (800081c <__aeabi_dadd+0x370>)
 80005d4:	052d      	lsls	r5, r5, #20
 80005d6:	4013      	ands	r3, r2
 80005d8:	432b      	orrs	r3, r5
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	07e4      	lsls	r4, r4, #31
 80005de:	085b      	lsrs	r3, r3, #1
 80005e0:	4323      	orrs	r3, r4
 80005e2:	4660      	mov	r0, ip
 80005e4:	0019      	movs	r1, r3
 80005e6:	bc0c      	pop	{r2, r3}
 80005e8:	4690      	mov	r8, r2
 80005ea:	4699      	mov	r9, r3
 80005ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005ee:	2f00      	cmp	r7, #0
 80005f0:	d14c      	bne.n	800068c <__aeabi_dadd+0x1e0>
 80005f2:	4e8b      	ldr	r6, [pc, #556]	; (8000820 <__aeabi_dadd+0x374>)
 80005f4:	1c69      	adds	r1, r5, #1
 80005f6:	4231      	tst	r1, r6
 80005f8:	d000      	beq.n	80005fc <__aeabi_dadd+0x150>
 80005fa:	e0e7      	b.n	80007cc <__aeabi_dadd+0x320>
 80005fc:	4646      	mov	r6, r8
 80005fe:	4649      	mov	r1, r9
 8000600:	4316      	orrs	r6, r2
 8000602:	4301      	orrs	r1, r0
 8000604:	46b4      	mov	ip, r6
 8000606:	2d00      	cmp	r5, #0
 8000608:	d000      	beq.n	800060c <__aeabi_dadd+0x160>
 800060a:	e20e      	b.n	8000a2a <__aeabi_dadd+0x57e>
 800060c:	2900      	cmp	r1, #0
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x166>
 8000610:	e1cf      	b.n	80009b2 <__aeabi_dadd+0x506>
 8000612:	2e00      	cmp	r6, #0
 8000614:	d000      	beq.n	8000618 <__aeabi_dadd+0x16c>
 8000616:	e210      	b.n	8000a3a <__aeabi_dadd+0x58e>
 8000618:	464b      	mov	r3, r9
 800061a:	08c0      	lsrs	r0, r0, #3
 800061c:	075f      	lsls	r7, r3, #29
 800061e:	4307      	orrs	r7, r0
 8000620:	46bc      	mov	ip, r7
 8000622:	08d9      	lsrs	r1, r3, #3
 8000624:	e06d      	b.n	8000702 <__aeabi_dadd+0x256>
 8000626:	1bab      	subs	r3, r5, r6
 8000628:	2b00      	cmp	r3, #0
 800062a:	dc00      	bgt.n	800062e <__aeabi_dadd+0x182>
 800062c:	e09e      	b.n	800076c <__aeabi_dadd+0x2c0>
 800062e:	2e00      	cmp	r6, #0
 8000630:	d03e      	beq.n	80006b0 <__aeabi_dadd+0x204>
 8000632:	4978      	ldr	r1, [pc, #480]	; (8000814 <__aeabi_dadd+0x368>)
 8000634:	428d      	cmp	r5, r1
 8000636:	d100      	bne.n	800063a <__aeabi_dadd+0x18e>
 8000638:	e0e5      	b.n	8000806 <__aeabi_dadd+0x35a>
 800063a:	2180      	movs	r1, #128	; 0x80
 800063c:	003e      	movs	r6, r7
 800063e:	0409      	lsls	r1, r1, #16
 8000640:	430e      	orrs	r6, r1
 8000642:	46b0      	mov	r8, r6
 8000644:	2b38      	cmp	r3, #56	; 0x38
 8000646:	dd00      	ble.n	800064a <__aeabi_dadd+0x19e>
 8000648:	e14b      	b.n	80008e2 <__aeabi_dadd+0x436>
 800064a:	2b1f      	cmp	r3, #31
 800064c:	dc00      	bgt.n	8000650 <__aeabi_dadd+0x1a4>
 800064e:	e181      	b.n	8000954 <__aeabi_dadd+0x4a8>
 8000650:	0019      	movs	r1, r3
 8000652:	4646      	mov	r6, r8
 8000654:	3920      	subs	r1, #32
 8000656:	40ce      	lsrs	r6, r1
 8000658:	2b20      	cmp	r3, #32
 800065a:	d004      	beq.n	8000666 <__aeabi_dadd+0x1ba>
 800065c:	2140      	movs	r1, #64	; 0x40
 800065e:	1acb      	subs	r3, r1, r3
 8000660:	4641      	mov	r1, r8
 8000662:	4099      	lsls	r1, r3
 8000664:	430a      	orrs	r2, r1
 8000666:	0017      	movs	r7, r2
 8000668:	1e7a      	subs	r2, r7, #1
 800066a:	4197      	sbcs	r7, r2
 800066c:	4337      	orrs	r7, r6
 800066e:	e13d      	b.n	80008ec <__aeabi_dadd+0x440>
 8000670:	4643      	mov	r3, r8
 8000672:	4313      	orrs	r3, r2
 8000674:	d100      	bne.n	8000678 <__aeabi_dadd+0x1cc>
 8000676:	e0bd      	b.n	80007f4 <__aeabi_dadd+0x348>
 8000678:	1e7b      	subs	r3, r7, #1
 800067a:	2b00      	cmp	r3, #0
 800067c:	d100      	bne.n	8000680 <__aeabi_dadd+0x1d4>
 800067e:	e1b2      	b.n	80009e6 <__aeabi_dadd+0x53a>
 8000680:	4964      	ldr	r1, [pc, #400]	; (8000814 <__aeabi_dadd+0x368>)
 8000682:	428f      	cmp	r7, r1
 8000684:	d100      	bne.n	8000688 <__aeabi_dadd+0x1dc>
 8000686:	e1a7      	b.n	80009d8 <__aeabi_dadd+0x52c>
 8000688:	001f      	movs	r7, r3
 800068a:	e738      	b.n	80004fe <__aeabi_dadd+0x52>
 800068c:	1b77      	subs	r7, r6, r5
 800068e:	2d00      	cmp	r5, #0
 8000690:	d000      	beq.n	8000694 <__aeabi_dadd+0x1e8>
 8000692:	e0ef      	b.n	8000874 <__aeabi_dadd+0x3c8>
 8000694:	4649      	mov	r1, r9
 8000696:	4301      	orrs	r1, r0
 8000698:	d100      	bne.n	800069c <__aeabi_dadd+0x1f0>
 800069a:	e177      	b.n	800098c <__aeabi_dadd+0x4e0>
 800069c:	1e79      	subs	r1, r7, #1
 800069e:	2900      	cmp	r1, #0
 80006a0:	d100      	bne.n	80006a4 <__aeabi_dadd+0x1f8>
 80006a2:	e219      	b.n	8000ad8 <__aeabi_dadd+0x62c>
 80006a4:	4c5b      	ldr	r4, [pc, #364]	; (8000814 <__aeabi_dadd+0x368>)
 80006a6:	42a7      	cmp	r7, r4
 80006a8:	d100      	bne.n	80006ac <__aeabi_dadd+0x200>
 80006aa:	e24b      	b.n	8000b44 <__aeabi_dadd+0x698>
 80006ac:	000f      	movs	r7, r1
 80006ae:	e0ea      	b.n	8000886 <__aeabi_dadd+0x3da>
 80006b0:	0039      	movs	r1, r7
 80006b2:	4311      	orrs	r1, r2
 80006b4:	d100      	bne.n	80006b8 <__aeabi_dadd+0x20c>
 80006b6:	e1a0      	b.n	80009fa <__aeabi_dadd+0x54e>
 80006b8:	1e59      	subs	r1, r3, #1
 80006ba:	2900      	cmp	r1, #0
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dadd+0x214>
 80006be:	e158      	b.n	8000972 <__aeabi_dadd+0x4c6>
 80006c0:	4e54      	ldr	r6, [pc, #336]	; (8000814 <__aeabi_dadd+0x368>)
 80006c2:	42b3      	cmp	r3, r6
 80006c4:	d100      	bne.n	80006c8 <__aeabi_dadd+0x21c>
 80006c6:	e187      	b.n	80009d8 <__aeabi_dadd+0x52c>
 80006c8:	000b      	movs	r3, r1
 80006ca:	e7bb      	b.n	8000644 <__aeabi_dadd+0x198>
 80006cc:	4b51      	ldr	r3, [pc, #324]	; (8000814 <__aeabi_dadd+0x368>)
 80006ce:	429e      	cmp	r6, r3
 80006d0:	d100      	bne.n	80006d4 <__aeabi_dadd+0x228>
 80006d2:	e232      	b.n	8000b3a <__aeabi_dadd+0x68e>
 80006d4:	1882      	adds	r2, r0, r2
 80006d6:	4282      	cmp	r2, r0
 80006d8:	4180      	sbcs	r0, r0
 80006da:	4649      	mov	r1, r9
 80006dc:	0035      	movs	r5, r6
 80006de:	4441      	add	r1, r8
 80006e0:	4240      	negs	r0, r0
 80006e2:	1809      	adds	r1, r1, r0
 80006e4:	07cf      	lsls	r7, r1, #31
 80006e6:	0852      	lsrs	r2, r2, #1
 80006e8:	4317      	orrs	r7, r2
 80006ea:	0849      	lsrs	r1, r1, #1
 80006ec:	077b      	lsls	r3, r7, #29
 80006ee:	d000      	beq.n	80006f2 <__aeabi_dadd+0x246>
 80006f0:	e74d      	b.n	800058e <__aeabi_dadd+0xe2>
 80006f2:	0748      	lsls	r0, r1, #29
 80006f4:	08ff      	lsrs	r7, r7, #3
 80006f6:	4307      	orrs	r7, r0
 80006f8:	46bc      	mov	ip, r7
 80006fa:	08c9      	lsrs	r1, r1, #3
 80006fc:	4b45      	ldr	r3, [pc, #276]	; (8000814 <__aeabi_dadd+0x368>)
 80006fe:	429d      	cmp	r5, r3
 8000700:	d029      	beq.n	8000756 <__aeabi_dadd+0x2aa>
 8000702:	030a      	lsls	r2, r1, #12
 8000704:	056d      	lsls	r5, r5, #21
 8000706:	0b12      	lsrs	r2, r2, #12
 8000708:	0d6d      	lsrs	r5, r5, #21
 800070a:	e75c      	b.n	80005c6 <__aeabi_dadd+0x11a>
 800070c:	0015      	movs	r5, r2
 800070e:	2300      	movs	r3, #0
 8000710:	2200      	movs	r2, #0
 8000712:	469c      	mov	ip, r3
 8000714:	e757      	b.n	80005c6 <__aeabi_dadd+0x11a>
 8000716:	464b      	mov	r3, r9
 8000718:	075f      	lsls	r7, r3, #29
 800071a:	08d9      	lsrs	r1, r3, #3
 800071c:	4643      	mov	r3, r8
 800071e:	08c0      	lsrs	r0, r0, #3
 8000720:	4313      	orrs	r3, r2
 8000722:	4338      	orrs	r0, r7
 8000724:	2b00      	cmp	r3, #0
 8000726:	d100      	bne.n	800072a <__aeabi_dadd+0x27e>
 8000728:	e1f6      	b.n	8000b18 <__aeabi_dadd+0x66c>
 800072a:	2380      	movs	r3, #128	; 0x80
 800072c:	031b      	lsls	r3, r3, #12
 800072e:	4219      	tst	r1, r3
 8000730:	d008      	beq.n	8000744 <__aeabi_dadd+0x298>
 8000732:	4645      	mov	r5, r8
 8000734:	08ed      	lsrs	r5, r5, #3
 8000736:	421d      	tst	r5, r3
 8000738:	d104      	bne.n	8000744 <__aeabi_dadd+0x298>
 800073a:	4643      	mov	r3, r8
 800073c:	0029      	movs	r1, r5
 800073e:	08d2      	lsrs	r2, r2, #3
 8000740:	0758      	lsls	r0, r3, #29
 8000742:	4310      	orrs	r0, r2
 8000744:	00ca      	lsls	r2, r1, #3
 8000746:	0f43      	lsrs	r3, r0, #29
 8000748:	431a      	orrs	r2, r3
 800074a:	00c0      	lsls	r0, r0, #3
 800074c:	0757      	lsls	r7, r2, #29
 800074e:	08c0      	lsrs	r0, r0, #3
 8000750:	4307      	orrs	r7, r0
 8000752:	46bc      	mov	ip, r7
 8000754:	08d1      	lsrs	r1, r2, #3
 8000756:	4663      	mov	r3, ip
 8000758:	430b      	orrs	r3, r1
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x2b2>
 800075c:	e212      	b.n	8000b84 <__aeabi_dadd+0x6d8>
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	0312      	lsls	r2, r2, #12
 8000762:	430a      	orrs	r2, r1
 8000764:	0312      	lsls	r2, r2, #12
 8000766:	0b12      	lsrs	r2, r2, #12
 8000768:	4d2a      	ldr	r5, [pc, #168]	; (8000814 <__aeabi_dadd+0x368>)
 800076a:	e72c      	b.n	80005c6 <__aeabi_dadd+0x11a>
 800076c:	2b00      	cmp	r3, #0
 800076e:	d159      	bne.n	8000824 <__aeabi_dadd+0x378>
 8000770:	4b2b      	ldr	r3, [pc, #172]	; (8000820 <__aeabi_dadd+0x374>)
 8000772:	1c6e      	adds	r6, r5, #1
 8000774:	421e      	tst	r6, r3
 8000776:	d1a9      	bne.n	80006cc <__aeabi_dadd+0x220>
 8000778:	464b      	mov	r3, r9
 800077a:	4303      	orrs	r3, r0
 800077c:	2d00      	cmp	r5, #0
 800077e:	d000      	beq.n	8000782 <__aeabi_dadd+0x2d6>
 8000780:	e10d      	b.n	800099e <__aeabi_dadd+0x4f2>
 8000782:	2b00      	cmp	r3, #0
 8000784:	d100      	bne.n	8000788 <__aeabi_dadd+0x2dc>
 8000786:	e1b2      	b.n	8000aee <__aeabi_dadd+0x642>
 8000788:	003b      	movs	r3, r7
 800078a:	4313      	orrs	r3, r2
 800078c:	d000      	beq.n	8000790 <__aeabi_dadd+0x2e4>
 800078e:	e1b5      	b.n	8000afc <__aeabi_dadd+0x650>
 8000790:	464b      	mov	r3, r9
 8000792:	08c0      	lsrs	r0, r0, #3
 8000794:	075f      	lsls	r7, r3, #29
 8000796:	4338      	orrs	r0, r7
 8000798:	4684      	mov	ip, r0
 800079a:	08d9      	lsrs	r1, r3, #3
 800079c:	e7b1      	b.n	8000702 <__aeabi_dadd+0x256>
 800079e:	491e      	ldr	r1, [pc, #120]	; (8000818 <__aeabi_dadd+0x36c>)
 80007a0:	1aed      	subs	r5, r5, r3
 80007a2:	4031      	ands	r1, r6
 80007a4:	e6f1      	b.n	800058a <__aeabi_dadd+0xde>
 80007a6:	0038      	movs	r0, r7
 80007a8:	f001 f994 	bl	8001ad4 <__clzsi2>
 80007ac:	0003      	movs	r3, r0
 80007ae:	3318      	adds	r3, #24
 80007b0:	2b1f      	cmp	r3, #31
 80007b2:	dc00      	bgt.n	80007b6 <__aeabi_dadd+0x30a>
 80007b4:	e6cc      	b.n	8000550 <__aeabi_dadd+0xa4>
 80007b6:	003e      	movs	r6, r7
 80007b8:	3808      	subs	r0, #8
 80007ba:	4086      	lsls	r6, r0
 80007bc:	2700      	movs	r7, #0
 80007be:	e6ce      	b.n	800055e <__aeabi_dadd+0xb2>
 80007c0:	4643      	mov	r3, r8
 80007c2:	4313      	orrs	r3, r2
 80007c4:	001a      	movs	r2, r3
 80007c6:	1e57      	subs	r7, r2, #1
 80007c8:	41ba      	sbcs	r2, r7
 80007ca:	e6ae      	b.n	800052a <__aeabi_dadd+0x7e>
 80007cc:	4649      	mov	r1, r9
 80007ce:	4646      	mov	r6, r8
 80007d0:	1a87      	subs	r7, r0, r2
 80007d2:	1b8e      	subs	r6, r1, r6
 80007d4:	42b8      	cmp	r0, r7
 80007d6:	4189      	sbcs	r1, r1
 80007d8:	4249      	negs	r1, r1
 80007da:	1a76      	subs	r6, r6, r1
 80007dc:	0231      	lsls	r1, r6, #8
 80007de:	d500      	bpl.n	80007e2 <__aeabi_dadd+0x336>
 80007e0:	e119      	b.n	8000a16 <__aeabi_dadd+0x56a>
 80007e2:	003b      	movs	r3, r7
 80007e4:	4333      	orrs	r3, r6
 80007e6:	469c      	mov	ip, r3
 80007e8:	d000      	beq.n	80007ec <__aeabi_dadd+0x340>
 80007ea:	e6a9      	b.n	8000540 <__aeabi_dadd+0x94>
 80007ec:	2100      	movs	r1, #0
 80007ee:	2500      	movs	r5, #0
 80007f0:	2400      	movs	r4, #0
 80007f2:	e786      	b.n	8000702 <__aeabi_dadd+0x256>
 80007f4:	464b      	mov	r3, r9
 80007f6:	08c0      	lsrs	r0, r0, #3
 80007f8:	075b      	lsls	r3, r3, #29
 80007fa:	4318      	orrs	r0, r3
 80007fc:	464b      	mov	r3, r9
 80007fe:	4684      	mov	ip, r0
 8000800:	08d9      	lsrs	r1, r3, #3
 8000802:	003d      	movs	r5, r7
 8000804:	e77a      	b.n	80006fc <__aeabi_dadd+0x250>
 8000806:	464b      	mov	r3, r9
 8000808:	08c0      	lsrs	r0, r0, #3
 800080a:	075f      	lsls	r7, r3, #29
 800080c:	4307      	orrs	r7, r0
 800080e:	46bc      	mov	ip, r7
 8000810:	08d9      	lsrs	r1, r3, #3
 8000812:	e7a0      	b.n	8000756 <__aeabi_dadd+0x2aa>
 8000814:	000007ff 	.word	0x000007ff
 8000818:	ff7fffff 	.word	0xff7fffff
 800081c:	800fffff 	.word	0x800fffff
 8000820:	000007fe 	.word	0x000007fe
 8000824:	1b73      	subs	r3, r6, r5
 8000826:	2d00      	cmp	r5, #0
 8000828:	d100      	bne.n	800082c <__aeabi_dadd+0x380>
 800082a:	e085      	b.n	8000938 <__aeabi_dadd+0x48c>
 800082c:	49d8      	ldr	r1, [pc, #864]	; (8000b90 <__aeabi_dadd+0x6e4>)
 800082e:	428e      	cmp	r6, r1
 8000830:	d100      	bne.n	8000834 <__aeabi_dadd+0x388>
 8000832:	e173      	b.n	8000b1c <__aeabi_dadd+0x670>
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	464d      	mov	r5, r9
 8000838:	0409      	lsls	r1, r1, #16
 800083a:	430d      	orrs	r5, r1
 800083c:	46a9      	mov	r9, r5
 800083e:	2b38      	cmp	r3, #56	; 0x38
 8000840:	dd00      	ble.n	8000844 <__aeabi_dadd+0x398>
 8000842:	e10e      	b.n	8000a62 <__aeabi_dadd+0x5b6>
 8000844:	2b1f      	cmp	r3, #31
 8000846:	dd00      	ble.n	800084a <__aeabi_dadd+0x39e>
 8000848:	e184      	b.n	8000b54 <__aeabi_dadd+0x6a8>
 800084a:	2120      	movs	r1, #32
 800084c:	1ac9      	subs	r1, r1, r3
 800084e:	0005      	movs	r5, r0
 8000850:	464f      	mov	r7, r9
 8000852:	4088      	lsls	r0, r1
 8000854:	408f      	lsls	r7, r1
 8000856:	1e41      	subs	r1, r0, #1
 8000858:	4188      	sbcs	r0, r1
 800085a:	4649      	mov	r1, r9
 800085c:	40dd      	lsrs	r5, r3
 800085e:	40d9      	lsrs	r1, r3
 8000860:	432f      	orrs	r7, r5
 8000862:	4307      	orrs	r7, r0
 8000864:	4488      	add	r8, r1
 8000866:	18bf      	adds	r7, r7, r2
 8000868:	4297      	cmp	r7, r2
 800086a:	4192      	sbcs	r2, r2
 800086c:	4251      	negs	r1, r2
 800086e:	4441      	add	r1, r8
 8000870:	0035      	movs	r5, r6
 8000872:	e040      	b.n	80008f6 <__aeabi_dadd+0x44a>
 8000874:	49c6      	ldr	r1, [pc, #792]	; (8000b90 <__aeabi_dadd+0x6e4>)
 8000876:	428e      	cmp	r6, r1
 8000878:	d100      	bne.n	800087c <__aeabi_dadd+0x3d0>
 800087a:	e0a5      	b.n	80009c8 <__aeabi_dadd+0x51c>
 800087c:	2180      	movs	r1, #128	; 0x80
 800087e:	464c      	mov	r4, r9
 8000880:	0409      	lsls	r1, r1, #16
 8000882:	430c      	orrs	r4, r1
 8000884:	46a1      	mov	r9, r4
 8000886:	2f38      	cmp	r7, #56	; 0x38
 8000888:	dd00      	ble.n	800088c <__aeabi_dadd+0x3e0>
 800088a:	e0be      	b.n	8000a0a <__aeabi_dadd+0x55e>
 800088c:	2f1f      	cmp	r7, #31
 800088e:	dd00      	ble.n	8000892 <__aeabi_dadd+0x3e6>
 8000890:	e0ed      	b.n	8000a6e <__aeabi_dadd+0x5c2>
 8000892:	2120      	movs	r1, #32
 8000894:	0005      	movs	r5, r0
 8000896:	1bc9      	subs	r1, r1, r7
 8000898:	464c      	mov	r4, r9
 800089a:	4088      	lsls	r0, r1
 800089c:	408c      	lsls	r4, r1
 800089e:	40fd      	lsrs	r5, r7
 80008a0:	1e41      	subs	r1, r0, #1
 80008a2:	4188      	sbcs	r0, r1
 80008a4:	4649      	mov	r1, r9
 80008a6:	432c      	orrs	r4, r5
 80008a8:	4320      	orrs	r0, r4
 80008aa:	40f9      	lsrs	r1, r7
 80008ac:	4644      	mov	r4, r8
 80008ae:	1a61      	subs	r1, r4, r1
 80008b0:	4688      	mov	r8, r1
 80008b2:	1a17      	subs	r7, r2, r0
 80008b4:	42ba      	cmp	r2, r7
 80008b6:	4192      	sbcs	r2, r2
 80008b8:	4641      	mov	r1, r8
 80008ba:	4252      	negs	r2, r2
 80008bc:	1a89      	subs	r1, r1, r2
 80008be:	001c      	movs	r4, r3
 80008c0:	0035      	movs	r5, r6
 80008c2:	e638      	b.n	8000536 <__aeabi_dadd+0x8a>
 80008c4:	0030      	movs	r0, r6
 80008c6:	3d1f      	subs	r5, #31
 80008c8:	40e8      	lsrs	r0, r5
 80008ca:	2b20      	cmp	r3, #32
 80008cc:	d003      	beq.n	80008d6 <__aeabi_dadd+0x42a>
 80008ce:	2140      	movs	r1, #64	; 0x40
 80008d0:	1acb      	subs	r3, r1, r3
 80008d2:	409e      	lsls	r6, r3
 80008d4:	4337      	orrs	r7, r6
 80008d6:	1e7b      	subs	r3, r7, #1
 80008d8:	419f      	sbcs	r7, r3
 80008da:	2100      	movs	r1, #0
 80008dc:	4307      	orrs	r7, r0
 80008de:	2500      	movs	r5, #0
 80008e0:	e704      	b.n	80006ec <__aeabi_dadd+0x240>
 80008e2:	4643      	mov	r3, r8
 80008e4:	4313      	orrs	r3, r2
 80008e6:	001f      	movs	r7, r3
 80008e8:	1e7a      	subs	r2, r7, #1
 80008ea:	4197      	sbcs	r7, r2
 80008ec:	183f      	adds	r7, r7, r0
 80008ee:	4287      	cmp	r7, r0
 80008f0:	4180      	sbcs	r0, r0
 80008f2:	4241      	negs	r1, r0
 80008f4:	4449      	add	r1, r9
 80008f6:	020b      	lsls	r3, r1, #8
 80008f8:	d400      	bmi.n	80008fc <__aeabi_dadd+0x450>
 80008fa:	e6f7      	b.n	80006ec <__aeabi_dadd+0x240>
 80008fc:	4ba4      	ldr	r3, [pc, #656]	; (8000b90 <__aeabi_dadd+0x6e4>)
 80008fe:	3501      	adds	r5, #1
 8000900:	429d      	cmp	r5, r3
 8000902:	d100      	bne.n	8000906 <__aeabi_dadd+0x45a>
 8000904:	e703      	b.n	800070e <__aeabi_dadd+0x262>
 8000906:	4aa3      	ldr	r2, [pc, #652]	; (8000b94 <__aeabi_dadd+0x6e8>)
 8000908:	087b      	lsrs	r3, r7, #1
 800090a:	400a      	ands	r2, r1
 800090c:	2101      	movs	r1, #1
 800090e:	400f      	ands	r7, r1
 8000910:	431f      	orrs	r7, r3
 8000912:	07d3      	lsls	r3, r2, #31
 8000914:	431f      	orrs	r7, r3
 8000916:	0851      	lsrs	r1, r2, #1
 8000918:	e637      	b.n	800058a <__aeabi_dadd+0xde>
 800091a:	003b      	movs	r3, r7
 800091c:	4646      	mov	r6, r8
 800091e:	3b20      	subs	r3, #32
 8000920:	40de      	lsrs	r6, r3
 8000922:	2f20      	cmp	r7, #32
 8000924:	d004      	beq.n	8000930 <__aeabi_dadd+0x484>
 8000926:	2340      	movs	r3, #64	; 0x40
 8000928:	4641      	mov	r1, r8
 800092a:	1bdb      	subs	r3, r3, r7
 800092c:	4099      	lsls	r1, r3
 800092e:	430a      	orrs	r2, r1
 8000930:	1e57      	subs	r7, r2, #1
 8000932:	41ba      	sbcs	r2, r7
 8000934:	4332      	orrs	r2, r6
 8000936:	e5f8      	b.n	800052a <__aeabi_dadd+0x7e>
 8000938:	4649      	mov	r1, r9
 800093a:	4301      	orrs	r1, r0
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x494>
 800093e:	e0f4      	b.n	8000b2a <__aeabi_dadd+0x67e>
 8000940:	1e59      	subs	r1, r3, #1
 8000942:	2900      	cmp	r1, #0
 8000944:	d100      	bne.n	8000948 <__aeabi_dadd+0x49c>
 8000946:	e115      	b.n	8000b74 <__aeabi_dadd+0x6c8>
 8000948:	4d91      	ldr	r5, [pc, #580]	; (8000b90 <__aeabi_dadd+0x6e4>)
 800094a:	42ab      	cmp	r3, r5
 800094c:	d100      	bne.n	8000950 <__aeabi_dadd+0x4a4>
 800094e:	e0e5      	b.n	8000b1c <__aeabi_dadd+0x670>
 8000950:	000b      	movs	r3, r1
 8000952:	e774      	b.n	800083e <__aeabi_dadd+0x392>
 8000954:	2120      	movs	r1, #32
 8000956:	1ac9      	subs	r1, r1, r3
 8000958:	0016      	movs	r6, r2
 800095a:	4647      	mov	r7, r8
 800095c:	408a      	lsls	r2, r1
 800095e:	408f      	lsls	r7, r1
 8000960:	1e51      	subs	r1, r2, #1
 8000962:	418a      	sbcs	r2, r1
 8000964:	4641      	mov	r1, r8
 8000966:	40de      	lsrs	r6, r3
 8000968:	40d9      	lsrs	r1, r3
 800096a:	4337      	orrs	r7, r6
 800096c:	4317      	orrs	r7, r2
 800096e:	4489      	add	r9, r1
 8000970:	e7bc      	b.n	80008ec <__aeabi_dadd+0x440>
 8000972:	1887      	adds	r7, r0, r2
 8000974:	4649      	mov	r1, r9
 8000976:	4287      	cmp	r7, r0
 8000978:	419b      	sbcs	r3, r3
 800097a:	4441      	add	r1, r8
 800097c:	425b      	negs	r3, r3
 800097e:	18c9      	adds	r1, r1, r3
 8000980:	2501      	movs	r5, #1
 8000982:	020b      	lsls	r3, r1, #8
 8000984:	d400      	bmi.n	8000988 <__aeabi_dadd+0x4dc>
 8000986:	e6b1      	b.n	80006ec <__aeabi_dadd+0x240>
 8000988:	2502      	movs	r5, #2
 800098a:	e7bc      	b.n	8000906 <__aeabi_dadd+0x45a>
 800098c:	4641      	mov	r1, r8
 800098e:	08d2      	lsrs	r2, r2, #3
 8000990:	0748      	lsls	r0, r1, #29
 8000992:	4302      	orrs	r2, r0
 8000994:	4694      	mov	ip, r2
 8000996:	08c9      	lsrs	r1, r1, #3
 8000998:	001c      	movs	r4, r3
 800099a:	003d      	movs	r5, r7
 800099c:	e6ae      	b.n	80006fc <__aeabi_dadd+0x250>
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d000      	beq.n	80009a4 <__aeabi_dadd+0x4f8>
 80009a2:	e6b8      	b.n	8000716 <__aeabi_dadd+0x26a>
 80009a4:	003b      	movs	r3, r7
 80009a6:	08d2      	lsrs	r2, r2, #3
 80009a8:	077f      	lsls	r7, r7, #29
 80009aa:	4317      	orrs	r7, r2
 80009ac:	46bc      	mov	ip, r7
 80009ae:	08d9      	lsrs	r1, r3, #3
 80009b0:	e6d1      	b.n	8000756 <__aeabi_dadd+0x2aa>
 80009b2:	2e00      	cmp	r6, #0
 80009b4:	d100      	bne.n	80009b8 <__aeabi_dadd+0x50c>
 80009b6:	e08c      	b.n	8000ad2 <__aeabi_dadd+0x626>
 80009b8:	4641      	mov	r1, r8
 80009ba:	08d2      	lsrs	r2, r2, #3
 80009bc:	074f      	lsls	r7, r1, #29
 80009be:	433a      	orrs	r2, r7
 80009c0:	4694      	mov	ip, r2
 80009c2:	08c9      	lsrs	r1, r1, #3
 80009c4:	001c      	movs	r4, r3
 80009c6:	e69c      	b.n	8000702 <__aeabi_dadd+0x256>
 80009c8:	4641      	mov	r1, r8
 80009ca:	08d2      	lsrs	r2, r2, #3
 80009cc:	074f      	lsls	r7, r1, #29
 80009ce:	433a      	orrs	r2, r7
 80009d0:	4694      	mov	ip, r2
 80009d2:	08c9      	lsrs	r1, r1, #3
 80009d4:	001c      	movs	r4, r3
 80009d6:	e6be      	b.n	8000756 <__aeabi_dadd+0x2aa>
 80009d8:	464b      	mov	r3, r9
 80009da:	08c0      	lsrs	r0, r0, #3
 80009dc:	075f      	lsls	r7, r3, #29
 80009de:	4338      	orrs	r0, r7
 80009e0:	4684      	mov	ip, r0
 80009e2:	08d9      	lsrs	r1, r3, #3
 80009e4:	e6b7      	b.n	8000756 <__aeabi_dadd+0x2aa>
 80009e6:	1a87      	subs	r7, r0, r2
 80009e8:	464b      	mov	r3, r9
 80009ea:	4642      	mov	r2, r8
 80009ec:	42b8      	cmp	r0, r7
 80009ee:	4180      	sbcs	r0, r0
 80009f0:	1a99      	subs	r1, r3, r2
 80009f2:	4240      	negs	r0, r0
 80009f4:	1a09      	subs	r1, r1, r0
 80009f6:	2501      	movs	r5, #1
 80009f8:	e59d      	b.n	8000536 <__aeabi_dadd+0x8a>
 80009fa:	464a      	mov	r2, r9
 80009fc:	08c0      	lsrs	r0, r0, #3
 80009fe:	0757      	lsls	r7, r2, #29
 8000a00:	4338      	orrs	r0, r7
 8000a02:	4684      	mov	ip, r0
 8000a04:	08d1      	lsrs	r1, r2, #3
 8000a06:	001d      	movs	r5, r3
 8000a08:	e678      	b.n	80006fc <__aeabi_dadd+0x250>
 8000a0a:	4649      	mov	r1, r9
 8000a0c:	4301      	orrs	r1, r0
 8000a0e:	0008      	movs	r0, r1
 8000a10:	1e47      	subs	r7, r0, #1
 8000a12:	41b8      	sbcs	r0, r7
 8000a14:	e74d      	b.n	80008b2 <__aeabi_dadd+0x406>
 8000a16:	1a17      	subs	r7, r2, r0
 8000a18:	4641      	mov	r1, r8
 8000a1a:	4648      	mov	r0, r9
 8000a1c:	42ba      	cmp	r2, r7
 8000a1e:	41b6      	sbcs	r6, r6
 8000a20:	1a09      	subs	r1, r1, r0
 8000a22:	4276      	negs	r6, r6
 8000a24:	1b8e      	subs	r6, r1, r6
 8000a26:	001c      	movs	r4, r3
 8000a28:	e58a      	b.n	8000540 <__aeabi_dadd+0x94>
 8000a2a:	2900      	cmp	r1, #0
 8000a2c:	d12e      	bne.n	8000a8c <__aeabi_dadd+0x5e0>
 8000a2e:	2e00      	cmp	r6, #0
 8000a30:	d1ca      	bne.n	80009c8 <__aeabi_dadd+0x51c>
 8000a32:	2180      	movs	r1, #128	; 0x80
 8000a34:	2400      	movs	r4, #0
 8000a36:	0309      	lsls	r1, r1, #12
 8000a38:	e691      	b.n	800075e <__aeabi_dadd+0x2b2>
 8000a3a:	4649      	mov	r1, r9
 8000a3c:	4646      	mov	r6, r8
 8000a3e:	1a87      	subs	r7, r0, r2
 8000a40:	1b8e      	subs	r6, r1, r6
 8000a42:	42b8      	cmp	r0, r7
 8000a44:	4189      	sbcs	r1, r1
 8000a46:	4249      	negs	r1, r1
 8000a48:	1a71      	subs	r1, r6, r1
 8000a4a:	020e      	lsls	r6, r1, #8
 8000a4c:	d53c      	bpl.n	8000ac8 <__aeabi_dadd+0x61c>
 8000a4e:	1a17      	subs	r7, r2, r0
 8000a50:	4641      	mov	r1, r8
 8000a52:	4648      	mov	r0, r9
 8000a54:	42ba      	cmp	r2, r7
 8000a56:	4192      	sbcs	r2, r2
 8000a58:	1a09      	subs	r1, r1, r0
 8000a5a:	4252      	negs	r2, r2
 8000a5c:	1a89      	subs	r1, r1, r2
 8000a5e:	001c      	movs	r4, r3
 8000a60:	e593      	b.n	800058a <__aeabi_dadd+0xde>
 8000a62:	464b      	mov	r3, r9
 8000a64:	4303      	orrs	r3, r0
 8000a66:	001f      	movs	r7, r3
 8000a68:	1e78      	subs	r0, r7, #1
 8000a6a:	4187      	sbcs	r7, r0
 8000a6c:	e6fb      	b.n	8000866 <__aeabi_dadd+0x3ba>
 8000a6e:	0039      	movs	r1, r7
 8000a70:	464c      	mov	r4, r9
 8000a72:	3920      	subs	r1, #32
 8000a74:	40cc      	lsrs	r4, r1
 8000a76:	2f20      	cmp	r7, #32
 8000a78:	d004      	beq.n	8000a84 <__aeabi_dadd+0x5d8>
 8000a7a:	2140      	movs	r1, #64	; 0x40
 8000a7c:	464d      	mov	r5, r9
 8000a7e:	1bc9      	subs	r1, r1, r7
 8000a80:	408d      	lsls	r5, r1
 8000a82:	4328      	orrs	r0, r5
 8000a84:	1e41      	subs	r1, r0, #1
 8000a86:	4188      	sbcs	r0, r1
 8000a88:	4320      	orrs	r0, r4
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dadd+0x406>
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	08c0      	lsrs	r0, r0, #3
 8000a90:	074d      	lsls	r5, r1, #29
 8000a92:	4328      	orrs	r0, r5
 8000a94:	08c9      	lsrs	r1, r1, #3
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d03e      	beq.n	8000b18 <__aeabi_dadd+0x66c>
 8000a9a:	2580      	movs	r5, #128	; 0x80
 8000a9c:	032d      	lsls	r5, r5, #12
 8000a9e:	4229      	tst	r1, r5
 8000aa0:	d008      	beq.n	8000ab4 <__aeabi_dadd+0x608>
 8000aa2:	4646      	mov	r6, r8
 8000aa4:	08f7      	lsrs	r7, r6, #3
 8000aa6:	422f      	tst	r7, r5
 8000aa8:	d104      	bne.n	8000ab4 <__aeabi_dadd+0x608>
 8000aaa:	001c      	movs	r4, r3
 8000aac:	0039      	movs	r1, r7
 8000aae:	08d2      	lsrs	r2, r2, #3
 8000ab0:	0770      	lsls	r0, r6, #29
 8000ab2:	4310      	orrs	r0, r2
 8000ab4:	00ca      	lsls	r2, r1, #3
 8000ab6:	0f43      	lsrs	r3, r0, #29
 8000ab8:	431a      	orrs	r2, r3
 8000aba:	00c0      	lsls	r0, r0, #3
 8000abc:	08c0      	lsrs	r0, r0, #3
 8000abe:	0757      	lsls	r7, r2, #29
 8000ac0:	4338      	orrs	r0, r7
 8000ac2:	4684      	mov	ip, r0
 8000ac4:	08d1      	lsrs	r1, r2, #3
 8000ac6:	e646      	b.n	8000756 <__aeabi_dadd+0x2aa>
 8000ac8:	003b      	movs	r3, r7
 8000aca:	430b      	orrs	r3, r1
 8000acc:	469c      	mov	ip, r3
 8000ace:	d000      	beq.n	8000ad2 <__aeabi_dadd+0x626>
 8000ad0:	e60c      	b.n	80006ec <__aeabi_dadd+0x240>
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2400      	movs	r4, #0
 8000ad6:	e614      	b.n	8000702 <__aeabi_dadd+0x256>
 8000ad8:	1a17      	subs	r7, r2, r0
 8000ada:	4641      	mov	r1, r8
 8000adc:	4648      	mov	r0, r9
 8000ade:	42ba      	cmp	r2, r7
 8000ae0:	4192      	sbcs	r2, r2
 8000ae2:	1a09      	subs	r1, r1, r0
 8000ae4:	4252      	negs	r2, r2
 8000ae6:	1a89      	subs	r1, r1, r2
 8000ae8:	001c      	movs	r4, r3
 8000aea:	2501      	movs	r5, #1
 8000aec:	e523      	b.n	8000536 <__aeabi_dadd+0x8a>
 8000aee:	003b      	movs	r3, r7
 8000af0:	08d2      	lsrs	r2, r2, #3
 8000af2:	077f      	lsls	r7, r7, #29
 8000af4:	4317      	orrs	r7, r2
 8000af6:	46bc      	mov	ip, r7
 8000af8:	08d9      	lsrs	r1, r3, #3
 8000afa:	e602      	b.n	8000702 <__aeabi_dadd+0x256>
 8000afc:	1887      	adds	r7, r0, r2
 8000afe:	4649      	mov	r1, r9
 8000b00:	4287      	cmp	r7, r0
 8000b02:	419b      	sbcs	r3, r3
 8000b04:	4441      	add	r1, r8
 8000b06:	425b      	negs	r3, r3
 8000b08:	18c9      	adds	r1, r1, r3
 8000b0a:	020b      	lsls	r3, r1, #8
 8000b0c:	d400      	bmi.n	8000b10 <__aeabi_dadd+0x664>
 8000b0e:	e5ed      	b.n	80006ec <__aeabi_dadd+0x240>
 8000b10:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <__aeabi_dadd+0x6e8>)
 8000b12:	2501      	movs	r5, #1
 8000b14:	4019      	ands	r1, r3
 8000b16:	e5e9      	b.n	80006ec <__aeabi_dadd+0x240>
 8000b18:	4684      	mov	ip, r0
 8000b1a:	e61c      	b.n	8000756 <__aeabi_dadd+0x2aa>
 8000b1c:	4643      	mov	r3, r8
 8000b1e:	08d2      	lsrs	r2, r2, #3
 8000b20:	075f      	lsls	r7, r3, #29
 8000b22:	433a      	orrs	r2, r7
 8000b24:	4694      	mov	ip, r2
 8000b26:	08d9      	lsrs	r1, r3, #3
 8000b28:	e615      	b.n	8000756 <__aeabi_dadd+0x2aa>
 8000b2a:	0039      	movs	r1, r7
 8000b2c:	08d2      	lsrs	r2, r2, #3
 8000b2e:	077f      	lsls	r7, r7, #29
 8000b30:	433a      	orrs	r2, r7
 8000b32:	4694      	mov	ip, r2
 8000b34:	08c9      	lsrs	r1, r1, #3
 8000b36:	001d      	movs	r5, r3
 8000b38:	e5e0      	b.n	80006fc <__aeabi_dadd+0x250>
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	0035      	movs	r5, r6
 8000b3e:	2200      	movs	r2, #0
 8000b40:	469c      	mov	ip, r3
 8000b42:	e540      	b.n	80005c6 <__aeabi_dadd+0x11a>
 8000b44:	4641      	mov	r1, r8
 8000b46:	08d2      	lsrs	r2, r2, #3
 8000b48:	074f      	lsls	r7, r1, #29
 8000b4a:	4317      	orrs	r7, r2
 8000b4c:	46bc      	mov	ip, r7
 8000b4e:	08c9      	lsrs	r1, r1, #3
 8000b50:	001c      	movs	r4, r3
 8000b52:	e600      	b.n	8000756 <__aeabi_dadd+0x2aa>
 8000b54:	0019      	movs	r1, r3
 8000b56:	464d      	mov	r5, r9
 8000b58:	3920      	subs	r1, #32
 8000b5a:	40cd      	lsrs	r5, r1
 8000b5c:	2b20      	cmp	r3, #32
 8000b5e:	d004      	beq.n	8000b6a <__aeabi_dadd+0x6be>
 8000b60:	2140      	movs	r1, #64	; 0x40
 8000b62:	1acb      	subs	r3, r1, r3
 8000b64:	4649      	mov	r1, r9
 8000b66:	4099      	lsls	r1, r3
 8000b68:	4308      	orrs	r0, r1
 8000b6a:	0007      	movs	r7, r0
 8000b6c:	1e78      	subs	r0, r7, #1
 8000b6e:	4187      	sbcs	r7, r0
 8000b70:	432f      	orrs	r7, r5
 8000b72:	e678      	b.n	8000866 <__aeabi_dadd+0x3ba>
 8000b74:	1887      	adds	r7, r0, r2
 8000b76:	4649      	mov	r1, r9
 8000b78:	4297      	cmp	r7, r2
 8000b7a:	419b      	sbcs	r3, r3
 8000b7c:	4441      	add	r1, r8
 8000b7e:	425b      	negs	r3, r3
 8000b80:	18c9      	adds	r1, r1, r3
 8000b82:	e6fd      	b.n	8000980 <__aeabi_dadd+0x4d4>
 8000b84:	2300      	movs	r3, #0
 8000b86:	4d02      	ldr	r5, [pc, #8]	; (8000b90 <__aeabi_dadd+0x6e4>)
 8000b88:	469c      	mov	ip, r3
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	e51b      	b.n	80005c6 <__aeabi_dadd+0x11a>
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	000007ff 	.word	0x000007ff
 8000b94:	ff7fffff 	.word	0xff7fffff

08000b98 <__eqdf2>:
 8000b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b9a:	464e      	mov	r6, r9
 8000b9c:	4645      	mov	r5, r8
 8000b9e:	46de      	mov	lr, fp
 8000ba0:	4657      	mov	r7, sl
 8000ba2:	031c      	lsls	r4, r3, #12
 8000ba4:	b5e0      	push	{r5, r6, r7, lr}
 8000ba6:	0b24      	lsrs	r4, r4, #12
 8000ba8:	4e1a      	ldr	r6, [pc, #104]	; (8000c14 <__eqdf2+0x7c>)
 8000baa:	030f      	lsls	r7, r1, #12
 8000bac:	004d      	lsls	r5, r1, #1
 8000bae:	46a1      	mov	r9, r4
 8000bb0:	005c      	lsls	r4, r3, #1
 8000bb2:	0fdb      	lsrs	r3, r3, #31
 8000bb4:	4684      	mov	ip, r0
 8000bb6:	0b3f      	lsrs	r7, r7, #12
 8000bb8:	0d6d      	lsrs	r5, r5, #21
 8000bba:	0fc9      	lsrs	r1, r1, #31
 8000bbc:	4690      	mov	r8, r2
 8000bbe:	0d64      	lsrs	r4, r4, #21
 8000bc0:	469b      	mov	fp, r3
 8000bc2:	42b5      	cmp	r5, r6
 8000bc4:	d01a      	beq.n	8000bfc <__eqdf2+0x64>
 8000bc6:	42b4      	cmp	r4, r6
 8000bc8:	d010      	beq.n	8000bec <__eqdf2+0x54>
 8000bca:	2601      	movs	r6, #1
 8000bcc:	42a5      	cmp	r5, r4
 8000bce:	d10e      	bne.n	8000bee <__eqdf2+0x56>
 8000bd0:	454f      	cmp	r7, r9
 8000bd2:	d10c      	bne.n	8000bee <__eqdf2+0x56>
 8000bd4:	2601      	movs	r6, #1
 8000bd6:	45c4      	cmp	ip, r8
 8000bd8:	d109      	bne.n	8000bee <__eqdf2+0x56>
 8000bda:	4559      	cmp	r1, fp
 8000bdc:	d018      	beq.n	8000c10 <__eqdf2+0x78>
 8000bde:	2d00      	cmp	r5, #0
 8000be0:	d105      	bne.n	8000bee <__eqdf2+0x56>
 8000be2:	4338      	orrs	r0, r7
 8000be4:	0006      	movs	r6, r0
 8000be6:	1e70      	subs	r0, r6, #1
 8000be8:	4186      	sbcs	r6, r0
 8000bea:	e000      	b.n	8000bee <__eqdf2+0x56>
 8000bec:	2601      	movs	r6, #1
 8000bee:	0030      	movs	r0, r6
 8000bf0:	bc3c      	pop	{r2, r3, r4, r5}
 8000bf2:	4690      	mov	r8, r2
 8000bf4:	4699      	mov	r9, r3
 8000bf6:	46a2      	mov	sl, r4
 8000bf8:	46ab      	mov	fp, r5
 8000bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bfc:	003b      	movs	r3, r7
 8000bfe:	2601      	movs	r6, #1
 8000c00:	4303      	orrs	r3, r0
 8000c02:	d1f4      	bne.n	8000bee <__eqdf2+0x56>
 8000c04:	42ac      	cmp	r4, r5
 8000c06:	d1f2      	bne.n	8000bee <__eqdf2+0x56>
 8000c08:	464b      	mov	r3, r9
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	d1ef      	bne.n	8000bee <__eqdf2+0x56>
 8000c0e:	e7e1      	b.n	8000bd4 <__eqdf2+0x3c>
 8000c10:	2600      	movs	r6, #0
 8000c12:	e7ec      	b.n	8000bee <__eqdf2+0x56>
 8000c14:	000007ff 	.word	0x000007ff

08000c18 <__gedf2>:
 8000c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1a:	464e      	mov	r6, r9
 8000c1c:	4645      	mov	r5, r8
 8000c1e:	4657      	mov	r7, sl
 8000c20:	46de      	mov	lr, fp
 8000c22:	031c      	lsls	r4, r3, #12
 8000c24:	b5e0      	push	{r5, r6, r7, lr}
 8000c26:	0b24      	lsrs	r4, r4, #12
 8000c28:	4e32      	ldr	r6, [pc, #200]	; (8000cf4 <__gedf2+0xdc>)
 8000c2a:	030f      	lsls	r7, r1, #12
 8000c2c:	004d      	lsls	r5, r1, #1
 8000c2e:	46a1      	mov	r9, r4
 8000c30:	005c      	lsls	r4, r3, #1
 8000c32:	4684      	mov	ip, r0
 8000c34:	0b3f      	lsrs	r7, r7, #12
 8000c36:	0d6d      	lsrs	r5, r5, #21
 8000c38:	0fc9      	lsrs	r1, r1, #31
 8000c3a:	4690      	mov	r8, r2
 8000c3c:	0d64      	lsrs	r4, r4, #21
 8000c3e:	0fdb      	lsrs	r3, r3, #31
 8000c40:	42b5      	cmp	r5, r6
 8000c42:	d02a      	beq.n	8000c9a <__gedf2+0x82>
 8000c44:	42b4      	cmp	r4, r6
 8000c46:	d019      	beq.n	8000c7c <__gedf2+0x64>
 8000c48:	2d00      	cmp	r5, #0
 8000c4a:	d12b      	bne.n	8000ca4 <__gedf2+0x8c>
 8000c4c:	4338      	orrs	r0, r7
 8000c4e:	4683      	mov	fp, r0
 8000c50:	4246      	negs	r6, r0
 8000c52:	4146      	adcs	r6, r0
 8000c54:	2c00      	cmp	r4, #0
 8000c56:	d102      	bne.n	8000c5e <__gedf2+0x46>
 8000c58:	4648      	mov	r0, r9
 8000c5a:	4302      	orrs	r2, r0
 8000c5c:	d028      	beq.n	8000cb0 <__gedf2+0x98>
 8000c5e:	2e00      	cmp	r6, #0
 8000c60:	d116      	bne.n	8000c90 <__gedf2+0x78>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d029      	beq.n	8000cba <__gedf2+0xa2>
 8000c66:	2302      	movs	r3, #2
 8000c68:	3901      	subs	r1, #1
 8000c6a:	400b      	ands	r3, r1
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	0018      	movs	r0, r3
 8000c70:	bc3c      	pop	{r2, r3, r4, r5}
 8000c72:	4690      	mov	r8, r2
 8000c74:	4699      	mov	r9, r3
 8000c76:	46a2      	mov	sl, r4
 8000c78:	46ab      	mov	fp, r5
 8000c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c7c:	464e      	mov	r6, r9
 8000c7e:	4332      	orrs	r2, r6
 8000c80:	d12f      	bne.n	8000ce2 <__gedf2+0xca>
 8000c82:	2d00      	cmp	r5, #0
 8000c84:	d1ed      	bne.n	8000c62 <__gedf2+0x4a>
 8000c86:	4338      	orrs	r0, r7
 8000c88:	4246      	negs	r6, r0
 8000c8a:	4146      	adcs	r6, r0
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	d0e8      	beq.n	8000c62 <__gedf2+0x4a>
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1ec      	bne.n	8000c6e <__gedf2+0x56>
 8000c94:	2301      	movs	r3, #1
 8000c96:	425b      	negs	r3, r3
 8000c98:	e7e9      	b.n	8000c6e <__gedf2+0x56>
 8000c9a:	003e      	movs	r6, r7
 8000c9c:	4306      	orrs	r6, r0
 8000c9e:	d120      	bne.n	8000ce2 <__gedf2+0xca>
 8000ca0:	42ac      	cmp	r4, r5
 8000ca2:	d0eb      	beq.n	8000c7c <__gedf2+0x64>
 8000ca4:	2c00      	cmp	r4, #0
 8000ca6:	d1dc      	bne.n	8000c62 <__gedf2+0x4a>
 8000ca8:	4648      	mov	r0, r9
 8000caa:	4302      	orrs	r2, r0
 8000cac:	d1d9      	bne.n	8000c62 <__gedf2+0x4a>
 8000cae:	e7da      	b.n	8000c66 <__gedf2+0x4e>
 8000cb0:	465a      	mov	r2, fp
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	d0da      	beq.n	8000c6e <__gedf2+0x56>
 8000cb8:	e7d5      	b.n	8000c66 <__gedf2+0x4e>
 8000cba:	42a5      	cmp	r5, r4
 8000cbc:	dc0a      	bgt.n	8000cd4 <__gedf2+0xbc>
 8000cbe:	dbe7      	blt.n	8000c90 <__gedf2+0x78>
 8000cc0:	454f      	cmp	r7, r9
 8000cc2:	d8d0      	bhi.n	8000c66 <__gedf2+0x4e>
 8000cc4:	d010      	beq.n	8000ce8 <__gedf2+0xd0>
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	454f      	cmp	r7, r9
 8000cca:	d2d0      	bcs.n	8000c6e <__gedf2+0x56>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	d0e1      	beq.n	8000c94 <__gedf2+0x7c>
 8000cd0:	000b      	movs	r3, r1
 8000cd2:	e7cc      	b.n	8000c6e <__gedf2+0x56>
 8000cd4:	4258      	negs	r0, r3
 8000cd6:	4143      	adcs	r3, r0
 8000cd8:	4258      	negs	r0, r3
 8000cda:	2302      	movs	r3, #2
 8000cdc:	4003      	ands	r3, r0
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	e7c5      	b.n	8000c6e <__gedf2+0x56>
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	425b      	negs	r3, r3
 8000ce6:	e7c2      	b.n	8000c6e <__gedf2+0x56>
 8000ce8:	45c4      	cmp	ip, r8
 8000cea:	d8bc      	bhi.n	8000c66 <__gedf2+0x4e>
 8000cec:	2300      	movs	r3, #0
 8000cee:	45c4      	cmp	ip, r8
 8000cf0:	d2bd      	bcs.n	8000c6e <__gedf2+0x56>
 8000cf2:	e7eb      	b.n	8000ccc <__gedf2+0xb4>
 8000cf4:	000007ff 	.word	0x000007ff

08000cf8 <__ledf2>:
 8000cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cfa:	464e      	mov	r6, r9
 8000cfc:	4645      	mov	r5, r8
 8000cfe:	4657      	mov	r7, sl
 8000d00:	46de      	mov	lr, fp
 8000d02:	031c      	lsls	r4, r3, #12
 8000d04:	b5e0      	push	{r5, r6, r7, lr}
 8000d06:	0b24      	lsrs	r4, r4, #12
 8000d08:	4e31      	ldr	r6, [pc, #196]	; (8000dd0 <__ledf2+0xd8>)
 8000d0a:	030f      	lsls	r7, r1, #12
 8000d0c:	004d      	lsls	r5, r1, #1
 8000d0e:	46a1      	mov	r9, r4
 8000d10:	005c      	lsls	r4, r3, #1
 8000d12:	4684      	mov	ip, r0
 8000d14:	0b3f      	lsrs	r7, r7, #12
 8000d16:	0d6d      	lsrs	r5, r5, #21
 8000d18:	0fc9      	lsrs	r1, r1, #31
 8000d1a:	4690      	mov	r8, r2
 8000d1c:	0d64      	lsrs	r4, r4, #21
 8000d1e:	0fdb      	lsrs	r3, r3, #31
 8000d20:	42b5      	cmp	r5, r6
 8000d22:	d011      	beq.n	8000d48 <__ledf2+0x50>
 8000d24:	42b4      	cmp	r4, r6
 8000d26:	d014      	beq.n	8000d52 <__ledf2+0x5a>
 8000d28:	2d00      	cmp	r5, #0
 8000d2a:	d130      	bne.n	8000d8e <__ledf2+0x96>
 8000d2c:	4338      	orrs	r0, r7
 8000d2e:	4683      	mov	fp, r0
 8000d30:	4246      	negs	r6, r0
 8000d32:	4146      	adcs	r6, r0
 8000d34:	2c00      	cmp	r4, #0
 8000d36:	d114      	bne.n	8000d62 <__ledf2+0x6a>
 8000d38:	4648      	mov	r0, r9
 8000d3a:	4302      	orrs	r2, r0
 8000d3c:	d111      	bne.n	8000d62 <__ledf2+0x6a>
 8000d3e:	465a      	mov	r2, fp
 8000d40:	2300      	movs	r3, #0
 8000d42:	2a00      	cmp	r2, #0
 8000d44:	d017      	beq.n	8000d76 <__ledf2+0x7e>
 8000d46:	e010      	b.n	8000d6a <__ledf2+0x72>
 8000d48:	003e      	movs	r6, r7
 8000d4a:	4306      	orrs	r6, r0
 8000d4c:	d112      	bne.n	8000d74 <__ledf2+0x7c>
 8000d4e:	42ac      	cmp	r4, r5
 8000d50:	d11d      	bne.n	8000d8e <__ledf2+0x96>
 8000d52:	464e      	mov	r6, r9
 8000d54:	4332      	orrs	r2, r6
 8000d56:	d10d      	bne.n	8000d74 <__ledf2+0x7c>
 8000d58:	2d00      	cmp	r5, #0
 8000d5a:	d104      	bne.n	8000d66 <__ledf2+0x6e>
 8000d5c:	4338      	orrs	r0, r7
 8000d5e:	4246      	negs	r6, r0
 8000d60:	4146      	adcs	r6, r0
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d10e      	bne.n	8000d84 <__ledf2+0x8c>
 8000d66:	4299      	cmp	r1, r3
 8000d68:	d017      	beq.n	8000d9a <__ledf2+0xa2>
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	3901      	subs	r1, #1
 8000d6e:	400b      	ands	r3, r1
 8000d70:	3b01      	subs	r3, #1
 8000d72:	e000      	b.n	8000d76 <__ledf2+0x7e>
 8000d74:	2302      	movs	r3, #2
 8000d76:	0018      	movs	r0, r3
 8000d78:	bc3c      	pop	{r2, r3, r4, r5}
 8000d7a:	4690      	mov	r8, r2
 8000d7c:	4699      	mov	r9, r3
 8000d7e:	46a2      	mov	sl, r4
 8000d80:	46ab      	mov	fp, r5
 8000d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1f6      	bne.n	8000d76 <__ledf2+0x7e>
 8000d88:	2301      	movs	r3, #1
 8000d8a:	425b      	negs	r3, r3
 8000d8c:	e7f3      	b.n	8000d76 <__ledf2+0x7e>
 8000d8e:	2c00      	cmp	r4, #0
 8000d90:	d1e9      	bne.n	8000d66 <__ledf2+0x6e>
 8000d92:	4648      	mov	r0, r9
 8000d94:	4302      	orrs	r2, r0
 8000d96:	d1e6      	bne.n	8000d66 <__ledf2+0x6e>
 8000d98:	e7e7      	b.n	8000d6a <__ledf2+0x72>
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	dd06      	ble.n	8000dac <__ledf2+0xb4>
 8000d9e:	4258      	negs	r0, r3
 8000da0:	4143      	adcs	r3, r0
 8000da2:	4258      	negs	r0, r3
 8000da4:	2302      	movs	r3, #2
 8000da6:	4003      	ands	r3, r0
 8000da8:	3b01      	subs	r3, #1
 8000daa:	e7e4      	b.n	8000d76 <__ledf2+0x7e>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	dbe9      	blt.n	8000d84 <__ledf2+0x8c>
 8000db0:	454f      	cmp	r7, r9
 8000db2:	d8da      	bhi.n	8000d6a <__ledf2+0x72>
 8000db4:	d006      	beq.n	8000dc4 <__ledf2+0xcc>
 8000db6:	2300      	movs	r3, #0
 8000db8:	454f      	cmp	r7, r9
 8000dba:	d2dc      	bcs.n	8000d76 <__ledf2+0x7e>
 8000dbc:	2900      	cmp	r1, #0
 8000dbe:	d0e3      	beq.n	8000d88 <__ledf2+0x90>
 8000dc0:	000b      	movs	r3, r1
 8000dc2:	e7d8      	b.n	8000d76 <__ledf2+0x7e>
 8000dc4:	45c4      	cmp	ip, r8
 8000dc6:	d8d0      	bhi.n	8000d6a <__ledf2+0x72>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	45c4      	cmp	ip, r8
 8000dcc:	d2d3      	bcs.n	8000d76 <__ledf2+0x7e>
 8000dce:	e7f5      	b.n	8000dbc <__ledf2+0xc4>
 8000dd0:	000007ff 	.word	0x000007ff

08000dd4 <__aeabi_dmul>:
 8000dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd6:	4657      	mov	r7, sl
 8000dd8:	464e      	mov	r6, r9
 8000dda:	4645      	mov	r5, r8
 8000ddc:	46de      	mov	lr, fp
 8000dde:	b5e0      	push	{r5, r6, r7, lr}
 8000de0:	030c      	lsls	r4, r1, #12
 8000de2:	0006      	movs	r6, r0
 8000de4:	0048      	lsls	r0, r1, #1
 8000de6:	b087      	sub	sp, #28
 8000de8:	4692      	mov	sl, r2
 8000dea:	4698      	mov	r8, r3
 8000dec:	0b24      	lsrs	r4, r4, #12
 8000dee:	0d40      	lsrs	r0, r0, #21
 8000df0:	0fcf      	lsrs	r7, r1, #31
 8000df2:	2800      	cmp	r0, #0
 8000df4:	d100      	bne.n	8000df8 <__aeabi_dmul+0x24>
 8000df6:	e078      	b.n	8000eea <__aeabi_dmul+0x116>
 8000df8:	4b7b      	ldr	r3, [pc, #492]	; (8000fe8 <__aeabi_dmul+0x214>)
 8000dfa:	4298      	cmp	r0, r3
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_dmul+0x2c>
 8000dfe:	e090      	b.n	8000f22 <__aeabi_dmul+0x14e>
 8000e00:	0f73      	lsrs	r3, r6, #29
 8000e02:	00e4      	lsls	r4, r4, #3
 8000e04:	431c      	orrs	r4, r3
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	4a78      	ldr	r2, [pc, #480]	; (8000fec <__aeabi_dmul+0x218>)
 8000e0a:	041b      	lsls	r3, r3, #16
 8000e0c:	431c      	orrs	r4, r3
 8000e0e:	4694      	mov	ip, r2
 8000e10:	0003      	movs	r3, r0
 8000e12:	4463      	add	r3, ip
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	2300      	movs	r3, #0
 8000e18:	4699      	mov	r9, r3
 8000e1a:	469b      	mov	fp, r3
 8000e1c:	00f5      	lsls	r5, r6, #3
 8000e1e:	4643      	mov	r3, r8
 8000e20:	4642      	mov	r2, r8
 8000e22:	031e      	lsls	r6, r3, #12
 8000e24:	0fd2      	lsrs	r2, r2, #31
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4650      	mov	r0, sl
 8000e2a:	0b36      	lsrs	r6, r6, #12
 8000e2c:	0d5b      	lsrs	r3, r3, #21
 8000e2e:	4690      	mov	r8, r2
 8000e30:	d100      	bne.n	8000e34 <__aeabi_dmul+0x60>
 8000e32:	e080      	b.n	8000f36 <__aeabi_dmul+0x162>
 8000e34:	4a6c      	ldr	r2, [pc, #432]	; (8000fe8 <__aeabi_dmul+0x214>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d01d      	beq.n	8000e76 <__aeabi_dmul+0xa2>
 8000e3a:	496c      	ldr	r1, [pc, #432]	; (8000fec <__aeabi_dmul+0x218>)
 8000e3c:	0f42      	lsrs	r2, r0, #29
 8000e3e:	468c      	mov	ip, r1
 8000e40:	9900      	ldr	r1, [sp, #0]
 8000e42:	4463      	add	r3, ip
 8000e44:	00f6      	lsls	r6, r6, #3
 8000e46:	468c      	mov	ip, r1
 8000e48:	4316      	orrs	r6, r2
 8000e4a:	2280      	movs	r2, #128	; 0x80
 8000e4c:	449c      	add	ip, r3
 8000e4e:	0412      	lsls	r2, r2, #16
 8000e50:	4663      	mov	r3, ip
 8000e52:	4316      	orrs	r6, r2
 8000e54:	00c2      	lsls	r2, r0, #3
 8000e56:	2000      	movs	r0, #0
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	9900      	ldr	r1, [sp, #0]
 8000e5c:	4643      	mov	r3, r8
 8000e5e:	3101      	adds	r1, #1
 8000e60:	468c      	mov	ip, r1
 8000e62:	4649      	mov	r1, r9
 8000e64:	407b      	eors	r3, r7
 8000e66:	9301      	str	r3, [sp, #4]
 8000e68:	290f      	cmp	r1, #15
 8000e6a:	d900      	bls.n	8000e6e <__aeabi_dmul+0x9a>
 8000e6c:	e0c6      	b.n	8000ffc <__aeabi_dmul+0x228>
 8000e6e:	4b60      	ldr	r3, [pc, #384]	; (8000ff0 <__aeabi_dmul+0x21c>)
 8000e70:	0089      	lsls	r1, r1, #2
 8000e72:	5859      	ldr	r1, [r3, r1]
 8000e74:	468f      	mov	pc, r1
 8000e76:	495c      	ldr	r1, [pc, #368]	; (8000fe8 <__aeabi_dmul+0x214>)
 8000e78:	4652      	mov	r2, sl
 8000e7a:	468c      	mov	ip, r1
 8000e7c:	9b00      	ldr	r3, [sp, #0]
 8000e7e:	4332      	orrs	r2, r6
 8000e80:	4463      	add	r3, ip
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	d000      	beq.n	8000e8a <__aeabi_dmul+0xb6>
 8000e88:	e08d      	b.n	8000fa6 <__aeabi_dmul+0x1d2>
 8000e8a:	4649      	mov	r1, r9
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	4319      	orrs	r1, r3
 8000e90:	4689      	mov	r9, r1
 8000e92:	2600      	movs	r6, #0
 8000e94:	2002      	movs	r0, #2
 8000e96:	e7e0      	b.n	8000e5a <__aeabi_dmul+0x86>
 8000e98:	4643      	mov	r3, r8
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	0034      	movs	r4, r6
 8000e9e:	0015      	movs	r5, r2
 8000ea0:	4683      	mov	fp, r0
 8000ea2:	465b      	mov	r3, fp
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d064      	beq.n	8000f72 <__aeabi_dmul+0x19e>
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	d100      	bne.n	8000eae <__aeabi_dmul+0xda>
 8000eac:	e1f1      	b.n	8001292 <__aeabi_dmul+0x4be>
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d000      	beq.n	8000eb4 <__aeabi_dmul+0xe0>
 8000eb2:	e15e      	b.n	8001172 <__aeabi_dmul+0x39e>
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2600      	movs	r6, #0
 8000eb8:	2500      	movs	r5, #0
 8000eba:	2100      	movs	r1, #0
 8000ebc:	0336      	lsls	r6, r6, #12
 8000ebe:	0b34      	lsrs	r4, r6, #12
 8000ec0:	0d0e      	lsrs	r6, r1, #20
 8000ec2:	0536      	lsls	r6, r6, #20
 8000ec4:	4326      	orrs	r6, r4
 8000ec6:	4c4b      	ldr	r4, [pc, #300]	; (8000ff4 <__aeabi_dmul+0x220>)
 8000ec8:	0512      	lsls	r2, r2, #20
 8000eca:	4034      	ands	r4, r6
 8000ecc:	4314      	orrs	r4, r2
 8000ece:	9b01      	ldr	r3, [sp, #4]
 8000ed0:	0064      	lsls	r4, r4, #1
 8000ed2:	07db      	lsls	r3, r3, #31
 8000ed4:	0864      	lsrs	r4, r4, #1
 8000ed6:	431c      	orrs	r4, r3
 8000ed8:	0028      	movs	r0, r5
 8000eda:	0021      	movs	r1, r4
 8000edc:	b007      	add	sp, #28
 8000ede:	bc3c      	pop	{r2, r3, r4, r5}
 8000ee0:	4690      	mov	r8, r2
 8000ee2:	4699      	mov	r9, r3
 8000ee4:	46a2      	mov	sl, r4
 8000ee6:	46ab      	mov	fp, r5
 8000ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eea:	0025      	movs	r5, r4
 8000eec:	4335      	orrs	r5, r6
 8000eee:	d052      	beq.n	8000f96 <__aeabi_dmul+0x1c2>
 8000ef0:	2c00      	cmp	r4, #0
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_dmul+0x122>
 8000ef4:	e176      	b.n	80011e4 <__aeabi_dmul+0x410>
 8000ef6:	0020      	movs	r0, r4
 8000ef8:	f000 fdec 	bl	8001ad4 <__clzsi2>
 8000efc:	0002      	movs	r2, r0
 8000efe:	3a0b      	subs	r2, #11
 8000f00:	231d      	movs	r3, #29
 8000f02:	0001      	movs	r1, r0
 8000f04:	1a9b      	subs	r3, r3, r2
 8000f06:	0032      	movs	r2, r6
 8000f08:	0035      	movs	r5, r6
 8000f0a:	3908      	subs	r1, #8
 8000f0c:	408c      	lsls	r4, r1
 8000f0e:	40da      	lsrs	r2, r3
 8000f10:	408d      	lsls	r5, r1
 8000f12:	4314      	orrs	r4, r2
 8000f14:	4b38      	ldr	r3, [pc, #224]	; (8000ff8 <__aeabi_dmul+0x224>)
 8000f16:	1a1b      	subs	r3, r3, r0
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	4699      	mov	r9, r3
 8000f1e:	469b      	mov	fp, r3
 8000f20:	e77d      	b.n	8000e1e <__aeabi_dmul+0x4a>
 8000f22:	0035      	movs	r5, r6
 8000f24:	4325      	orrs	r5, r4
 8000f26:	d12f      	bne.n	8000f88 <__aeabi_dmul+0x1b4>
 8000f28:	2308      	movs	r3, #8
 8000f2a:	4699      	mov	r9, r3
 8000f2c:	3b06      	subs	r3, #6
 8000f2e:	2400      	movs	r4, #0
 8000f30:	9000      	str	r0, [sp, #0]
 8000f32:	469b      	mov	fp, r3
 8000f34:	e773      	b.n	8000e1e <__aeabi_dmul+0x4a>
 8000f36:	4652      	mov	r2, sl
 8000f38:	4332      	orrs	r2, r6
 8000f3a:	d01e      	beq.n	8000f7a <__aeabi_dmul+0x1a6>
 8000f3c:	2e00      	cmp	r6, #0
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_dmul+0x16e>
 8000f40:	e142      	b.n	80011c8 <__aeabi_dmul+0x3f4>
 8000f42:	0030      	movs	r0, r6
 8000f44:	f000 fdc6 	bl	8001ad4 <__clzsi2>
 8000f48:	0002      	movs	r2, r0
 8000f4a:	3a0b      	subs	r2, #11
 8000f4c:	231d      	movs	r3, #29
 8000f4e:	0001      	movs	r1, r0
 8000f50:	1a9b      	subs	r3, r3, r2
 8000f52:	4652      	mov	r2, sl
 8000f54:	3908      	subs	r1, #8
 8000f56:	40da      	lsrs	r2, r3
 8000f58:	408e      	lsls	r6, r1
 8000f5a:	4316      	orrs	r6, r2
 8000f5c:	4652      	mov	r2, sl
 8000f5e:	408a      	lsls	r2, r1
 8000f60:	9b00      	ldr	r3, [sp, #0]
 8000f62:	4925      	ldr	r1, [pc, #148]	; (8000ff8 <__aeabi_dmul+0x224>)
 8000f64:	1a18      	subs	r0, r3, r0
 8000f66:	0003      	movs	r3, r0
 8000f68:	468c      	mov	ip, r1
 8000f6a:	4463      	add	r3, ip
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2000      	movs	r0, #0
 8000f70:	e773      	b.n	8000e5a <__aeabi_dmul+0x86>
 8000f72:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <__aeabi_dmul+0x214>)
 8000f74:	2600      	movs	r6, #0
 8000f76:	2500      	movs	r5, #0
 8000f78:	e79f      	b.n	8000eba <__aeabi_dmul+0xe6>
 8000f7a:	4649      	mov	r1, r9
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	4319      	orrs	r1, r3
 8000f80:	4689      	mov	r9, r1
 8000f82:	2600      	movs	r6, #0
 8000f84:	2001      	movs	r0, #1
 8000f86:	e768      	b.n	8000e5a <__aeabi_dmul+0x86>
 8000f88:	230c      	movs	r3, #12
 8000f8a:	4699      	mov	r9, r3
 8000f8c:	3b09      	subs	r3, #9
 8000f8e:	0035      	movs	r5, r6
 8000f90:	9000      	str	r0, [sp, #0]
 8000f92:	469b      	mov	fp, r3
 8000f94:	e743      	b.n	8000e1e <__aeabi_dmul+0x4a>
 8000f96:	2304      	movs	r3, #4
 8000f98:	4699      	mov	r9, r3
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	2400      	movs	r4, #0
 8000fa2:	469b      	mov	fp, r3
 8000fa4:	e73b      	b.n	8000e1e <__aeabi_dmul+0x4a>
 8000fa6:	464a      	mov	r2, r9
 8000fa8:	2303      	movs	r3, #3
 8000faa:	431a      	orrs	r2, r3
 8000fac:	4691      	mov	r9, r2
 8000fae:	2003      	movs	r0, #3
 8000fb0:	4652      	mov	r2, sl
 8000fb2:	e752      	b.n	8000e5a <__aeabi_dmul+0x86>
 8000fb4:	9701      	str	r7, [sp, #4]
 8000fb6:	e774      	b.n	8000ea2 <__aeabi_dmul+0xce>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	2680      	movs	r6, #128	; 0x80
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	0336      	lsls	r6, r6, #12
 8000fc0:	2500      	movs	r5, #0
 8000fc2:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <__aeabi_dmul+0x214>)
 8000fc4:	e779      	b.n	8000eba <__aeabi_dmul+0xe6>
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	031b      	lsls	r3, r3, #12
 8000fca:	421c      	tst	r4, r3
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_dmul+0x1fc>
 8000fce:	e0f3      	b.n	80011b8 <__aeabi_dmul+0x3e4>
 8000fd0:	421e      	tst	r6, r3
 8000fd2:	d000      	beq.n	8000fd6 <__aeabi_dmul+0x202>
 8000fd4:	e0f0      	b.n	80011b8 <__aeabi_dmul+0x3e4>
 8000fd6:	431e      	orrs	r6, r3
 8000fd8:	4643      	mov	r3, r8
 8000fda:	0336      	lsls	r6, r6, #12
 8000fdc:	0015      	movs	r5, r2
 8000fde:	0b36      	lsrs	r6, r6, #12
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	4a01      	ldr	r2, [pc, #4]	; (8000fe8 <__aeabi_dmul+0x214>)
 8000fe4:	e769      	b.n	8000eba <__aeabi_dmul+0xe6>
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	000007ff 	.word	0x000007ff
 8000fec:	fffffc01 	.word	0xfffffc01
 8000ff0:	08008544 	.word	0x08008544
 8000ff4:	800fffff 	.word	0x800fffff
 8000ff8:	fffffc0d 	.word	0xfffffc0d
 8000ffc:	0c2f      	lsrs	r7, r5, #16
 8000ffe:	042d      	lsls	r5, r5, #16
 8001000:	0c2d      	lsrs	r5, r5, #16
 8001002:	002b      	movs	r3, r5
 8001004:	0c11      	lsrs	r1, r2, #16
 8001006:	0412      	lsls	r2, r2, #16
 8001008:	0c12      	lsrs	r2, r2, #16
 800100a:	4353      	muls	r3, r2
 800100c:	4698      	mov	r8, r3
 800100e:	0013      	movs	r3, r2
 8001010:	0028      	movs	r0, r5
 8001012:	437b      	muls	r3, r7
 8001014:	4699      	mov	r9, r3
 8001016:	4348      	muls	r0, r1
 8001018:	4448      	add	r0, r9
 800101a:	4683      	mov	fp, r0
 800101c:	4640      	mov	r0, r8
 800101e:	000b      	movs	r3, r1
 8001020:	0c00      	lsrs	r0, r0, #16
 8001022:	4682      	mov	sl, r0
 8001024:	4658      	mov	r0, fp
 8001026:	437b      	muls	r3, r7
 8001028:	4450      	add	r0, sl
 800102a:	9302      	str	r3, [sp, #8]
 800102c:	4581      	cmp	r9, r0
 800102e:	d906      	bls.n	800103e <__aeabi_dmul+0x26a>
 8001030:	469a      	mov	sl, r3
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	025b      	lsls	r3, r3, #9
 8001036:	4699      	mov	r9, r3
 8001038:	44ca      	add	sl, r9
 800103a:	4653      	mov	r3, sl
 800103c:	9302      	str	r3, [sp, #8]
 800103e:	0c03      	lsrs	r3, r0, #16
 8001040:	469b      	mov	fp, r3
 8001042:	4643      	mov	r3, r8
 8001044:	041b      	lsls	r3, r3, #16
 8001046:	0400      	lsls	r0, r0, #16
 8001048:	0c1b      	lsrs	r3, r3, #16
 800104a:	4698      	mov	r8, r3
 800104c:	0003      	movs	r3, r0
 800104e:	4443      	add	r3, r8
 8001050:	9304      	str	r3, [sp, #16]
 8001052:	0c33      	lsrs	r3, r6, #16
 8001054:	4699      	mov	r9, r3
 8001056:	002b      	movs	r3, r5
 8001058:	0436      	lsls	r6, r6, #16
 800105a:	0c36      	lsrs	r6, r6, #16
 800105c:	4373      	muls	r3, r6
 800105e:	4698      	mov	r8, r3
 8001060:	0033      	movs	r3, r6
 8001062:	437b      	muls	r3, r7
 8001064:	469a      	mov	sl, r3
 8001066:	464b      	mov	r3, r9
 8001068:	435d      	muls	r5, r3
 800106a:	435f      	muls	r7, r3
 800106c:	4643      	mov	r3, r8
 800106e:	4455      	add	r5, sl
 8001070:	0c18      	lsrs	r0, r3, #16
 8001072:	1940      	adds	r0, r0, r5
 8001074:	4582      	cmp	sl, r0
 8001076:	d903      	bls.n	8001080 <__aeabi_dmul+0x2ac>
 8001078:	2380      	movs	r3, #128	; 0x80
 800107a:	025b      	lsls	r3, r3, #9
 800107c:	469a      	mov	sl, r3
 800107e:	4457      	add	r7, sl
 8001080:	0c05      	lsrs	r5, r0, #16
 8001082:	19eb      	adds	r3, r5, r7
 8001084:	9305      	str	r3, [sp, #20]
 8001086:	4643      	mov	r3, r8
 8001088:	041d      	lsls	r5, r3, #16
 800108a:	0c2d      	lsrs	r5, r5, #16
 800108c:	0400      	lsls	r0, r0, #16
 800108e:	1940      	adds	r0, r0, r5
 8001090:	0c25      	lsrs	r5, r4, #16
 8001092:	0424      	lsls	r4, r4, #16
 8001094:	0c24      	lsrs	r4, r4, #16
 8001096:	0027      	movs	r7, r4
 8001098:	4357      	muls	r7, r2
 800109a:	436a      	muls	r2, r5
 800109c:	4690      	mov	r8, r2
 800109e:	002a      	movs	r2, r5
 80010a0:	0c3b      	lsrs	r3, r7, #16
 80010a2:	469a      	mov	sl, r3
 80010a4:	434a      	muls	r2, r1
 80010a6:	4361      	muls	r1, r4
 80010a8:	4441      	add	r1, r8
 80010aa:	4451      	add	r1, sl
 80010ac:	4483      	add	fp, r0
 80010ae:	4588      	cmp	r8, r1
 80010b0:	d903      	bls.n	80010ba <__aeabi_dmul+0x2e6>
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	025b      	lsls	r3, r3, #9
 80010b6:	4698      	mov	r8, r3
 80010b8:	4442      	add	r2, r8
 80010ba:	043f      	lsls	r7, r7, #16
 80010bc:	0c0b      	lsrs	r3, r1, #16
 80010be:	0c3f      	lsrs	r7, r7, #16
 80010c0:	0409      	lsls	r1, r1, #16
 80010c2:	19c9      	adds	r1, r1, r7
 80010c4:	0027      	movs	r7, r4
 80010c6:	4698      	mov	r8, r3
 80010c8:	464b      	mov	r3, r9
 80010ca:	4377      	muls	r7, r6
 80010cc:	435c      	muls	r4, r3
 80010ce:	436e      	muls	r6, r5
 80010d0:	435d      	muls	r5, r3
 80010d2:	0c3b      	lsrs	r3, r7, #16
 80010d4:	4699      	mov	r9, r3
 80010d6:	19a4      	adds	r4, r4, r6
 80010d8:	444c      	add	r4, r9
 80010da:	4442      	add	r2, r8
 80010dc:	9503      	str	r5, [sp, #12]
 80010de:	42a6      	cmp	r6, r4
 80010e0:	d904      	bls.n	80010ec <__aeabi_dmul+0x318>
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	025b      	lsls	r3, r3, #9
 80010e6:	4698      	mov	r8, r3
 80010e8:	4445      	add	r5, r8
 80010ea:	9503      	str	r5, [sp, #12]
 80010ec:	9b02      	ldr	r3, [sp, #8]
 80010ee:	043f      	lsls	r7, r7, #16
 80010f0:	445b      	add	r3, fp
 80010f2:	001e      	movs	r6, r3
 80010f4:	4283      	cmp	r3, r0
 80010f6:	4180      	sbcs	r0, r0
 80010f8:	0423      	lsls	r3, r4, #16
 80010fa:	4698      	mov	r8, r3
 80010fc:	9b05      	ldr	r3, [sp, #20]
 80010fe:	0c3f      	lsrs	r7, r7, #16
 8001100:	4447      	add	r7, r8
 8001102:	4698      	mov	r8, r3
 8001104:	1876      	adds	r6, r6, r1
 8001106:	428e      	cmp	r6, r1
 8001108:	4189      	sbcs	r1, r1
 800110a:	4447      	add	r7, r8
 800110c:	4240      	negs	r0, r0
 800110e:	183d      	adds	r5, r7, r0
 8001110:	46a8      	mov	r8, r5
 8001112:	4249      	negs	r1, r1
 8001114:	4693      	mov	fp, r2
 8001116:	468a      	mov	sl, r1
 8001118:	44c3      	add	fp, r8
 800111a:	44da      	add	sl, fp
 800111c:	429f      	cmp	r7, r3
 800111e:	41bf      	sbcs	r7, r7
 8001120:	4580      	cmp	r8, r0
 8001122:	4180      	sbcs	r0, r0
 8001124:	9b03      	ldr	r3, [sp, #12]
 8001126:	4593      	cmp	fp, r2
 8001128:	4192      	sbcs	r2, r2
 800112a:	458a      	cmp	sl, r1
 800112c:	4189      	sbcs	r1, r1
 800112e:	4698      	mov	r8, r3
 8001130:	4653      	mov	r3, sl
 8001132:	4240      	negs	r0, r0
 8001134:	427f      	negs	r7, r7
 8001136:	4307      	orrs	r7, r0
 8001138:	0c24      	lsrs	r4, r4, #16
 800113a:	4252      	negs	r2, r2
 800113c:	4249      	negs	r1, r1
 800113e:	430a      	orrs	r2, r1
 8001140:	193c      	adds	r4, r7, r4
 8001142:	18a4      	adds	r4, r4, r2
 8001144:	0dda      	lsrs	r2, r3, #23
 8001146:	9b04      	ldr	r3, [sp, #16]
 8001148:	0275      	lsls	r5, r6, #9
 800114a:	431d      	orrs	r5, r3
 800114c:	1e68      	subs	r0, r5, #1
 800114e:	4185      	sbcs	r5, r0
 8001150:	4653      	mov	r3, sl
 8001152:	4444      	add	r4, r8
 8001154:	0264      	lsls	r4, r4, #9
 8001156:	0df6      	lsrs	r6, r6, #23
 8001158:	4314      	orrs	r4, r2
 800115a:	4335      	orrs	r5, r6
 800115c:	025a      	lsls	r2, r3, #9
 800115e:	4315      	orrs	r5, r2
 8001160:	01e3      	lsls	r3, r4, #7
 8001162:	d573      	bpl.n	800124c <__aeabi_dmul+0x478>
 8001164:	2101      	movs	r1, #1
 8001166:	086a      	lsrs	r2, r5, #1
 8001168:	400d      	ands	r5, r1
 800116a:	4315      	orrs	r5, r2
 800116c:	07e2      	lsls	r2, r4, #31
 800116e:	4315      	orrs	r5, r2
 8001170:	0864      	lsrs	r4, r4, #1
 8001172:	4a4b      	ldr	r2, [pc, #300]	; (80012a0 <__aeabi_dmul+0x4cc>)
 8001174:	4462      	add	r2, ip
 8001176:	2a00      	cmp	r2, #0
 8001178:	dd43      	ble.n	8001202 <__aeabi_dmul+0x42e>
 800117a:	076b      	lsls	r3, r5, #29
 800117c:	d009      	beq.n	8001192 <__aeabi_dmul+0x3be>
 800117e:	210f      	movs	r1, #15
 8001180:	4029      	ands	r1, r5
 8001182:	2904      	cmp	r1, #4
 8001184:	d005      	beq.n	8001192 <__aeabi_dmul+0x3be>
 8001186:	1d29      	adds	r1, r5, #4
 8001188:	42a9      	cmp	r1, r5
 800118a:	41ad      	sbcs	r5, r5
 800118c:	426d      	negs	r5, r5
 800118e:	1964      	adds	r4, r4, r5
 8001190:	000d      	movs	r5, r1
 8001192:	01e3      	lsls	r3, r4, #7
 8001194:	d504      	bpl.n	80011a0 <__aeabi_dmul+0x3cc>
 8001196:	4a43      	ldr	r2, [pc, #268]	; (80012a4 <__aeabi_dmul+0x4d0>)
 8001198:	4014      	ands	r4, r2
 800119a:	2280      	movs	r2, #128	; 0x80
 800119c:	00d2      	lsls	r2, r2, #3
 800119e:	4462      	add	r2, ip
 80011a0:	4941      	ldr	r1, [pc, #260]	; (80012a8 <__aeabi_dmul+0x4d4>)
 80011a2:	428a      	cmp	r2, r1
 80011a4:	dd00      	ble.n	80011a8 <__aeabi_dmul+0x3d4>
 80011a6:	e6e4      	b.n	8000f72 <__aeabi_dmul+0x19e>
 80011a8:	0761      	lsls	r1, r4, #29
 80011aa:	08ed      	lsrs	r5, r5, #3
 80011ac:	0264      	lsls	r4, r4, #9
 80011ae:	0552      	lsls	r2, r2, #21
 80011b0:	430d      	orrs	r5, r1
 80011b2:	0b26      	lsrs	r6, r4, #12
 80011b4:	0d52      	lsrs	r2, r2, #21
 80011b6:	e680      	b.n	8000eba <__aeabi_dmul+0xe6>
 80011b8:	2680      	movs	r6, #128	; 0x80
 80011ba:	0336      	lsls	r6, r6, #12
 80011bc:	4326      	orrs	r6, r4
 80011be:	0336      	lsls	r6, r6, #12
 80011c0:	0b36      	lsrs	r6, r6, #12
 80011c2:	9701      	str	r7, [sp, #4]
 80011c4:	4a39      	ldr	r2, [pc, #228]	; (80012ac <__aeabi_dmul+0x4d8>)
 80011c6:	e678      	b.n	8000eba <__aeabi_dmul+0xe6>
 80011c8:	f000 fc84 	bl	8001ad4 <__clzsi2>
 80011cc:	0003      	movs	r3, r0
 80011ce:	001a      	movs	r2, r3
 80011d0:	3215      	adds	r2, #21
 80011d2:	3020      	adds	r0, #32
 80011d4:	2a1c      	cmp	r2, #28
 80011d6:	dc00      	bgt.n	80011da <__aeabi_dmul+0x406>
 80011d8:	e6b8      	b.n	8000f4c <__aeabi_dmul+0x178>
 80011da:	4656      	mov	r6, sl
 80011dc:	3b08      	subs	r3, #8
 80011de:	2200      	movs	r2, #0
 80011e0:	409e      	lsls	r6, r3
 80011e2:	e6bd      	b.n	8000f60 <__aeabi_dmul+0x18c>
 80011e4:	0030      	movs	r0, r6
 80011e6:	f000 fc75 	bl	8001ad4 <__clzsi2>
 80011ea:	0003      	movs	r3, r0
 80011ec:	001a      	movs	r2, r3
 80011ee:	3215      	adds	r2, #21
 80011f0:	3020      	adds	r0, #32
 80011f2:	2a1c      	cmp	r2, #28
 80011f4:	dc00      	bgt.n	80011f8 <__aeabi_dmul+0x424>
 80011f6:	e683      	b.n	8000f00 <__aeabi_dmul+0x12c>
 80011f8:	0034      	movs	r4, r6
 80011fa:	3b08      	subs	r3, #8
 80011fc:	2500      	movs	r5, #0
 80011fe:	409c      	lsls	r4, r3
 8001200:	e688      	b.n	8000f14 <__aeabi_dmul+0x140>
 8001202:	2101      	movs	r1, #1
 8001204:	1a89      	subs	r1, r1, r2
 8001206:	2938      	cmp	r1, #56	; 0x38
 8001208:	dd00      	ble.n	800120c <__aeabi_dmul+0x438>
 800120a:	e653      	b.n	8000eb4 <__aeabi_dmul+0xe0>
 800120c:	291f      	cmp	r1, #31
 800120e:	dc20      	bgt.n	8001252 <__aeabi_dmul+0x47e>
 8001210:	4827      	ldr	r0, [pc, #156]	; (80012b0 <__aeabi_dmul+0x4dc>)
 8001212:	0022      	movs	r2, r4
 8001214:	4460      	add	r0, ip
 8001216:	002e      	movs	r6, r5
 8001218:	4085      	lsls	r5, r0
 800121a:	4082      	lsls	r2, r0
 800121c:	40ce      	lsrs	r6, r1
 800121e:	1e68      	subs	r0, r5, #1
 8001220:	4185      	sbcs	r5, r0
 8001222:	4332      	orrs	r2, r6
 8001224:	432a      	orrs	r2, r5
 8001226:	40cc      	lsrs	r4, r1
 8001228:	0753      	lsls	r3, r2, #29
 800122a:	d009      	beq.n	8001240 <__aeabi_dmul+0x46c>
 800122c:	210f      	movs	r1, #15
 800122e:	4011      	ands	r1, r2
 8001230:	2904      	cmp	r1, #4
 8001232:	d005      	beq.n	8001240 <__aeabi_dmul+0x46c>
 8001234:	1d11      	adds	r1, r2, #4
 8001236:	4291      	cmp	r1, r2
 8001238:	4192      	sbcs	r2, r2
 800123a:	4252      	negs	r2, r2
 800123c:	18a4      	adds	r4, r4, r2
 800123e:	000a      	movs	r2, r1
 8001240:	0223      	lsls	r3, r4, #8
 8001242:	d51f      	bpl.n	8001284 <__aeabi_dmul+0x4b0>
 8001244:	2201      	movs	r2, #1
 8001246:	2600      	movs	r6, #0
 8001248:	2500      	movs	r5, #0
 800124a:	e636      	b.n	8000eba <__aeabi_dmul+0xe6>
 800124c:	9b00      	ldr	r3, [sp, #0]
 800124e:	469c      	mov	ip, r3
 8001250:	e78f      	b.n	8001172 <__aeabi_dmul+0x39e>
 8001252:	201f      	movs	r0, #31
 8001254:	4240      	negs	r0, r0
 8001256:	1a82      	subs	r2, r0, r2
 8001258:	0020      	movs	r0, r4
 800125a:	40d0      	lsrs	r0, r2
 800125c:	2920      	cmp	r1, #32
 800125e:	d003      	beq.n	8001268 <__aeabi_dmul+0x494>
 8001260:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <__aeabi_dmul+0x4e0>)
 8001262:	4462      	add	r2, ip
 8001264:	4094      	lsls	r4, r2
 8001266:	4325      	orrs	r5, r4
 8001268:	1e6a      	subs	r2, r5, #1
 800126a:	4195      	sbcs	r5, r2
 800126c:	002a      	movs	r2, r5
 800126e:	2507      	movs	r5, #7
 8001270:	4302      	orrs	r2, r0
 8001272:	4015      	ands	r5, r2
 8001274:	2600      	movs	r6, #0
 8001276:	2d00      	cmp	r5, #0
 8001278:	d007      	beq.n	800128a <__aeabi_dmul+0x4b6>
 800127a:	210f      	movs	r1, #15
 800127c:	2400      	movs	r4, #0
 800127e:	4011      	ands	r1, r2
 8001280:	2904      	cmp	r1, #4
 8001282:	d1d7      	bne.n	8001234 <__aeabi_dmul+0x460>
 8001284:	0765      	lsls	r5, r4, #29
 8001286:	0264      	lsls	r4, r4, #9
 8001288:	0b26      	lsrs	r6, r4, #12
 800128a:	08d2      	lsrs	r2, r2, #3
 800128c:	4315      	orrs	r5, r2
 800128e:	2200      	movs	r2, #0
 8001290:	e613      	b.n	8000eba <__aeabi_dmul+0xe6>
 8001292:	2680      	movs	r6, #128	; 0x80
 8001294:	0336      	lsls	r6, r6, #12
 8001296:	4326      	orrs	r6, r4
 8001298:	0336      	lsls	r6, r6, #12
 800129a:	0b36      	lsrs	r6, r6, #12
 800129c:	4a03      	ldr	r2, [pc, #12]	; (80012ac <__aeabi_dmul+0x4d8>)
 800129e:	e60c      	b.n	8000eba <__aeabi_dmul+0xe6>
 80012a0:	000003ff 	.word	0x000003ff
 80012a4:	feffffff 	.word	0xfeffffff
 80012a8:	000007fe 	.word	0x000007fe
 80012ac:	000007ff 	.word	0x000007ff
 80012b0:	0000041e 	.word	0x0000041e
 80012b4:	0000043e 	.word	0x0000043e

080012b8 <__aeabi_dsub>:
 80012b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ba:	4657      	mov	r7, sl
 80012bc:	4645      	mov	r5, r8
 80012be:	464e      	mov	r6, r9
 80012c0:	46de      	mov	lr, fp
 80012c2:	b5e0      	push	{r5, r6, r7, lr}
 80012c4:	030f      	lsls	r7, r1, #12
 80012c6:	0a7f      	lsrs	r7, r7, #9
 80012c8:	0f45      	lsrs	r5, r0, #29
 80012ca:	433d      	orrs	r5, r7
 80012cc:	46ac      	mov	ip, r5
 80012ce:	005d      	lsls	r5, r3, #1
 80012d0:	004e      	lsls	r6, r1, #1
 80012d2:	0fcc      	lsrs	r4, r1, #31
 80012d4:	0d69      	lsrs	r1, r5, #21
 80012d6:	468a      	mov	sl, r1
 80012d8:	031f      	lsls	r7, r3, #12
 80012da:	49ce      	ldr	r1, [pc, #824]	; (8001614 <__aeabi_dsub+0x35c>)
 80012dc:	0f55      	lsrs	r5, r2, #29
 80012de:	b083      	sub	sp, #12
 80012e0:	00c0      	lsls	r0, r0, #3
 80012e2:	0a7f      	lsrs	r7, r7, #9
 80012e4:	00d2      	lsls	r2, r2, #3
 80012e6:	0d76      	lsrs	r6, r6, #21
 80012e8:	4680      	mov	r8, r0
 80012ea:	0fdb      	lsrs	r3, r3, #31
 80012ec:	432f      	orrs	r7, r5
 80012ee:	9201      	str	r2, [sp, #4]
 80012f0:	458a      	cmp	sl, r1
 80012f2:	d100      	bne.n	80012f6 <__aeabi_dsub+0x3e>
 80012f4:	e0c0      	b.n	8001478 <__aeabi_dsub+0x1c0>
 80012f6:	4655      	mov	r5, sl
 80012f8:	1b75      	subs	r5, r6, r5
 80012fa:	46a9      	mov	r9, r5
 80012fc:	2501      	movs	r5, #1
 80012fe:	46ab      	mov	fp, r5
 8001300:	465d      	mov	r5, fp
 8001302:	406b      	eors	r3, r5
 8001304:	469b      	mov	fp, r3
 8001306:	429c      	cmp	r4, r3
 8001308:	d100      	bne.n	800130c <__aeabi_dsub+0x54>
 800130a:	e090      	b.n	800142e <__aeabi_dsub+0x176>
 800130c:	464d      	mov	r5, r9
 800130e:	2d00      	cmp	r5, #0
 8001310:	dc00      	bgt.n	8001314 <__aeabi_dsub+0x5c>
 8001312:	e0bb      	b.n	800148c <__aeabi_dsub+0x1d4>
 8001314:	4653      	mov	r3, sl
 8001316:	2b00      	cmp	r3, #0
 8001318:	d100      	bne.n	800131c <__aeabi_dsub+0x64>
 800131a:	e0d4      	b.n	80014c6 <__aeabi_dsub+0x20e>
 800131c:	428e      	cmp	r6, r1
 800131e:	d100      	bne.n	8001322 <__aeabi_dsub+0x6a>
 8001320:	e29b      	b.n	800185a <__aeabi_dsub+0x5a2>
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	041b      	lsls	r3, r3, #16
 8001326:	431f      	orrs	r7, r3
 8001328:	464b      	mov	r3, r9
 800132a:	2b38      	cmp	r3, #56	; 0x38
 800132c:	dd00      	ble.n	8001330 <__aeabi_dsub+0x78>
 800132e:	e18c      	b.n	800164a <__aeabi_dsub+0x392>
 8001330:	2b1f      	cmp	r3, #31
 8001332:	dd00      	ble.n	8001336 <__aeabi_dsub+0x7e>
 8001334:	e234      	b.n	80017a0 <__aeabi_dsub+0x4e8>
 8001336:	4649      	mov	r1, r9
 8001338:	2320      	movs	r3, #32
 800133a:	003d      	movs	r5, r7
 800133c:	1a5b      	subs	r3, r3, r1
 800133e:	0011      	movs	r1, r2
 8001340:	409a      	lsls	r2, r3
 8001342:	409d      	lsls	r5, r3
 8001344:	1e53      	subs	r3, r2, #1
 8001346:	419a      	sbcs	r2, r3
 8001348:	464b      	mov	r3, r9
 800134a:	46a8      	mov	r8, r5
 800134c:	464d      	mov	r5, r9
 800134e:	40df      	lsrs	r7, r3
 8001350:	4663      	mov	r3, ip
 8001352:	40e9      	lsrs	r1, r5
 8001354:	4645      	mov	r5, r8
 8001356:	1bdb      	subs	r3, r3, r7
 8001358:	469c      	mov	ip, r3
 800135a:	430d      	orrs	r5, r1
 800135c:	4315      	orrs	r5, r2
 800135e:	1b45      	subs	r5, r0, r5
 8001360:	42a8      	cmp	r0, r5
 8001362:	4180      	sbcs	r0, r0
 8001364:	4663      	mov	r3, ip
 8001366:	4241      	negs	r1, r0
 8001368:	1a59      	subs	r1, r3, r1
 800136a:	020b      	lsls	r3, r1, #8
 800136c:	d400      	bmi.n	8001370 <__aeabi_dsub+0xb8>
 800136e:	e10d      	b.n	800158c <__aeabi_dsub+0x2d4>
 8001370:	0249      	lsls	r1, r1, #9
 8001372:	0a4b      	lsrs	r3, r1, #9
 8001374:	4698      	mov	r8, r3
 8001376:	4643      	mov	r3, r8
 8001378:	2b00      	cmp	r3, #0
 800137a:	d100      	bne.n	800137e <__aeabi_dsub+0xc6>
 800137c:	e158      	b.n	8001630 <__aeabi_dsub+0x378>
 800137e:	4640      	mov	r0, r8
 8001380:	f000 fba8 	bl	8001ad4 <__clzsi2>
 8001384:	0003      	movs	r3, r0
 8001386:	3b08      	subs	r3, #8
 8001388:	2220      	movs	r2, #32
 800138a:	0029      	movs	r1, r5
 800138c:	4647      	mov	r7, r8
 800138e:	1ad2      	subs	r2, r2, r3
 8001390:	409f      	lsls	r7, r3
 8001392:	40d1      	lsrs	r1, r2
 8001394:	409d      	lsls	r5, r3
 8001396:	430f      	orrs	r7, r1
 8001398:	429e      	cmp	r6, r3
 800139a:	dd00      	ble.n	800139e <__aeabi_dsub+0xe6>
 800139c:	e144      	b.n	8001628 <__aeabi_dsub+0x370>
 800139e:	1b9e      	subs	r6, r3, r6
 80013a0:	1c73      	adds	r3, r6, #1
 80013a2:	2b1f      	cmp	r3, #31
 80013a4:	dd00      	ble.n	80013a8 <__aeabi_dsub+0xf0>
 80013a6:	e1d0      	b.n	800174a <__aeabi_dsub+0x492>
 80013a8:	2220      	movs	r2, #32
 80013aa:	0028      	movs	r0, r5
 80013ac:	1ad2      	subs	r2, r2, r3
 80013ae:	0039      	movs	r1, r7
 80013b0:	4095      	lsls	r5, r2
 80013b2:	4091      	lsls	r1, r2
 80013b4:	40d8      	lsrs	r0, r3
 80013b6:	1e6a      	subs	r2, r5, #1
 80013b8:	4195      	sbcs	r5, r2
 80013ba:	4301      	orrs	r1, r0
 80013bc:	430d      	orrs	r5, r1
 80013be:	0039      	movs	r1, r7
 80013c0:	2600      	movs	r6, #0
 80013c2:	40d9      	lsrs	r1, r3
 80013c4:	076b      	lsls	r3, r5, #29
 80013c6:	d009      	beq.n	80013dc <__aeabi_dsub+0x124>
 80013c8:	230f      	movs	r3, #15
 80013ca:	402b      	ands	r3, r5
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	d005      	beq.n	80013dc <__aeabi_dsub+0x124>
 80013d0:	1d2b      	adds	r3, r5, #4
 80013d2:	42ab      	cmp	r3, r5
 80013d4:	41ad      	sbcs	r5, r5
 80013d6:	426d      	negs	r5, r5
 80013d8:	1949      	adds	r1, r1, r5
 80013da:	001d      	movs	r5, r3
 80013dc:	020b      	lsls	r3, r1, #8
 80013de:	d400      	bmi.n	80013e2 <__aeabi_dsub+0x12a>
 80013e0:	e0d7      	b.n	8001592 <__aeabi_dsub+0x2da>
 80013e2:	1c72      	adds	r2, r6, #1
 80013e4:	4b8b      	ldr	r3, [pc, #556]	; (8001614 <__aeabi_dsub+0x35c>)
 80013e6:	0556      	lsls	r6, r2, #21
 80013e8:	0d76      	lsrs	r6, r6, #21
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dsub+0x138>
 80013ee:	e0df      	b.n	80015b0 <__aeabi_dsub+0x2f8>
 80013f0:	4f89      	ldr	r7, [pc, #548]	; (8001618 <__aeabi_dsub+0x360>)
 80013f2:	08ed      	lsrs	r5, r5, #3
 80013f4:	400f      	ands	r7, r1
 80013f6:	0778      	lsls	r0, r7, #29
 80013f8:	4328      	orrs	r0, r5
 80013fa:	4682      	mov	sl, r0
 80013fc:	027a      	lsls	r2, r7, #9
 80013fe:	0b12      	lsrs	r2, r2, #12
 8001400:	2100      	movs	r1, #0
 8001402:	0312      	lsls	r2, r2, #12
 8001404:	0b13      	lsrs	r3, r2, #12
 8001406:	0d0a      	lsrs	r2, r1, #20
 8001408:	0512      	lsls	r2, r2, #20
 800140a:	431a      	orrs	r2, r3
 800140c:	4b83      	ldr	r3, [pc, #524]	; (800161c <__aeabi_dsub+0x364>)
 800140e:	0536      	lsls	r6, r6, #20
 8001410:	4013      	ands	r3, r2
 8001412:	4333      	orrs	r3, r6
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	07e4      	lsls	r4, r4, #31
 8001418:	085b      	lsrs	r3, r3, #1
 800141a:	4323      	orrs	r3, r4
 800141c:	4650      	mov	r0, sl
 800141e:	0019      	movs	r1, r3
 8001420:	b003      	add	sp, #12
 8001422:	bc3c      	pop	{r2, r3, r4, r5}
 8001424:	4690      	mov	r8, r2
 8001426:	4699      	mov	r9, r3
 8001428:	46a2      	mov	sl, r4
 800142a:	46ab      	mov	fp, r5
 800142c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800142e:	464d      	mov	r5, r9
 8001430:	2d00      	cmp	r5, #0
 8001432:	dd5b      	ble.n	80014ec <__aeabi_dsub+0x234>
 8001434:	4653      	mov	r3, sl
 8001436:	2b00      	cmp	r3, #0
 8001438:	d100      	bne.n	800143c <__aeabi_dsub+0x184>
 800143a:	e08a      	b.n	8001552 <__aeabi_dsub+0x29a>
 800143c:	428e      	cmp	r6, r1
 800143e:	d100      	bne.n	8001442 <__aeabi_dsub+0x18a>
 8001440:	e127      	b.n	8001692 <__aeabi_dsub+0x3da>
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	041b      	lsls	r3, r3, #16
 8001446:	431f      	orrs	r7, r3
 8001448:	464b      	mov	r3, r9
 800144a:	2b38      	cmp	r3, #56	; 0x38
 800144c:	dd00      	ble.n	8001450 <__aeabi_dsub+0x198>
 800144e:	e18c      	b.n	800176a <__aeabi_dsub+0x4b2>
 8001450:	2b1f      	cmp	r3, #31
 8001452:	dc00      	bgt.n	8001456 <__aeabi_dsub+0x19e>
 8001454:	e1c3      	b.n	80017de <__aeabi_dsub+0x526>
 8001456:	0039      	movs	r1, r7
 8001458:	3b20      	subs	r3, #32
 800145a:	40d9      	lsrs	r1, r3
 800145c:	464b      	mov	r3, r9
 800145e:	2b20      	cmp	r3, #32
 8001460:	d005      	beq.n	800146e <__aeabi_dsub+0x1b6>
 8001462:	2340      	movs	r3, #64	; 0x40
 8001464:	464d      	mov	r5, r9
 8001466:	1b5b      	subs	r3, r3, r5
 8001468:	409f      	lsls	r7, r3
 800146a:	433a      	orrs	r2, r7
 800146c:	9201      	str	r2, [sp, #4]
 800146e:	9d01      	ldr	r5, [sp, #4]
 8001470:	1e6f      	subs	r7, r5, #1
 8001472:	41bd      	sbcs	r5, r7
 8001474:	430d      	orrs	r5, r1
 8001476:	e17c      	b.n	8001772 <__aeabi_dsub+0x4ba>
 8001478:	4969      	ldr	r1, [pc, #420]	; (8001620 <__aeabi_dsub+0x368>)
 800147a:	003d      	movs	r5, r7
 800147c:	4689      	mov	r9, r1
 800147e:	4315      	orrs	r5, r2
 8001480:	44b1      	add	r9, r6
 8001482:	2d00      	cmp	r5, #0
 8001484:	d02d      	beq.n	80014e2 <__aeabi_dsub+0x22a>
 8001486:	469b      	mov	fp, r3
 8001488:	429c      	cmp	r4, r3
 800148a:	d02f      	beq.n	80014ec <__aeabi_dsub+0x234>
 800148c:	4649      	mov	r1, r9
 800148e:	2900      	cmp	r1, #0
 8001490:	d149      	bne.n	8001526 <__aeabi_dsub+0x26e>
 8001492:	4d64      	ldr	r5, [pc, #400]	; (8001624 <__aeabi_dsub+0x36c>)
 8001494:	1c71      	adds	r1, r6, #1
 8001496:	4229      	tst	r1, r5
 8001498:	d000      	beq.n	800149c <__aeabi_dsub+0x1e4>
 800149a:	e0db      	b.n	8001654 <__aeabi_dsub+0x39c>
 800149c:	003d      	movs	r5, r7
 800149e:	4661      	mov	r1, ip
 80014a0:	4315      	orrs	r5, r2
 80014a2:	4301      	orrs	r1, r0
 80014a4:	46aa      	mov	sl, r5
 80014a6:	2e00      	cmp	r6, #0
 80014a8:	d000      	beq.n	80014ac <__aeabi_dsub+0x1f4>
 80014aa:	e1ea      	b.n	8001882 <__aeabi_dsub+0x5ca>
 80014ac:	2900      	cmp	r1, #0
 80014ae:	d100      	bne.n	80014b2 <__aeabi_dsub+0x1fa>
 80014b0:	e1ba      	b.n	8001828 <__aeabi_dsub+0x570>
 80014b2:	2d00      	cmp	r5, #0
 80014b4:	d000      	beq.n	80014b8 <__aeabi_dsub+0x200>
 80014b6:	e1fa      	b.n	80018ae <__aeabi_dsub+0x5f6>
 80014b8:	4663      	mov	r3, ip
 80014ba:	08c0      	lsrs	r0, r0, #3
 80014bc:	075a      	lsls	r2, r3, #29
 80014be:	4302      	orrs	r2, r0
 80014c0:	4692      	mov	sl, r2
 80014c2:	08d9      	lsrs	r1, r3, #3
 80014c4:	e06e      	b.n	80015a4 <__aeabi_dsub+0x2ec>
 80014c6:	003b      	movs	r3, r7
 80014c8:	4313      	orrs	r3, r2
 80014ca:	d100      	bne.n	80014ce <__aeabi_dsub+0x216>
 80014cc:	e0d9      	b.n	8001682 <__aeabi_dsub+0x3ca>
 80014ce:	464b      	mov	r3, r9
 80014d0:	3b01      	subs	r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d100      	bne.n	80014d8 <__aeabi_dsub+0x220>
 80014d6:	e1b7      	b.n	8001848 <__aeabi_dsub+0x590>
 80014d8:	4589      	cmp	r9, r1
 80014da:	d100      	bne.n	80014de <__aeabi_dsub+0x226>
 80014dc:	e0d9      	b.n	8001692 <__aeabi_dsub+0x3da>
 80014de:	4699      	mov	r9, r3
 80014e0:	e722      	b.n	8001328 <__aeabi_dsub+0x70>
 80014e2:	2501      	movs	r5, #1
 80014e4:	406b      	eors	r3, r5
 80014e6:	469b      	mov	fp, r3
 80014e8:	429c      	cmp	r4, r3
 80014ea:	d1cf      	bne.n	800148c <__aeabi_dsub+0x1d4>
 80014ec:	4649      	mov	r1, r9
 80014ee:	2900      	cmp	r1, #0
 80014f0:	d000      	beq.n	80014f4 <__aeabi_dsub+0x23c>
 80014f2:	e0d6      	b.n	80016a2 <__aeabi_dsub+0x3ea>
 80014f4:	1c71      	adds	r1, r6, #1
 80014f6:	468a      	mov	sl, r1
 80014f8:	4655      	mov	r5, sl
 80014fa:	494a      	ldr	r1, [pc, #296]	; (8001624 <__aeabi_dsub+0x36c>)
 80014fc:	420d      	tst	r5, r1
 80014fe:	d136      	bne.n	800156e <__aeabi_dsub+0x2b6>
 8001500:	4661      	mov	r1, ip
 8001502:	4301      	orrs	r1, r0
 8001504:	2e00      	cmp	r6, #0
 8001506:	d158      	bne.n	80015ba <__aeabi_dsub+0x302>
 8001508:	2900      	cmp	r1, #0
 800150a:	d100      	bne.n	800150e <__aeabi_dsub+0x256>
 800150c:	e211      	b.n	8001932 <__aeabi_dsub+0x67a>
 800150e:	003b      	movs	r3, r7
 8001510:	4313      	orrs	r3, r2
 8001512:	d000      	beq.n	8001516 <__aeabi_dsub+0x25e>
 8001514:	e213      	b.n	800193e <__aeabi_dsub+0x686>
 8001516:	4663      	mov	r3, ip
 8001518:	08c0      	lsrs	r0, r0, #3
 800151a:	075b      	lsls	r3, r3, #29
 800151c:	4318      	orrs	r0, r3
 800151e:	4663      	mov	r3, ip
 8001520:	4682      	mov	sl, r0
 8001522:	08d9      	lsrs	r1, r3, #3
 8001524:	e03e      	b.n	80015a4 <__aeabi_dsub+0x2ec>
 8001526:	4651      	mov	r1, sl
 8001528:	1b89      	subs	r1, r1, r6
 800152a:	4689      	mov	r9, r1
 800152c:	465c      	mov	r4, fp
 800152e:	2e00      	cmp	r6, #0
 8001530:	d000      	beq.n	8001534 <__aeabi_dsub+0x27c>
 8001532:	e0e3      	b.n	80016fc <__aeabi_dsub+0x444>
 8001534:	4663      	mov	r3, ip
 8001536:	4303      	orrs	r3, r0
 8001538:	d100      	bne.n	800153c <__aeabi_dsub+0x284>
 800153a:	e16f      	b.n	800181c <__aeabi_dsub+0x564>
 800153c:	000b      	movs	r3, r1
 800153e:	3b01      	subs	r3, #1
 8001540:	2b00      	cmp	r3, #0
 8001542:	d100      	bne.n	8001546 <__aeabi_dsub+0x28e>
 8001544:	e1ec      	b.n	8001920 <__aeabi_dsub+0x668>
 8001546:	4d33      	ldr	r5, [pc, #204]	; (8001614 <__aeabi_dsub+0x35c>)
 8001548:	42a9      	cmp	r1, r5
 800154a:	d100      	bne.n	800154e <__aeabi_dsub+0x296>
 800154c:	e1e2      	b.n	8001914 <__aeabi_dsub+0x65c>
 800154e:	4699      	mov	r9, r3
 8001550:	e0dd      	b.n	800170e <__aeabi_dsub+0x456>
 8001552:	003b      	movs	r3, r7
 8001554:	4313      	orrs	r3, r2
 8001556:	d100      	bne.n	800155a <__aeabi_dsub+0x2a2>
 8001558:	e186      	b.n	8001868 <__aeabi_dsub+0x5b0>
 800155a:	464b      	mov	r3, r9
 800155c:	3b01      	subs	r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	d100      	bne.n	8001564 <__aeabi_dsub+0x2ac>
 8001562:	e14f      	b.n	8001804 <__aeabi_dsub+0x54c>
 8001564:	4589      	cmp	r9, r1
 8001566:	d100      	bne.n	800156a <__aeabi_dsub+0x2b2>
 8001568:	e093      	b.n	8001692 <__aeabi_dsub+0x3da>
 800156a:	4699      	mov	r9, r3
 800156c:	e76c      	b.n	8001448 <__aeabi_dsub+0x190>
 800156e:	4b29      	ldr	r3, [pc, #164]	; (8001614 <__aeabi_dsub+0x35c>)
 8001570:	459a      	cmp	sl, r3
 8001572:	d100      	bne.n	8001576 <__aeabi_dsub+0x2be>
 8001574:	e1f0      	b.n	8001958 <__aeabi_dsub+0x6a0>
 8001576:	1882      	adds	r2, r0, r2
 8001578:	4282      	cmp	r2, r0
 800157a:	4189      	sbcs	r1, r1
 800157c:	4656      	mov	r6, sl
 800157e:	4467      	add	r7, ip
 8001580:	4249      	negs	r1, r1
 8001582:	1879      	adds	r1, r7, r1
 8001584:	07cd      	lsls	r5, r1, #31
 8001586:	0852      	lsrs	r2, r2, #1
 8001588:	4315      	orrs	r5, r2
 800158a:	0849      	lsrs	r1, r1, #1
 800158c:	076b      	lsls	r3, r5, #29
 800158e:	d000      	beq.n	8001592 <__aeabi_dsub+0x2da>
 8001590:	e71a      	b.n	80013c8 <__aeabi_dsub+0x110>
 8001592:	074b      	lsls	r3, r1, #29
 8001594:	08ed      	lsrs	r5, r5, #3
 8001596:	431d      	orrs	r5, r3
 8001598:	46aa      	mov	sl, r5
 800159a:	46b1      	mov	r9, r6
 800159c:	08c9      	lsrs	r1, r1, #3
 800159e:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <__aeabi_dsub+0x35c>)
 80015a0:	4599      	cmp	r9, r3
 80015a2:	d02c      	beq.n	80015fe <__aeabi_dsub+0x346>
 80015a4:	464b      	mov	r3, r9
 80015a6:	030a      	lsls	r2, r1, #12
 80015a8:	055e      	lsls	r6, r3, #21
 80015aa:	0b12      	lsrs	r2, r2, #12
 80015ac:	0d76      	lsrs	r6, r6, #21
 80015ae:	e727      	b.n	8001400 <__aeabi_dsub+0x148>
 80015b0:	0016      	movs	r6, r2
 80015b2:	2300      	movs	r3, #0
 80015b4:	2200      	movs	r2, #0
 80015b6:	469a      	mov	sl, r3
 80015b8:	e722      	b.n	8001400 <__aeabi_dsub+0x148>
 80015ba:	2900      	cmp	r1, #0
 80015bc:	d100      	bne.n	80015c0 <__aeabi_dsub+0x308>
 80015be:	e13d      	b.n	800183c <__aeabi_dsub+0x584>
 80015c0:	4663      	mov	r3, ip
 80015c2:	003e      	movs	r6, r7
 80015c4:	075d      	lsls	r5, r3, #29
 80015c6:	08c0      	lsrs	r0, r0, #3
 80015c8:	08d9      	lsrs	r1, r3, #3
 80015ca:	4316      	orrs	r6, r2
 80015cc:	4328      	orrs	r0, r5
 80015ce:	2e00      	cmp	r6, #0
 80015d0:	d100      	bne.n	80015d4 <__aeabi_dsub+0x31c>
 80015d2:	e19d      	b.n	8001910 <__aeabi_dsub+0x658>
 80015d4:	2580      	movs	r5, #128	; 0x80
 80015d6:	032d      	lsls	r5, r5, #12
 80015d8:	4229      	tst	r1, r5
 80015da:	d007      	beq.n	80015ec <__aeabi_dsub+0x334>
 80015dc:	08fe      	lsrs	r6, r7, #3
 80015de:	422e      	tst	r6, r5
 80015e0:	d104      	bne.n	80015ec <__aeabi_dsub+0x334>
 80015e2:	465c      	mov	r4, fp
 80015e4:	0031      	movs	r1, r6
 80015e6:	08d2      	lsrs	r2, r2, #3
 80015e8:	0778      	lsls	r0, r7, #29
 80015ea:	4310      	orrs	r0, r2
 80015ec:	00ca      	lsls	r2, r1, #3
 80015ee:	0f41      	lsrs	r1, r0, #29
 80015f0:	4311      	orrs	r1, r2
 80015f2:	00c0      	lsls	r0, r0, #3
 80015f4:	074a      	lsls	r2, r1, #29
 80015f6:	08c0      	lsrs	r0, r0, #3
 80015f8:	4310      	orrs	r0, r2
 80015fa:	4682      	mov	sl, r0
 80015fc:	08c9      	lsrs	r1, r1, #3
 80015fe:	4653      	mov	r3, sl
 8001600:	430b      	orrs	r3, r1
 8001602:	d100      	bne.n	8001606 <__aeabi_dsub+0x34e>
 8001604:	e1ed      	b.n	80019e2 <__aeabi_dsub+0x72a>
 8001606:	2280      	movs	r2, #128	; 0x80
 8001608:	0312      	lsls	r2, r2, #12
 800160a:	430a      	orrs	r2, r1
 800160c:	0312      	lsls	r2, r2, #12
 800160e:	0b12      	lsrs	r2, r2, #12
 8001610:	4e00      	ldr	r6, [pc, #0]	; (8001614 <__aeabi_dsub+0x35c>)
 8001612:	e6f5      	b.n	8001400 <__aeabi_dsub+0x148>
 8001614:	000007ff 	.word	0x000007ff
 8001618:	ff7fffff 	.word	0xff7fffff
 800161c:	800fffff 	.word	0x800fffff
 8001620:	fffff801 	.word	0xfffff801
 8001624:	000007fe 	.word	0x000007fe
 8001628:	49d1      	ldr	r1, [pc, #836]	; (8001970 <__aeabi_dsub+0x6b8>)
 800162a:	1af6      	subs	r6, r6, r3
 800162c:	4039      	ands	r1, r7
 800162e:	e6c9      	b.n	80013c4 <__aeabi_dsub+0x10c>
 8001630:	0028      	movs	r0, r5
 8001632:	f000 fa4f 	bl	8001ad4 <__clzsi2>
 8001636:	0003      	movs	r3, r0
 8001638:	3318      	adds	r3, #24
 800163a:	2b1f      	cmp	r3, #31
 800163c:	dc00      	bgt.n	8001640 <__aeabi_dsub+0x388>
 800163e:	e6a3      	b.n	8001388 <__aeabi_dsub+0xd0>
 8001640:	3808      	subs	r0, #8
 8001642:	4085      	lsls	r5, r0
 8001644:	002f      	movs	r7, r5
 8001646:	2500      	movs	r5, #0
 8001648:	e6a6      	b.n	8001398 <__aeabi_dsub+0xe0>
 800164a:	433a      	orrs	r2, r7
 800164c:	0015      	movs	r5, r2
 800164e:	1e6a      	subs	r2, r5, #1
 8001650:	4195      	sbcs	r5, r2
 8001652:	e684      	b.n	800135e <__aeabi_dsub+0xa6>
 8001654:	4661      	mov	r1, ip
 8001656:	1a85      	subs	r5, r0, r2
 8001658:	1bcb      	subs	r3, r1, r7
 800165a:	42a8      	cmp	r0, r5
 800165c:	4189      	sbcs	r1, r1
 800165e:	4249      	negs	r1, r1
 8001660:	4688      	mov	r8, r1
 8001662:	0019      	movs	r1, r3
 8001664:	4643      	mov	r3, r8
 8001666:	1ac9      	subs	r1, r1, r3
 8001668:	000b      	movs	r3, r1
 800166a:	4688      	mov	r8, r1
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	d500      	bpl.n	8001672 <__aeabi_dsub+0x3ba>
 8001670:	e113      	b.n	800189a <__aeabi_dsub+0x5e2>
 8001672:	000b      	movs	r3, r1
 8001674:	432b      	orrs	r3, r5
 8001676:	469a      	mov	sl, r3
 8001678:	d000      	beq.n	800167c <__aeabi_dsub+0x3c4>
 800167a:	e67c      	b.n	8001376 <__aeabi_dsub+0xbe>
 800167c:	2100      	movs	r1, #0
 800167e:	2400      	movs	r4, #0
 8001680:	e790      	b.n	80015a4 <__aeabi_dsub+0x2ec>
 8001682:	4663      	mov	r3, ip
 8001684:	08c0      	lsrs	r0, r0, #3
 8001686:	075b      	lsls	r3, r3, #29
 8001688:	4318      	orrs	r0, r3
 800168a:	4663      	mov	r3, ip
 800168c:	4682      	mov	sl, r0
 800168e:	08d9      	lsrs	r1, r3, #3
 8001690:	e785      	b.n	800159e <__aeabi_dsub+0x2e6>
 8001692:	4663      	mov	r3, ip
 8001694:	08c0      	lsrs	r0, r0, #3
 8001696:	075b      	lsls	r3, r3, #29
 8001698:	4318      	orrs	r0, r3
 800169a:	4663      	mov	r3, ip
 800169c:	4682      	mov	sl, r0
 800169e:	08d9      	lsrs	r1, r3, #3
 80016a0:	e7ad      	b.n	80015fe <__aeabi_dsub+0x346>
 80016a2:	4653      	mov	r3, sl
 80016a4:	1b9b      	subs	r3, r3, r6
 80016a6:	4699      	mov	r9, r3
 80016a8:	2e00      	cmp	r6, #0
 80016aa:	d100      	bne.n	80016ae <__aeabi_dsub+0x3f6>
 80016ac:	e089      	b.n	80017c2 <__aeabi_dsub+0x50a>
 80016ae:	4bb1      	ldr	r3, [pc, #708]	; (8001974 <__aeabi_dsub+0x6bc>)
 80016b0:	459a      	cmp	sl, r3
 80016b2:	d100      	bne.n	80016b6 <__aeabi_dsub+0x3fe>
 80016b4:	e0c2      	b.n	800183c <__aeabi_dsub+0x584>
 80016b6:	2380      	movs	r3, #128	; 0x80
 80016b8:	4661      	mov	r1, ip
 80016ba:	041b      	lsls	r3, r3, #16
 80016bc:	4319      	orrs	r1, r3
 80016be:	468c      	mov	ip, r1
 80016c0:	464b      	mov	r3, r9
 80016c2:	2b38      	cmp	r3, #56	; 0x38
 80016c4:	dd00      	ble.n	80016c8 <__aeabi_dsub+0x410>
 80016c6:	e104      	b.n	80018d2 <__aeabi_dsub+0x61a>
 80016c8:	2b1f      	cmp	r3, #31
 80016ca:	dd00      	ble.n	80016ce <__aeabi_dsub+0x416>
 80016cc:	e154      	b.n	8001978 <__aeabi_dsub+0x6c0>
 80016ce:	4649      	mov	r1, r9
 80016d0:	2320      	movs	r3, #32
 80016d2:	464e      	mov	r6, r9
 80016d4:	1a5b      	subs	r3, r3, r1
 80016d6:	4665      	mov	r5, ip
 80016d8:	0001      	movs	r1, r0
 80016da:	4098      	lsls	r0, r3
 80016dc:	409d      	lsls	r5, r3
 80016de:	40f1      	lsrs	r1, r6
 80016e0:	1e43      	subs	r3, r0, #1
 80016e2:	4198      	sbcs	r0, r3
 80016e4:	430d      	orrs	r5, r1
 80016e6:	4305      	orrs	r5, r0
 80016e8:	4660      	mov	r0, ip
 80016ea:	40f0      	lsrs	r0, r6
 80016ec:	183f      	adds	r7, r7, r0
 80016ee:	18ad      	adds	r5, r5, r2
 80016f0:	4295      	cmp	r5, r2
 80016f2:	4189      	sbcs	r1, r1
 80016f4:	4249      	negs	r1, r1
 80016f6:	19c9      	adds	r1, r1, r7
 80016f8:	4656      	mov	r6, sl
 80016fa:	e03f      	b.n	800177c <__aeabi_dsub+0x4c4>
 80016fc:	4b9d      	ldr	r3, [pc, #628]	; (8001974 <__aeabi_dsub+0x6bc>)
 80016fe:	459a      	cmp	sl, r3
 8001700:	d100      	bne.n	8001704 <__aeabi_dsub+0x44c>
 8001702:	e09b      	b.n	800183c <__aeabi_dsub+0x584>
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	4661      	mov	r1, ip
 8001708:	041b      	lsls	r3, r3, #16
 800170a:	4319      	orrs	r1, r3
 800170c:	468c      	mov	ip, r1
 800170e:	464b      	mov	r3, r9
 8001710:	2b38      	cmp	r3, #56	; 0x38
 8001712:	dd00      	ble.n	8001716 <__aeabi_dsub+0x45e>
 8001714:	e0af      	b.n	8001876 <__aeabi_dsub+0x5be>
 8001716:	2b1f      	cmp	r3, #31
 8001718:	dd00      	ble.n	800171c <__aeabi_dsub+0x464>
 800171a:	e0e0      	b.n	80018de <__aeabi_dsub+0x626>
 800171c:	4649      	mov	r1, r9
 800171e:	2320      	movs	r3, #32
 8001720:	464e      	mov	r6, r9
 8001722:	1a5b      	subs	r3, r3, r1
 8001724:	4665      	mov	r5, ip
 8001726:	0001      	movs	r1, r0
 8001728:	4098      	lsls	r0, r3
 800172a:	409d      	lsls	r5, r3
 800172c:	40f1      	lsrs	r1, r6
 800172e:	1e43      	subs	r3, r0, #1
 8001730:	4198      	sbcs	r0, r3
 8001732:	430d      	orrs	r5, r1
 8001734:	4305      	orrs	r5, r0
 8001736:	4660      	mov	r0, ip
 8001738:	40f0      	lsrs	r0, r6
 800173a:	1a3f      	subs	r7, r7, r0
 800173c:	1b55      	subs	r5, r2, r5
 800173e:	42aa      	cmp	r2, r5
 8001740:	4189      	sbcs	r1, r1
 8001742:	4249      	negs	r1, r1
 8001744:	1a79      	subs	r1, r7, r1
 8001746:	4656      	mov	r6, sl
 8001748:	e60f      	b.n	800136a <__aeabi_dsub+0xb2>
 800174a:	003a      	movs	r2, r7
 800174c:	3e1f      	subs	r6, #31
 800174e:	40f2      	lsrs	r2, r6
 8001750:	0016      	movs	r6, r2
 8001752:	2b20      	cmp	r3, #32
 8001754:	d003      	beq.n	800175e <__aeabi_dsub+0x4a6>
 8001756:	2240      	movs	r2, #64	; 0x40
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	409f      	lsls	r7, r3
 800175c:	433d      	orrs	r5, r7
 800175e:	1e6b      	subs	r3, r5, #1
 8001760:	419d      	sbcs	r5, r3
 8001762:	2100      	movs	r1, #0
 8001764:	4335      	orrs	r5, r6
 8001766:	2600      	movs	r6, #0
 8001768:	e710      	b.n	800158c <__aeabi_dsub+0x2d4>
 800176a:	433a      	orrs	r2, r7
 800176c:	0015      	movs	r5, r2
 800176e:	1e6a      	subs	r2, r5, #1
 8001770:	4195      	sbcs	r5, r2
 8001772:	182d      	adds	r5, r5, r0
 8001774:	4285      	cmp	r5, r0
 8001776:	4180      	sbcs	r0, r0
 8001778:	4241      	negs	r1, r0
 800177a:	4461      	add	r1, ip
 800177c:	020b      	lsls	r3, r1, #8
 800177e:	d400      	bmi.n	8001782 <__aeabi_dsub+0x4ca>
 8001780:	e704      	b.n	800158c <__aeabi_dsub+0x2d4>
 8001782:	4b7c      	ldr	r3, [pc, #496]	; (8001974 <__aeabi_dsub+0x6bc>)
 8001784:	3601      	adds	r6, #1
 8001786:	429e      	cmp	r6, r3
 8001788:	d100      	bne.n	800178c <__aeabi_dsub+0x4d4>
 800178a:	e712      	b.n	80015b2 <__aeabi_dsub+0x2fa>
 800178c:	2201      	movs	r2, #1
 800178e:	4f78      	ldr	r7, [pc, #480]	; (8001970 <__aeabi_dsub+0x6b8>)
 8001790:	086b      	lsrs	r3, r5, #1
 8001792:	4039      	ands	r1, r7
 8001794:	4015      	ands	r5, r2
 8001796:	431d      	orrs	r5, r3
 8001798:	07cb      	lsls	r3, r1, #31
 800179a:	431d      	orrs	r5, r3
 800179c:	0849      	lsrs	r1, r1, #1
 800179e:	e611      	b.n	80013c4 <__aeabi_dsub+0x10c>
 80017a0:	0039      	movs	r1, r7
 80017a2:	3b20      	subs	r3, #32
 80017a4:	40d9      	lsrs	r1, r3
 80017a6:	464b      	mov	r3, r9
 80017a8:	2b20      	cmp	r3, #32
 80017aa:	d005      	beq.n	80017b8 <__aeabi_dsub+0x500>
 80017ac:	2340      	movs	r3, #64	; 0x40
 80017ae:	464d      	mov	r5, r9
 80017b0:	1b5b      	subs	r3, r3, r5
 80017b2:	409f      	lsls	r7, r3
 80017b4:	433a      	orrs	r2, r7
 80017b6:	9201      	str	r2, [sp, #4]
 80017b8:	9d01      	ldr	r5, [sp, #4]
 80017ba:	1e6f      	subs	r7, r5, #1
 80017bc:	41bd      	sbcs	r5, r7
 80017be:	430d      	orrs	r5, r1
 80017c0:	e5cd      	b.n	800135e <__aeabi_dsub+0xa6>
 80017c2:	4663      	mov	r3, ip
 80017c4:	4303      	orrs	r3, r0
 80017c6:	d029      	beq.n	800181c <__aeabi_dsub+0x564>
 80017c8:	464b      	mov	r3, r9
 80017ca:	3b01      	subs	r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d100      	bne.n	80017d2 <__aeabi_dsub+0x51a>
 80017d0:	e100      	b.n	80019d4 <__aeabi_dsub+0x71c>
 80017d2:	4d68      	ldr	r5, [pc, #416]	; (8001974 <__aeabi_dsub+0x6bc>)
 80017d4:	45a9      	cmp	r9, r5
 80017d6:	d100      	bne.n	80017da <__aeabi_dsub+0x522>
 80017d8:	e09c      	b.n	8001914 <__aeabi_dsub+0x65c>
 80017da:	4699      	mov	r9, r3
 80017dc:	e770      	b.n	80016c0 <__aeabi_dsub+0x408>
 80017de:	4649      	mov	r1, r9
 80017e0:	2320      	movs	r3, #32
 80017e2:	003d      	movs	r5, r7
 80017e4:	1a5b      	subs	r3, r3, r1
 80017e6:	409d      	lsls	r5, r3
 80017e8:	0011      	movs	r1, r2
 80017ea:	409a      	lsls	r2, r3
 80017ec:	46a8      	mov	r8, r5
 80017ee:	464d      	mov	r5, r9
 80017f0:	1e53      	subs	r3, r2, #1
 80017f2:	419a      	sbcs	r2, r3
 80017f4:	464b      	mov	r3, r9
 80017f6:	40e9      	lsrs	r1, r5
 80017f8:	4645      	mov	r5, r8
 80017fa:	40df      	lsrs	r7, r3
 80017fc:	430d      	orrs	r5, r1
 80017fe:	4315      	orrs	r5, r2
 8001800:	44bc      	add	ip, r7
 8001802:	e7b6      	b.n	8001772 <__aeabi_dsub+0x4ba>
 8001804:	1885      	adds	r5, r0, r2
 8001806:	4285      	cmp	r5, r0
 8001808:	4189      	sbcs	r1, r1
 800180a:	4467      	add	r7, ip
 800180c:	4249      	negs	r1, r1
 800180e:	1879      	adds	r1, r7, r1
 8001810:	2601      	movs	r6, #1
 8001812:	020b      	lsls	r3, r1, #8
 8001814:	d400      	bmi.n	8001818 <__aeabi_dsub+0x560>
 8001816:	e6b9      	b.n	800158c <__aeabi_dsub+0x2d4>
 8001818:	2602      	movs	r6, #2
 800181a:	e7b7      	b.n	800178c <__aeabi_dsub+0x4d4>
 800181c:	08d2      	lsrs	r2, r2, #3
 800181e:	077b      	lsls	r3, r7, #29
 8001820:	431a      	orrs	r2, r3
 8001822:	4692      	mov	sl, r2
 8001824:	08f9      	lsrs	r1, r7, #3
 8001826:	e6ba      	b.n	800159e <__aeabi_dsub+0x2e6>
 8001828:	2d00      	cmp	r5, #0
 800182a:	d100      	bne.n	800182e <__aeabi_dsub+0x576>
 800182c:	e726      	b.n	800167c <__aeabi_dsub+0x3c4>
 800182e:	0778      	lsls	r0, r7, #29
 8001830:	08d2      	lsrs	r2, r2, #3
 8001832:	4310      	orrs	r0, r2
 8001834:	4682      	mov	sl, r0
 8001836:	08f9      	lsrs	r1, r7, #3
 8001838:	465c      	mov	r4, fp
 800183a:	e6b3      	b.n	80015a4 <__aeabi_dsub+0x2ec>
 800183c:	0778      	lsls	r0, r7, #29
 800183e:	08d2      	lsrs	r2, r2, #3
 8001840:	4310      	orrs	r0, r2
 8001842:	4682      	mov	sl, r0
 8001844:	08f9      	lsrs	r1, r7, #3
 8001846:	e6da      	b.n	80015fe <__aeabi_dsub+0x346>
 8001848:	1a85      	subs	r5, r0, r2
 800184a:	4663      	mov	r3, ip
 800184c:	42a8      	cmp	r0, r5
 800184e:	4180      	sbcs	r0, r0
 8001850:	1bdf      	subs	r7, r3, r7
 8001852:	4240      	negs	r0, r0
 8001854:	1a39      	subs	r1, r7, r0
 8001856:	2601      	movs	r6, #1
 8001858:	e587      	b.n	800136a <__aeabi_dsub+0xb2>
 800185a:	4663      	mov	r3, ip
 800185c:	08c0      	lsrs	r0, r0, #3
 800185e:	075a      	lsls	r2, r3, #29
 8001860:	4302      	orrs	r2, r0
 8001862:	4692      	mov	sl, r2
 8001864:	08d9      	lsrs	r1, r3, #3
 8001866:	e6ca      	b.n	80015fe <__aeabi_dsub+0x346>
 8001868:	4663      	mov	r3, ip
 800186a:	08c0      	lsrs	r0, r0, #3
 800186c:	075a      	lsls	r2, r3, #29
 800186e:	4302      	orrs	r2, r0
 8001870:	4692      	mov	sl, r2
 8001872:	08d9      	lsrs	r1, r3, #3
 8001874:	e693      	b.n	800159e <__aeabi_dsub+0x2e6>
 8001876:	4663      	mov	r3, ip
 8001878:	4303      	orrs	r3, r0
 800187a:	001d      	movs	r5, r3
 800187c:	1e68      	subs	r0, r5, #1
 800187e:	4185      	sbcs	r5, r0
 8001880:	e75c      	b.n	800173c <__aeabi_dsub+0x484>
 8001882:	2900      	cmp	r1, #0
 8001884:	d13d      	bne.n	8001902 <__aeabi_dsub+0x64a>
 8001886:	2d00      	cmp	r5, #0
 8001888:	d100      	bne.n	800188c <__aeabi_dsub+0x5d4>
 800188a:	e09f      	b.n	80019cc <__aeabi_dsub+0x714>
 800188c:	0779      	lsls	r1, r7, #29
 800188e:	08d2      	lsrs	r2, r2, #3
 8001890:	430a      	orrs	r2, r1
 8001892:	4692      	mov	sl, r2
 8001894:	08f9      	lsrs	r1, r7, #3
 8001896:	465c      	mov	r4, fp
 8001898:	e6b1      	b.n	80015fe <__aeabi_dsub+0x346>
 800189a:	1a15      	subs	r5, r2, r0
 800189c:	4663      	mov	r3, ip
 800189e:	42aa      	cmp	r2, r5
 80018a0:	4192      	sbcs	r2, r2
 80018a2:	1aff      	subs	r7, r7, r3
 80018a4:	4252      	negs	r2, r2
 80018a6:	1abb      	subs	r3, r7, r2
 80018a8:	4698      	mov	r8, r3
 80018aa:	465c      	mov	r4, fp
 80018ac:	e563      	b.n	8001376 <__aeabi_dsub+0xbe>
 80018ae:	4663      	mov	r3, ip
 80018b0:	1a85      	subs	r5, r0, r2
 80018b2:	1bd9      	subs	r1, r3, r7
 80018b4:	42a8      	cmp	r0, r5
 80018b6:	419b      	sbcs	r3, r3
 80018b8:	425b      	negs	r3, r3
 80018ba:	1ac9      	subs	r1, r1, r3
 80018bc:	020b      	lsls	r3, r1, #8
 80018be:	d550      	bpl.n	8001962 <__aeabi_dsub+0x6aa>
 80018c0:	1a15      	subs	r5, r2, r0
 80018c2:	4663      	mov	r3, ip
 80018c4:	42aa      	cmp	r2, r5
 80018c6:	4192      	sbcs	r2, r2
 80018c8:	1aff      	subs	r7, r7, r3
 80018ca:	4252      	negs	r2, r2
 80018cc:	1ab9      	subs	r1, r7, r2
 80018ce:	465c      	mov	r4, fp
 80018d0:	e578      	b.n	80013c4 <__aeabi_dsub+0x10c>
 80018d2:	4663      	mov	r3, ip
 80018d4:	4303      	orrs	r3, r0
 80018d6:	001d      	movs	r5, r3
 80018d8:	1e68      	subs	r0, r5, #1
 80018da:	4185      	sbcs	r5, r0
 80018dc:	e707      	b.n	80016ee <__aeabi_dsub+0x436>
 80018de:	4666      	mov	r6, ip
 80018e0:	3b20      	subs	r3, #32
 80018e2:	40de      	lsrs	r6, r3
 80018e4:	464b      	mov	r3, r9
 80018e6:	2b20      	cmp	r3, #32
 80018e8:	d006      	beq.n	80018f8 <__aeabi_dsub+0x640>
 80018ea:	4649      	mov	r1, r9
 80018ec:	2340      	movs	r3, #64	; 0x40
 80018ee:	1a5b      	subs	r3, r3, r1
 80018f0:	4661      	mov	r1, ip
 80018f2:	4099      	lsls	r1, r3
 80018f4:	4308      	orrs	r0, r1
 80018f6:	4680      	mov	r8, r0
 80018f8:	4645      	mov	r5, r8
 80018fa:	1e69      	subs	r1, r5, #1
 80018fc:	418d      	sbcs	r5, r1
 80018fe:	4335      	orrs	r5, r6
 8001900:	e71c      	b.n	800173c <__aeabi_dsub+0x484>
 8001902:	4663      	mov	r3, ip
 8001904:	08c0      	lsrs	r0, r0, #3
 8001906:	075e      	lsls	r6, r3, #29
 8001908:	08d9      	lsrs	r1, r3, #3
 800190a:	2d00      	cmp	r5, #0
 800190c:	d146      	bne.n	800199c <__aeabi_dsub+0x6e4>
 800190e:	4330      	orrs	r0, r6
 8001910:	4682      	mov	sl, r0
 8001912:	e674      	b.n	80015fe <__aeabi_dsub+0x346>
 8001914:	08d2      	lsrs	r2, r2, #3
 8001916:	077b      	lsls	r3, r7, #29
 8001918:	431a      	orrs	r2, r3
 800191a:	4692      	mov	sl, r2
 800191c:	08f9      	lsrs	r1, r7, #3
 800191e:	e66e      	b.n	80015fe <__aeabi_dsub+0x346>
 8001920:	1a15      	subs	r5, r2, r0
 8001922:	4663      	mov	r3, ip
 8001924:	42aa      	cmp	r2, r5
 8001926:	4192      	sbcs	r2, r2
 8001928:	1aff      	subs	r7, r7, r3
 800192a:	4252      	negs	r2, r2
 800192c:	1ab9      	subs	r1, r7, r2
 800192e:	2601      	movs	r6, #1
 8001930:	e51b      	b.n	800136a <__aeabi_dsub+0xb2>
 8001932:	08d2      	lsrs	r2, r2, #3
 8001934:	077b      	lsls	r3, r7, #29
 8001936:	431a      	orrs	r2, r3
 8001938:	4692      	mov	sl, r2
 800193a:	08f9      	lsrs	r1, r7, #3
 800193c:	e632      	b.n	80015a4 <__aeabi_dsub+0x2ec>
 800193e:	1885      	adds	r5, r0, r2
 8001940:	4285      	cmp	r5, r0
 8001942:	4189      	sbcs	r1, r1
 8001944:	4467      	add	r7, ip
 8001946:	4249      	negs	r1, r1
 8001948:	1879      	adds	r1, r7, r1
 800194a:	020b      	lsls	r3, r1, #8
 800194c:	d400      	bmi.n	8001950 <__aeabi_dsub+0x698>
 800194e:	e61d      	b.n	800158c <__aeabi_dsub+0x2d4>
 8001950:	4b07      	ldr	r3, [pc, #28]	; (8001970 <__aeabi_dsub+0x6b8>)
 8001952:	2601      	movs	r6, #1
 8001954:	4019      	ands	r1, r3
 8001956:	e619      	b.n	800158c <__aeabi_dsub+0x2d4>
 8001958:	2300      	movs	r3, #0
 800195a:	4656      	mov	r6, sl
 800195c:	2200      	movs	r2, #0
 800195e:	469a      	mov	sl, r3
 8001960:	e54e      	b.n	8001400 <__aeabi_dsub+0x148>
 8001962:	002b      	movs	r3, r5
 8001964:	430b      	orrs	r3, r1
 8001966:	469a      	mov	sl, r3
 8001968:	d100      	bne.n	800196c <__aeabi_dsub+0x6b4>
 800196a:	e687      	b.n	800167c <__aeabi_dsub+0x3c4>
 800196c:	e60e      	b.n	800158c <__aeabi_dsub+0x2d4>
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	ff7fffff 	.word	0xff7fffff
 8001974:	000007ff 	.word	0x000007ff
 8001978:	4666      	mov	r6, ip
 800197a:	3b20      	subs	r3, #32
 800197c:	40de      	lsrs	r6, r3
 800197e:	464b      	mov	r3, r9
 8001980:	2b20      	cmp	r3, #32
 8001982:	d006      	beq.n	8001992 <__aeabi_dsub+0x6da>
 8001984:	4649      	mov	r1, r9
 8001986:	2340      	movs	r3, #64	; 0x40
 8001988:	1a5b      	subs	r3, r3, r1
 800198a:	4661      	mov	r1, ip
 800198c:	4099      	lsls	r1, r3
 800198e:	4308      	orrs	r0, r1
 8001990:	4680      	mov	r8, r0
 8001992:	4645      	mov	r5, r8
 8001994:	1e69      	subs	r1, r5, #1
 8001996:	418d      	sbcs	r5, r1
 8001998:	4335      	orrs	r5, r6
 800199a:	e6a8      	b.n	80016ee <__aeabi_dsub+0x436>
 800199c:	4306      	orrs	r6, r0
 800199e:	2080      	movs	r0, #128	; 0x80
 80019a0:	0300      	lsls	r0, r0, #12
 80019a2:	4201      	tst	r1, r0
 80019a4:	d008      	beq.n	80019b8 <__aeabi_dsub+0x700>
 80019a6:	08fd      	lsrs	r5, r7, #3
 80019a8:	4205      	tst	r5, r0
 80019aa:	d105      	bne.n	80019b8 <__aeabi_dsub+0x700>
 80019ac:	08d2      	lsrs	r2, r2, #3
 80019ae:	077f      	lsls	r7, r7, #29
 80019b0:	433a      	orrs	r2, r7
 80019b2:	0016      	movs	r6, r2
 80019b4:	465c      	mov	r4, fp
 80019b6:	0029      	movs	r1, r5
 80019b8:	00ca      	lsls	r2, r1, #3
 80019ba:	0f71      	lsrs	r1, r6, #29
 80019bc:	4311      	orrs	r1, r2
 80019be:	00f6      	lsls	r6, r6, #3
 80019c0:	074a      	lsls	r2, r1, #29
 80019c2:	08f6      	lsrs	r6, r6, #3
 80019c4:	4332      	orrs	r2, r6
 80019c6:	4692      	mov	sl, r2
 80019c8:	08c9      	lsrs	r1, r1, #3
 80019ca:	e618      	b.n	80015fe <__aeabi_dsub+0x346>
 80019cc:	2180      	movs	r1, #128	; 0x80
 80019ce:	2400      	movs	r4, #0
 80019d0:	0309      	lsls	r1, r1, #12
 80019d2:	e618      	b.n	8001606 <__aeabi_dsub+0x34e>
 80019d4:	1885      	adds	r5, r0, r2
 80019d6:	4295      	cmp	r5, r2
 80019d8:	4192      	sbcs	r2, r2
 80019da:	4467      	add	r7, ip
 80019dc:	4251      	negs	r1, r2
 80019de:	1879      	adds	r1, r7, r1
 80019e0:	e716      	b.n	8001810 <__aeabi_dsub+0x558>
 80019e2:	2300      	movs	r3, #0
 80019e4:	4e01      	ldr	r6, [pc, #4]	; (80019ec <__aeabi_dsub+0x734>)
 80019e6:	469a      	mov	sl, r3
 80019e8:	001a      	movs	r2, r3
 80019ea:	e509      	b.n	8001400 <__aeabi_dsub+0x148>
 80019ec:	000007ff 	.word	0x000007ff

080019f0 <__aeabi_d2iz>:
 80019f0:	b530      	push	{r4, r5, lr}
 80019f2:	4d14      	ldr	r5, [pc, #80]	; (8001a44 <__aeabi_d2iz+0x54>)
 80019f4:	030a      	lsls	r2, r1, #12
 80019f6:	004b      	lsls	r3, r1, #1
 80019f8:	0b12      	lsrs	r2, r2, #12
 80019fa:	0d5b      	lsrs	r3, r3, #21
 80019fc:	0fc9      	lsrs	r1, r1, #31
 80019fe:	2400      	movs	r4, #0
 8001a00:	42ab      	cmp	r3, r5
 8001a02:	dd04      	ble.n	8001a0e <__aeabi_d2iz+0x1e>
 8001a04:	4c10      	ldr	r4, [pc, #64]	; (8001a48 <__aeabi_d2iz+0x58>)
 8001a06:	42a3      	cmp	r3, r4
 8001a08:	dd03      	ble.n	8001a12 <__aeabi_d2iz+0x22>
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <__aeabi_d2iz+0x5c>)
 8001a0c:	18cc      	adds	r4, r1, r3
 8001a0e:	0020      	movs	r0, r4
 8001a10:	bd30      	pop	{r4, r5, pc}
 8001a12:	2480      	movs	r4, #128	; 0x80
 8001a14:	0364      	lsls	r4, r4, #13
 8001a16:	4322      	orrs	r2, r4
 8001a18:	4c0d      	ldr	r4, [pc, #52]	; (8001a50 <__aeabi_d2iz+0x60>)
 8001a1a:	1ae4      	subs	r4, r4, r3
 8001a1c:	2c1f      	cmp	r4, #31
 8001a1e:	dd08      	ble.n	8001a32 <__aeabi_d2iz+0x42>
 8001a20:	480c      	ldr	r0, [pc, #48]	; (8001a54 <__aeabi_d2iz+0x64>)
 8001a22:	1ac3      	subs	r3, r0, r3
 8001a24:	40da      	lsrs	r2, r3
 8001a26:	0013      	movs	r3, r2
 8001a28:	425c      	negs	r4, r3
 8001a2a:	2900      	cmp	r1, #0
 8001a2c:	d1ef      	bne.n	8001a0e <__aeabi_d2iz+0x1e>
 8001a2e:	001c      	movs	r4, r3
 8001a30:	e7ed      	b.n	8001a0e <__aeabi_d2iz+0x1e>
 8001a32:	4d09      	ldr	r5, [pc, #36]	; (8001a58 <__aeabi_d2iz+0x68>)
 8001a34:	40e0      	lsrs	r0, r4
 8001a36:	46ac      	mov	ip, r5
 8001a38:	4463      	add	r3, ip
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	0013      	movs	r3, r2
 8001a3e:	4303      	orrs	r3, r0
 8001a40:	e7f2      	b.n	8001a28 <__aeabi_d2iz+0x38>
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	000003fe 	.word	0x000003fe
 8001a48:	0000041d 	.word	0x0000041d
 8001a4c:	7fffffff 	.word	0x7fffffff
 8001a50:	00000433 	.word	0x00000433
 8001a54:	00000413 	.word	0x00000413
 8001a58:	fffffbed 	.word	0xfffffbed

08001a5c <__aeabi_i2d>:
 8001a5c:	b570      	push	{r4, r5, r6, lr}
 8001a5e:	2800      	cmp	r0, #0
 8001a60:	d018      	beq.n	8001a94 <__aeabi_i2d+0x38>
 8001a62:	17c3      	asrs	r3, r0, #31
 8001a64:	18c5      	adds	r5, r0, r3
 8001a66:	405d      	eors	r5, r3
 8001a68:	0fc4      	lsrs	r4, r0, #31
 8001a6a:	0028      	movs	r0, r5
 8001a6c:	f000 f832 	bl	8001ad4 <__clzsi2>
 8001a70:	4b16      	ldr	r3, [pc, #88]	; (8001acc <__aeabi_i2d+0x70>)
 8001a72:	1a1b      	subs	r3, r3, r0
 8001a74:	055b      	lsls	r3, r3, #21
 8001a76:	0d5e      	lsrs	r6, r3, #21
 8001a78:	280a      	cmp	r0, #10
 8001a7a:	dc20      	bgt.n	8001abe <__aeabi_i2d+0x62>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	002a      	movs	r2, r5
 8001a80:	3315      	adds	r3, #21
 8001a82:	409a      	lsls	r2, r3
 8001a84:	0013      	movs	r3, r2
 8001a86:	220b      	movs	r2, #11
 8001a88:	1a10      	subs	r0, r2, r0
 8001a8a:	002a      	movs	r2, r5
 8001a8c:	40c2      	lsrs	r2, r0
 8001a8e:	0312      	lsls	r2, r2, #12
 8001a90:	0b12      	lsrs	r2, r2, #12
 8001a92:	e003      	b.n	8001a9c <__aeabi_i2d+0x40>
 8001a94:	2400      	movs	r4, #0
 8001a96:	2600      	movs	r6, #0
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	0312      	lsls	r2, r2, #12
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	0b13      	lsrs	r3, r2, #12
 8001aa4:	0d0a      	lsrs	r2, r1, #20
 8001aa6:	4d0a      	ldr	r5, [pc, #40]	; (8001ad0 <__aeabi_i2d+0x74>)
 8001aa8:	0512      	lsls	r2, r2, #20
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	402a      	ands	r2, r5
 8001aae:	0533      	lsls	r3, r6, #20
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	07e4      	lsls	r4, r4, #31
 8001ab6:	085b      	lsrs	r3, r3, #1
 8001ab8:	4323      	orrs	r3, r4
 8001aba:	0019      	movs	r1, r3
 8001abc:	bd70      	pop	{r4, r5, r6, pc}
 8001abe:	002a      	movs	r2, r5
 8001ac0:	380b      	subs	r0, #11
 8001ac2:	4082      	lsls	r2, r0
 8001ac4:	0312      	lsls	r2, r2, #12
 8001ac6:	0b12      	lsrs	r2, r2, #12
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e7e7      	b.n	8001a9c <__aeabi_i2d+0x40>
 8001acc:	0000041e 	.word	0x0000041e
 8001ad0:	800fffff 	.word	0x800fffff

08001ad4 <__clzsi2>:
 8001ad4:	211c      	movs	r1, #28
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	041b      	lsls	r3, r3, #16
 8001ada:	4298      	cmp	r0, r3
 8001adc:	d301      	bcc.n	8001ae2 <__clzsi2+0xe>
 8001ade:	0c00      	lsrs	r0, r0, #16
 8001ae0:	3910      	subs	r1, #16
 8001ae2:	0a1b      	lsrs	r3, r3, #8
 8001ae4:	4298      	cmp	r0, r3
 8001ae6:	d301      	bcc.n	8001aec <__clzsi2+0x18>
 8001ae8:	0a00      	lsrs	r0, r0, #8
 8001aea:	3908      	subs	r1, #8
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	4298      	cmp	r0, r3
 8001af0:	d301      	bcc.n	8001af6 <__clzsi2+0x22>
 8001af2:	0900      	lsrs	r0, r0, #4
 8001af4:	3904      	subs	r1, #4
 8001af6:	a202      	add	r2, pc, #8	; (adr r2, 8001b00 <__clzsi2+0x2c>)
 8001af8:	5c10      	ldrb	r0, [r2, r0]
 8001afa:	1840      	adds	r0, r0, r1
 8001afc:	4770      	bx	lr
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	02020304 	.word	0x02020304
 8001b04:	01010101 	.word	0x01010101
	...

08001b10 <ACM_Init>:
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4a19      	ldr	r2, [pc, #100]	; (8001b7c <ACM_Init+0x6c>)
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <ACM_Init+0x70>)
 8001b18:	0010      	movs	r0, r2
 8001b1a:	0019      	movs	r1, r3
 8001b1c:	2328      	movs	r3, #40	; 0x28
 8001b1e:	001a      	movs	r2, r3
 8001b20:	f006 fcb8 	bl	8008494 <memcpy>
 8001b24:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <ACM_Init+0x6c>)
 8001b26:	4a17      	ldr	r2, [pc, #92]	; (8001b84 <ACM_Init+0x74>)
 8001b28:	3328      	adds	r3, #40	; 0x28
 8001b2a:	0011      	movs	r1, r2
 8001b2c:	2228      	movs	r2, #40	; 0x28
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f006 fcb0 	bl	8008494 <memcpy>
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <ACM_Init+0x6c>)
 8001b36:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <ACM_Init+0x78>)
 8001b38:	3350      	adds	r3, #80	; 0x50
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	2228      	movs	r2, #40	; 0x28
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f006 fca8 	bl	8008494 <memcpy>
 8001b44:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <ACM_Init+0x6c>)
 8001b46:	4a11      	ldr	r2, [pc, #68]	; (8001b8c <ACM_Init+0x7c>)
 8001b48:	3378      	adds	r3, #120	; 0x78
 8001b4a:	0011      	movs	r1, r2
 8001b4c:	2228      	movs	r2, #40	; 0x28
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f006 fca0 	bl	8008494 <memcpy>
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <ACM_Init+0x6c>)
 8001b56:	22a0      	movs	r2, #160	; 0xa0
 8001b58:	490d      	ldr	r1, [pc, #52]	; (8001b90 <ACM_Init+0x80>)
 8001b5a:	189b      	adds	r3, r3, r2
 8001b5c:	2228      	movs	r2, #40	; 0x28
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f006 fc98 	bl	8008494 <memcpy>
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <ACM_Init+0x6c>)
 8001b66:	22c8      	movs	r2, #200	; 0xc8
 8001b68:	490a      	ldr	r1, [pc, #40]	; (8001b94 <ACM_Init+0x84>)
 8001b6a:	189b      	adds	r3, r3, r2
 8001b6c:	2228      	movs	r2, #40	; 0x28
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f006 fc90 	bl	8008494 <memcpy>
 8001b74:	46c0      	nop			; (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	20001ff8 	.word	0x20001ff8
 8001b80:	20000000 	.word	0x20000000
 8001b84:	20000028 	.word	0x20000028
 8001b88:	20000050 	.word	0x20000050
 8001b8c:	200000a0 	.word	0x200000a0
 8001b90:	200000c8 	.word	0x200000c8
 8001b94:	20000078 	.word	0x20000078

08001b98 <fetch_data>:
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	f001 fb96 	bl	80032cc <HAL_GetTick>
 8001ba0:	0002      	movs	r2, r0
 8001ba2:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <fetch_data+0xe4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b63      	cmp	r3, #99	; 0x63
 8001baa:	d909      	bls.n	8001bc0 <fetch_data+0x28>
 8001bac:	4b33      	ldr	r3, [pc, #204]	; (8001c7c <fetch_data+0xe4>)
 8001bae:	795b      	ldrb	r3, [r3, #5]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <fetch_data+0x20>
 8001bb4:	f001 fb8a 	bl	80032cc <HAL_GetTick>
 8001bb8:	4b30      	ldr	r3, [pc, #192]	; (8001c7c <fetch_data+0xe4>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b30      	ldr	r3, [pc, #192]	; (8001c80 <fetch_data+0xe8>)
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	f001 fb84 	bl	80032cc <HAL_GetTick>
 8001bc4:	0002      	movs	r2, r0
 8001bc6:	4b2f      	ldr	r3, [pc, #188]	; (8001c84 <fetch_data+0xec>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b63      	cmp	r3, #99	; 0x63
 8001bce:	d909      	bls.n	8001be4 <fetch_data+0x4c>
 8001bd0:	4b2c      	ldr	r3, [pc, #176]	; (8001c84 <fetch_data+0xec>)
 8001bd2:	795b      	ldrb	r3, [r3, #5]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <fetch_data+0x44>
 8001bd8:	f001 fb78 	bl	80032cc <HAL_GetTick>
 8001bdc:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <fetch_data+0xec>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <fetch_data+0xf0>)
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	f001 fb72 	bl	80032cc <HAL_GetTick>
 8001be8:	0002      	movs	r2, r0
 8001bea:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <fetch_data+0xf4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b63      	cmp	r3, #99	; 0x63
 8001bf2:	d909      	bls.n	8001c08 <fetch_data+0x70>
 8001bf4:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <fetch_data+0xf4>)
 8001bf6:	795b      	ldrb	r3, [r3, #5]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <fetch_data+0x68>
 8001bfc:	f001 fb66 	bl	80032cc <HAL_GetTick>
 8001c00:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <fetch_data+0xf4>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b22      	ldr	r3, [pc, #136]	; (8001c90 <fetch_data+0xf8>)
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	f001 fb60 	bl	80032cc <HAL_GetTick>
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <fetch_data+0xfc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b63      	cmp	r3, #99	; 0x63
 8001c16:	d909      	bls.n	8001c2c <fetch_data+0x94>
 8001c18:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <fetch_data+0xfc>)
 8001c1a:	795b      	ldrb	r3, [r3, #5]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <fetch_data+0x8c>
 8001c20:	f001 fb54 	bl	80032cc <HAL_GetTick>
 8001c24:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <fetch_data+0xfc>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <fetch_data+0x100>)
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	f001 fb4e 	bl	80032cc <HAL_GetTick>
 8001c30:	0002      	movs	r2, r0
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <fetch_data+0x104>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b63      	cmp	r3, #99	; 0x63
 8001c3a:	d909      	bls.n	8001c50 <fetch_data+0xb8>
 8001c3c:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <fetch_data+0xfc>)
 8001c3e:	795b      	ldrb	r3, [r3, #5]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <fetch_data+0xb0>
 8001c44:	f001 fb42 	bl	80032cc <HAL_GetTick>
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <fetch_data+0x104>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <fetch_data+0x108>)
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	f001 fb3c 	bl	80032cc <HAL_GetTick>
 8001c54:	0002      	movs	r2, r0
 8001c56:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <fetch_data+0x10c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b63      	cmp	r3, #99	; 0x63
 8001c5e:	d909      	bls.n	8001c74 <fetch_data+0xdc>
 8001c60:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <fetch_data+0x10c>)
 8001c62:	795b      	ldrb	r3, [r3, #5]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <fetch_data+0xd4>
 8001c68:	f001 fb30 	bl	80032cc <HAL_GetTick>
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <fetch_data+0x10c>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <fetch_data+0x108>)
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	46c0      	nop			; (mov r8, r8)
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	20002e48 	.word	0x20002e48
 8001c80:	20000124 	.word	0x20000124
 8001c84:	200032f4 	.word	0x200032f4
 8001c88:	20000128 	.word	0x20000128
 8001c8c:	20003058 	.word	0x20003058
 8001c90:	2000012c 	.word	0x2000012c
 8001c94:	2000328c 	.word	0x2000328c
 8001c98:	20000134 	.word	0x20000134
 8001c9c:	20003278 	.word	0x20003278
 8001ca0:	20000130 	.word	0x20000130
 8001ca4:	20003068 	.word	0x20003068

08001ca8 <update_data>:
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4b59      	ldr	r3, [pc, #356]	; (8001e14 <update_data+0x16c>)
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	4b59      	ldr	r3, [pc, #356]	; (8001e18 <update_data+0x170>)
 8001cb4:	2206      	movs	r2, #6
 8001cb6:	5e9a      	ldrsh	r2, [r3, r2]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	801a      	strh	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3328      	adds	r3, #40	; 0x28
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	4b56      	ldr	r3, [pc, #344]	; (8001e1c <update_data+0x174>)
 8001cc4:	2206      	movs	r2, #6
 8001cc6:	5e9a      	ldrsh	r2, [r3, r2]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	801a      	strh	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3328      	adds	r3, #40	; 0x28
 8001cd0:	607b      	str	r3, [r7, #4]
 8001cd2:	4b53      	ldr	r3, [pc, #332]	; (8001e20 <update_data+0x178>)
 8001cd4:	2206      	movs	r2, #6
 8001cd6:	5e9a      	ldrsh	r2, [r3, r2]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	801a      	strh	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3328      	adds	r3, #40	; 0x28
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	4b50      	ldr	r3, [pc, #320]	; (8001e24 <update_data+0x17c>)
 8001ce4:	2206      	movs	r2, #6
 8001ce6:	5e9a      	ldrsh	r2, [r3, r2]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	801a      	strh	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3328      	adds	r3, #40	; 0x28
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	4b4d      	ldr	r3, [pc, #308]	; (8001e28 <update_data+0x180>)
 8001cf4:	2206      	movs	r2, #6
 8001cf6:	5e9a      	ldrsh	r2, [r3, r2]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	801a      	strh	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3328      	adds	r3, #40	; 0x28
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	4b4a      	ldr	r3, [pc, #296]	; (8001e2c <update_data+0x184>)
 8001d04:	2206      	movs	r2, #6
 8001d06:	5e9a      	ldrsh	r2, [r3, r2]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	801a      	strh	r2, [r3, #0]
 8001d0c:	4b41      	ldr	r3, [pc, #260]	; (8001e14 <update_data+0x16c>)
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	e076      	b.n	8001e00 <update_data+0x158>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2225      	movs	r2, #37	; 0x25
 8001d16:	5c9b      	ldrb	r3, [r3, r2]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d16d      	bne.n	8001df8 <update_data+0x150>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	5e9a      	ldrsh	r2, [r3, r2]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2120      	movs	r1, #32
 8001d26:	5e5b      	ldrsh	r3, [r3, r1]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	dd07      	ble.n	8001d3c <update_data+0x94>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	5e9a      	ldrsh	r2, [r3, r2]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2122      	movs	r1, #34	; 0x22
 8001d36:	5e5b      	ldrsh	r3, [r3, r1]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	db0c      	blt.n	8001d56 <update_data+0xae>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7d1b      	ldrb	r3, [r3, #20]
 8001d40:	0018      	movs	r0, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2100      	movs	r1, #0
 8001d46:	5e59      	ldrsh	r1, [r3, r1]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	0043      	lsls	r3, r0, #1
 8001d4c:	18d3      	adds	r3, r2, r3
 8001d4e:	3304      	adds	r3, #4
 8001d50:	1c0a      	adds	r2, r1, #0
 8001d52:	801a      	strh	r2, [r3, #0]
 8001d54:	e010      	b.n	8001d78 <update_data+0xd0>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2224      	movs	r2, #36	; 0x24
 8001d5a:	5c9b      	ldrb	r3, [r3, r2]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	b2d9      	uxtb	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2224      	movs	r2, #36	; 0x24
 8001d64:	5499      	strb	r1, [r3, r2]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2224      	movs	r2, #36	; 0x24
 8001d6a:	5c9b      	ldrb	r3, [r3, r2]
 8001d6c:	2b09      	cmp	r3, #9
 8001d6e:	d903      	bls.n	8001d78 <update_data+0xd0>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2225      	movs	r2, #37	; 0x25
 8001d74:	2100      	movs	r1, #0
 8001d76:	5499      	strb	r1, [r3, r2]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	7d1b      	ldrb	r3, [r3, #20]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	751a      	strb	r2, [r3, #20]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	7d1b      	ldrb	r3, [r3, #20]
 8001d88:	2107      	movs	r1, #7
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f7fe fa42 	bl	8000214 <__aeabi_uidivmod>
 8001d90:	000b      	movs	r3, r1
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	751a      	strb	r2, [r3, #20]
 8001d98:	1cfb      	adds	r3, r7, #3
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
 8001d9e:	e013      	b.n	8001dc8 <update_data+0x120>
 8001da0:	1cfb      	adds	r3, r7, #3
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	18d3      	adds	r3, r2, r3
 8001daa:	3304      	adds	r3, #4
 8001dac:	2200      	movs	r2, #0
 8001dae:	5e9b      	ldrsh	r3, [r3, r2]
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	003b      	movs	r3, r7
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	18d3      	adds	r3, r2, r3
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	003b      	movs	r3, r7
 8001dbc:	801a      	strh	r2, [r3, #0]
 8001dbe:	1cfb      	adds	r3, r7, #3
 8001dc0:	781a      	ldrb	r2, [r3, #0]
 8001dc2:	1cfb      	adds	r3, r7, #3
 8001dc4:	3201      	adds	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]
 8001dc8:	1cfb      	adds	r3, r7, #3
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b07      	cmp	r3, #7
 8001dce:	d9e7      	bls.n	8001da0 <update_data+0xf8>
 8001dd0:	003b      	movs	r3, r7
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	5e9b      	ldrsh	r3, [r3, r2]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	da00      	bge.n	8001ddc <update_data+0x134>
 8001dda:	3307      	adds	r3, #7
 8001ddc:	10db      	asrs	r3, r3, #3
 8001dde:	b21b      	sxth	r3, r3
 8001de0:	0018      	movs	r0, r3
 8001de2:	f7ff fe3b 	bl	8001a5c <__aeabi_i2d>
 8001de6:	0003      	movs	r3, r0
 8001de8:	000c      	movs	r4, r1
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6193      	str	r3, [r2, #24]
 8001dee:	61d4      	str	r4, [r2, #28]
 8001df0:	003b      	movs	r3, r7
 8001df2:	2200      	movs	r2, #0
 8001df4:	801a      	strh	r2, [r3, #0]
 8001df6:	e000      	b.n	8001dfa <update_data+0x152>
 8001df8:	46c0      	nop			; (mov r8, r8)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3328      	adds	r3, #40	; 0x28
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	33f0      	adds	r3, #240	; 0xf0
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d383      	bcc.n	8001d12 <update_data+0x6a>
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	b003      	add	sp, #12
 8001e10:	bd90      	pop	{r4, r7, pc}
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	20001ff8 	.word	0x20001ff8
 8001e18:	20002e48 	.word	0x20002e48
 8001e1c:	200032f4 	.word	0x200032f4
 8001e20:	20003058 	.word	0x20003058
 8001e24:	20003278 	.word	0x20003278
 8001e28:	2000328c 	.word	0x2000328c
 8001e2c:	20003068 	.word	0x20003068

08001e30 <calculate_wing_angle>:
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4b5f      	ldr	r3, [pc, #380]	; (8001fb4 <calculate_wing_angle+0x184>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d14c      	bne.n	8001ed8 <calculate_wing_angle+0xa8>
 8001e3e:	4b5e      	ldr	r3, [pc, #376]	; (8001fb8 <calculate_wing_angle+0x188>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d148      	bne.n	8001ed8 <calculate_wing_angle+0xa8>
 8001e46:	4b5d      	ldr	r3, [pc, #372]	; (8001fbc <calculate_wing_angle+0x18c>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	001a      	movs	r2, r3
 8001e4c:	0013      	movs	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	189b      	adds	r3, r3, r2
 8001e52:	011a      	lsls	r2, r3, #4
 8001e54:	189a      	adds	r2, r3, r2
 8001e56:	4b5a      	ldr	r3, [pc, #360]	; (8001fc0 <calculate_wing_angle+0x190>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	000b      	movs	r3, r1
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	185b      	adds	r3, r3, r1
 8001e62:	18d3      	adds	r3, r2, r3
 8001e64:	4a57      	ldr	r2, [pc, #348]	; (8001fc4 <calculate_wing_angle+0x194>)
 8001e66:	7812      	ldrb	r2, [r2, #0]
 8001e68:	189a      	adds	r2, r3, r2
 8001e6a:	4b57      	ldr	r3, [pc, #348]	; (8001fc8 <calculate_wing_angle+0x198>)
 8001e6c:	18d3      	adds	r3, r2, r3
 8001e6e:	2200      	movs	r2, #0
 8001e70:	569a      	ldrsb	r2, [r3, r2]
 8001e72:	4b56      	ldr	r3, [pc, #344]	; (8001fcc <calculate_wing_angle+0x19c>)
 8001e74:	701a      	strb	r2, [r3, #0]
 8001e76:	4b51      	ldr	r3, [pc, #324]	; (8001fbc <calculate_wing_angle+0x18c>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	001a      	movs	r2, r3
 8001e7c:	0013      	movs	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	189b      	adds	r3, r3, r2
 8001e82:	011a      	lsls	r2, r3, #4
 8001e84:	189a      	adds	r2, r3, r2
 8001e86:	4b4e      	ldr	r3, [pc, #312]	; (8001fc0 <calculate_wing_angle+0x190>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	0019      	movs	r1, r3
 8001e8c:	000b      	movs	r3, r1
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	185b      	adds	r3, r3, r1
 8001e92:	18d3      	adds	r3, r2, r3
 8001e94:	4a4b      	ldr	r2, [pc, #300]	; (8001fc4 <calculate_wing_angle+0x194>)
 8001e96:	7812      	ldrb	r2, [r2, #0]
 8001e98:	189a      	adds	r2, r3, r2
 8001e9a:	4b4d      	ldr	r3, [pc, #308]	; (8001fd0 <calculate_wing_angle+0x1a0>)
 8001e9c:	18d3      	adds	r3, r2, r3
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	569a      	ldrsb	r2, [r3, r2]
 8001ea2:	4b4c      	ldr	r3, [pc, #304]	; (8001fd4 <calculate_wing_angle+0x1a4>)
 8001ea4:	701a      	strb	r2, [r3, #0]
 8001ea6:	4b45      	ldr	r3, [pc, #276]	; (8001fbc <calculate_wing_angle+0x18c>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	001a      	movs	r2, r3
 8001eac:	0013      	movs	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	189b      	adds	r3, r3, r2
 8001eb2:	011a      	lsls	r2, r3, #4
 8001eb4:	189a      	adds	r2, r3, r2
 8001eb6:	4b42      	ldr	r3, [pc, #264]	; (8001fc0 <calculate_wing_angle+0x190>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	0019      	movs	r1, r3
 8001ebc:	000b      	movs	r3, r1
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	185b      	adds	r3, r3, r1
 8001ec2:	18d3      	adds	r3, r2, r3
 8001ec4:	4a3f      	ldr	r2, [pc, #252]	; (8001fc4 <calculate_wing_angle+0x194>)
 8001ec6:	7812      	ldrb	r2, [r2, #0]
 8001ec8:	189a      	adds	r2, r3, r2
 8001eca:	4b43      	ldr	r3, [pc, #268]	; (8001fd8 <calculate_wing_angle+0x1a8>)
 8001ecc:	18d3      	adds	r3, r2, r3
 8001ece:	2200      	movs	r2, #0
 8001ed0:	569a      	ldrsb	r2, [r3, r2]
 8001ed2:	4b42      	ldr	r3, [pc, #264]	; (8001fdc <calculate_wing_angle+0x1ac>)
 8001ed4:	701a      	strb	r2, [r3, #0]
 8001ed6:	e01a      	b.n	8001f0e <calculate_wing_angle+0xde>
 8001ed8:	4b36      	ldr	r3, [pc, #216]	; (8001fb4 <calculate_wing_angle+0x184>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d10d      	bne.n	8001efc <calculate_wing_angle+0xcc>
 8001ee0:	4b35      	ldr	r3, [pc, #212]	; (8001fb8 <calculate_wing_angle+0x188>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d109      	bne.n	8001efc <calculate_wing_angle+0xcc>
 8001ee8:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <calculate_wing_angle+0x19c>)
 8001eea:	2264      	movs	r2, #100	; 0x64
 8001eec:	701a      	strb	r2, [r3, #0]
 8001eee:	4b39      	ldr	r3, [pc, #228]	; (8001fd4 <calculate_wing_angle+0x1a4>)
 8001ef0:	2264      	movs	r2, #100	; 0x64
 8001ef2:	701a      	strb	r2, [r3, #0]
 8001ef4:	4b39      	ldr	r3, [pc, #228]	; (8001fdc <calculate_wing_angle+0x1ac>)
 8001ef6:	2264      	movs	r2, #100	; 0x64
 8001ef8:	701a      	strb	r2, [r3, #0]
 8001efa:	e008      	b.n	8001f0e <calculate_wing_angle+0xde>
 8001efc:	4b33      	ldr	r3, [pc, #204]	; (8001fcc <calculate_wing_angle+0x19c>)
 8001efe:	2264      	movs	r2, #100	; 0x64
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <calculate_wing_angle+0x1a4>)
 8001f04:	2264      	movs	r2, #100	; 0x64
 8001f06:	701a      	strb	r2, [r3, #0]
 8001f08:	4b34      	ldr	r3, [pc, #208]	; (8001fdc <calculate_wing_angle+0x1ac>)
 8001f0a:	2264      	movs	r2, #100	; 0x64
 8001f0c:	701a      	strb	r2, [r3, #0]
 8001f0e:	4b2f      	ldr	r3, [pc, #188]	; (8001fcc <calculate_wing_angle+0x19c>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	b25b      	sxtb	r3, r3
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7ff fda1 	bl	8001a5c <__aeabi_i2d>
 8001f1a:	4a31      	ldr	r2, [pc, #196]	; (8001fe0 <calculate_wing_angle+0x1b0>)
 8001f1c:	4b31      	ldr	r3, [pc, #196]	; (8001fe4 <calculate_wing_angle+0x1b4>)
 8001f1e:	f7fe ff59 	bl	8000dd4 <__aeabi_dmul>
 8001f22:	0003      	movs	r3, r0
 8001f24:	000c      	movs	r4, r1
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	617c      	str	r4, [r7, #20]
 8001f2a:	4b2a      	ldr	r3, [pc, #168]	; (8001fd4 <calculate_wing_angle+0x1a4>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	b25b      	sxtb	r3, r3
 8001f30:	0018      	movs	r0, r3
 8001f32:	f7ff fd93 	bl	8001a5c <__aeabi_i2d>
 8001f36:	4a2a      	ldr	r2, [pc, #168]	; (8001fe0 <calculate_wing_angle+0x1b0>)
 8001f38:	4b2a      	ldr	r3, [pc, #168]	; (8001fe4 <calculate_wing_angle+0x1b4>)
 8001f3a:	f7fe ff4b 	bl	8000dd4 <__aeabi_dmul>
 8001f3e:	0003      	movs	r3, r0
 8001f40:	000c      	movs	r4, r1
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	60fc      	str	r4, [r7, #12]
 8001f46:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <calculate_wing_angle+0x1ac>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	b25b      	sxtb	r3, r3
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f7ff fd85 	bl	8001a5c <__aeabi_i2d>
 8001f52:	4a23      	ldr	r2, [pc, #140]	; (8001fe0 <calculate_wing_angle+0x1b0>)
 8001f54:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <calculate_wing_angle+0x1b4>)
 8001f56:	f7fe ff3d 	bl	8000dd4 <__aeabi_dmul>
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	000c      	movs	r4, r1
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	607c      	str	r4, [r7, #4]
 8001f62:	6938      	ldr	r0, [r7, #16]
 8001f64:	6979      	ldr	r1, [r7, #20]
 8001f66:	f7fe fa83 	bl	8000470 <__aeabi_d2uiz>
 8001f6a:	0003      	movs	r3, r0
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	4a1e      	ldr	r2, [pc, #120]	; (8001fe8 <calculate_wing_angle+0x1b8>)
 8001f70:	4694      	mov	ip, r2
 8001f72:	4463      	add	r3, ip
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <calculate_wing_angle+0x1bc>)
 8001f78:	801a      	strh	r2, [r3, #0]
 8001f7a:	68b8      	ldr	r0, [r7, #8]
 8001f7c:	68f9      	ldr	r1, [r7, #12]
 8001f7e:	f7fe fa77 	bl	8000470 <__aeabi_d2uiz>
 8001f82:	0003      	movs	r3, r0
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	4a18      	ldr	r2, [pc, #96]	; (8001fe8 <calculate_wing_angle+0x1b8>)
 8001f88:	4694      	mov	ip, r2
 8001f8a:	4463      	add	r3, ip
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <calculate_wing_angle+0x1c0>)
 8001f90:	801a      	strh	r2, [r3, #0]
 8001f92:	6838      	ldr	r0, [r7, #0]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	f7fe fa6b 	bl	8000470 <__aeabi_d2uiz>
 8001f9a:	0003      	movs	r3, r0
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <calculate_wing_angle+0x1b8>)
 8001fa0:	4694      	mov	ip, r2
 8001fa2:	4463      	add	r3, ip
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <calculate_wing_angle+0x1c4>)
 8001fa8:	801a      	strh	r2, [r3, #0]
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	46bd      	mov	sp, r7
 8001fae:	b007      	add	sp, #28
 8001fb0:	bd90      	pop	{r4, r7, pc}
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	20001a42 	.word	0x20001a42
 8001fb8:	20001a41 	.word	0x20001a41
 8001fbc:	20001a4a 	.word	0x20001a4a
 8001fc0:	20002c39 	.word	0x20002c39
 8001fc4:	20001a40 	.word	0x20001a40
 8001fc8:	20002694 	.word	0x20002694
 8001fcc:	20001a47 	.word	0x20001a47
 8001fd0:	20001a4c 	.word	0x20001a4c
 8001fd4:	20002691 	.word	0x20002691
 8001fd8:	200020ec 	.word	0x200020ec
 8001fdc:	20001a46 	.word	0x20001a46
 8001fe0:	f5c28f5c 	.word	0xf5c28f5c
 8001fe4:	40415c28 	.word	0x40415c28
 8001fe8:	000006a4 	.word	0x000006a4
 8001fec:	20001a44 	.word	0x20001a44
 8001ff0:	20001a48 	.word	0x20001a48
 8001ff4:	200020e8 	.word	0x200020e8

08001ff8 <arbitrate_acceleration>:
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4b8c      	ldr	r3, [pc, #560]	; (8002230 <arbitrate_acceleration+0x238>)
 8002000:	2225      	movs	r2, #37	; 0x25
 8002002:	5c9b      	ldrb	r3, [r3, r2]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d004      	beq.n	8002012 <arbitrate_acceleration+0x1a>
 8002008:	4b8a      	ldr	r3, [pc, #552]	; (8002234 <arbitrate_acceleration+0x23c>)
 800200a:	2225      	movs	r2, #37	; 0x25
 800200c:	5c9b      	ldrb	r3, [r3, r2]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d107      	bne.n	8002022 <arbitrate_acceleration+0x2a>
 8002012:	4b89      	ldr	r3, [pc, #548]	; (8002238 <arbitrate_acceleration+0x240>)
 8002014:	2225      	movs	r2, #37	; 0x25
 8002016:	5c9b      	ldrb	r3, [r3, r2]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <arbitrate_acceleration+0x2a>
 800201c:	4b87      	ldr	r3, [pc, #540]	; (800223c <arbitrate_acceleration+0x244>)
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]
 8002022:	4b86      	ldr	r3, [pc, #536]	; (800223c <arbitrate_acceleration+0x244>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d000      	beq.n	800202c <arbitrate_acceleration+0x34>
 800202a:	e0fd      	b.n	8002228 <arbitrate_acceleration+0x230>
 800202c:	4b80      	ldr	r3, [pc, #512]	; (8002230 <arbitrate_acceleration+0x238>)
 800202e:	2225      	movs	r2, #37	; 0x25
 8002030:	5c9b      	ldrb	r3, [r3, r2]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <arbitrate_acceleration+0x4a>
 8002036:	4b7f      	ldr	r3, [pc, #508]	; (8002234 <arbitrate_acceleration+0x23c>)
 8002038:	2225      	movs	r2, #37	; 0x25
 800203a:	5c9b      	ldrb	r3, [r3, r2]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d000      	beq.n	8002042 <arbitrate_acceleration+0x4a>
 8002040:	e0da      	b.n	80021f8 <arbitrate_acceleration+0x200>
 8002042:	4b7d      	ldr	r3, [pc, #500]	; (8002238 <arbitrate_acceleration+0x240>)
 8002044:	6998      	ldr	r0, [r3, #24]
 8002046:	69d9      	ldr	r1, [r3, #28]
 8002048:	2200      	movs	r2, #0
 800204a:	4b7d      	ldr	r3, [pc, #500]	; (8002240 <arbitrate_acceleration+0x248>)
 800204c:	f7fe fa2e 	bl	80004ac <__aeabi_dadd>
 8002050:	0003      	movs	r3, r0
 8002052:	000c      	movs	r4, r1
 8002054:	603b      	str	r3, [r7, #0]
 8002056:	607c      	str	r4, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	4b7a      	ldr	r3, [pc, #488]	; (8002244 <arbitrate_acceleration+0x24c>)
 800205c:	6838      	ldr	r0, [r7, #0]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	f7fe f9fc 	bl	800045c <__aeabi_dcmpge>
 8002064:	1e03      	subs	r3, r0, #0
 8002066:	d003      	beq.n	8002070 <arbitrate_acceleration+0x78>
 8002068:	4b77      	ldr	r3, [pc, #476]	; (8002248 <arbitrate_acceleration+0x250>)
 800206a:	2211      	movs	r2, #17
 800206c:	701a      	strb	r2, [r3, #0]
 800206e:	e0db      	b.n	8002228 <arbitrate_acceleration+0x230>
 8002070:	2200      	movs	r2, #0
 8002072:	4b76      	ldr	r3, [pc, #472]	; (800224c <arbitrate_acceleration+0x254>)
 8002074:	6838      	ldr	r0, [r7, #0]
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	f7fe f9f0 	bl	800045c <__aeabi_dcmpge>
 800207c:	1e03      	subs	r3, r0, #0
 800207e:	d003      	beq.n	8002088 <arbitrate_acceleration+0x90>
 8002080:	4b71      	ldr	r3, [pc, #452]	; (8002248 <arbitrate_acceleration+0x250>)
 8002082:	2210      	movs	r2, #16
 8002084:	701a      	strb	r2, [r3, #0]
 8002086:	e0cf      	b.n	8002228 <arbitrate_acceleration+0x230>
 8002088:	2200      	movs	r2, #0
 800208a:	4b71      	ldr	r3, [pc, #452]	; (8002250 <arbitrate_acceleration+0x258>)
 800208c:	6838      	ldr	r0, [r7, #0]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	f7fe f9e4 	bl	800045c <__aeabi_dcmpge>
 8002094:	1e03      	subs	r3, r0, #0
 8002096:	d003      	beq.n	80020a0 <arbitrate_acceleration+0xa8>
 8002098:	4b6b      	ldr	r3, [pc, #428]	; (8002248 <arbitrate_acceleration+0x250>)
 800209a:	220f      	movs	r2, #15
 800209c:	701a      	strb	r2, [r3, #0]
 800209e:	e0c3      	b.n	8002228 <arbitrate_acceleration+0x230>
 80020a0:	2200      	movs	r2, #0
 80020a2:	4b6c      	ldr	r3, [pc, #432]	; (8002254 <arbitrate_acceleration+0x25c>)
 80020a4:	6838      	ldr	r0, [r7, #0]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	f7fe f9d8 	bl	800045c <__aeabi_dcmpge>
 80020ac:	1e03      	subs	r3, r0, #0
 80020ae:	d003      	beq.n	80020b8 <arbitrate_acceleration+0xc0>
 80020b0:	4b65      	ldr	r3, [pc, #404]	; (8002248 <arbitrate_acceleration+0x250>)
 80020b2:	220e      	movs	r2, #14
 80020b4:	701a      	strb	r2, [r3, #0]
 80020b6:	e0b7      	b.n	8002228 <arbitrate_acceleration+0x230>
 80020b8:	2200      	movs	r2, #0
 80020ba:	4b67      	ldr	r3, [pc, #412]	; (8002258 <arbitrate_acceleration+0x260>)
 80020bc:	6838      	ldr	r0, [r7, #0]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	f7fe f9cc 	bl	800045c <__aeabi_dcmpge>
 80020c4:	1e03      	subs	r3, r0, #0
 80020c6:	d003      	beq.n	80020d0 <arbitrate_acceleration+0xd8>
 80020c8:	4b5f      	ldr	r3, [pc, #380]	; (8002248 <arbitrate_acceleration+0x250>)
 80020ca:	220d      	movs	r2, #13
 80020cc:	701a      	strb	r2, [r3, #0]
 80020ce:	e0ab      	b.n	8002228 <arbitrate_acceleration+0x230>
 80020d0:	2200      	movs	r2, #0
 80020d2:	4b62      	ldr	r3, [pc, #392]	; (800225c <arbitrate_acceleration+0x264>)
 80020d4:	6838      	ldr	r0, [r7, #0]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	f7fe f9c0 	bl	800045c <__aeabi_dcmpge>
 80020dc:	1e03      	subs	r3, r0, #0
 80020de:	d003      	beq.n	80020e8 <arbitrate_acceleration+0xf0>
 80020e0:	4b59      	ldr	r3, [pc, #356]	; (8002248 <arbitrate_acceleration+0x250>)
 80020e2:	220c      	movs	r2, #12
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	e09f      	b.n	8002228 <arbitrate_acceleration+0x230>
 80020e8:	2200      	movs	r2, #0
 80020ea:	4b5d      	ldr	r3, [pc, #372]	; (8002260 <arbitrate_acceleration+0x268>)
 80020ec:	6838      	ldr	r0, [r7, #0]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	f7fe f9b4 	bl	800045c <__aeabi_dcmpge>
 80020f4:	1e03      	subs	r3, r0, #0
 80020f6:	d003      	beq.n	8002100 <arbitrate_acceleration+0x108>
 80020f8:	4b53      	ldr	r3, [pc, #332]	; (8002248 <arbitrate_acceleration+0x250>)
 80020fa:	220b      	movs	r2, #11
 80020fc:	701a      	strb	r2, [r3, #0]
 80020fe:	e093      	b.n	8002228 <arbitrate_acceleration+0x230>
 8002100:	2200      	movs	r2, #0
 8002102:	4b58      	ldr	r3, [pc, #352]	; (8002264 <arbitrate_acceleration+0x26c>)
 8002104:	6838      	ldr	r0, [r7, #0]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	f7fe f9a8 	bl	800045c <__aeabi_dcmpge>
 800210c:	1e03      	subs	r3, r0, #0
 800210e:	d003      	beq.n	8002118 <arbitrate_acceleration+0x120>
 8002110:	4b4d      	ldr	r3, [pc, #308]	; (8002248 <arbitrate_acceleration+0x250>)
 8002112:	220a      	movs	r2, #10
 8002114:	701a      	strb	r2, [r3, #0]
 8002116:	e087      	b.n	8002228 <arbitrate_acceleration+0x230>
 8002118:	2200      	movs	r2, #0
 800211a:	4b53      	ldr	r3, [pc, #332]	; (8002268 <arbitrate_acceleration+0x270>)
 800211c:	6838      	ldr	r0, [r7, #0]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	f7fe f99c 	bl	800045c <__aeabi_dcmpge>
 8002124:	1e03      	subs	r3, r0, #0
 8002126:	d003      	beq.n	8002130 <arbitrate_acceleration+0x138>
 8002128:	4b47      	ldr	r3, [pc, #284]	; (8002248 <arbitrate_acceleration+0x250>)
 800212a:	2209      	movs	r2, #9
 800212c:	701a      	strb	r2, [r3, #0]
 800212e:	e07b      	b.n	8002228 <arbitrate_acceleration+0x230>
 8002130:	2200      	movs	r2, #0
 8002132:	4b4e      	ldr	r3, [pc, #312]	; (800226c <arbitrate_acceleration+0x274>)
 8002134:	6838      	ldr	r0, [r7, #0]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	f7fe f990 	bl	800045c <__aeabi_dcmpge>
 800213c:	1e03      	subs	r3, r0, #0
 800213e:	d003      	beq.n	8002148 <arbitrate_acceleration+0x150>
 8002140:	4b41      	ldr	r3, [pc, #260]	; (8002248 <arbitrate_acceleration+0x250>)
 8002142:	2208      	movs	r2, #8
 8002144:	701a      	strb	r2, [r3, #0]
 8002146:	e06f      	b.n	8002228 <arbitrate_acceleration+0x230>
 8002148:	2200      	movs	r2, #0
 800214a:	4b49      	ldr	r3, [pc, #292]	; (8002270 <arbitrate_acceleration+0x278>)
 800214c:	6838      	ldr	r0, [r7, #0]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	f7fe f984 	bl	800045c <__aeabi_dcmpge>
 8002154:	1e03      	subs	r3, r0, #0
 8002156:	d003      	beq.n	8002160 <arbitrate_acceleration+0x168>
 8002158:	4b3b      	ldr	r3, [pc, #236]	; (8002248 <arbitrate_acceleration+0x250>)
 800215a:	2207      	movs	r2, #7
 800215c:	701a      	strb	r2, [r3, #0]
 800215e:	e063      	b.n	8002228 <arbitrate_acceleration+0x230>
 8002160:	2200      	movs	r2, #0
 8002162:	4b44      	ldr	r3, [pc, #272]	; (8002274 <arbitrate_acceleration+0x27c>)
 8002164:	6838      	ldr	r0, [r7, #0]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	f7fe f978 	bl	800045c <__aeabi_dcmpge>
 800216c:	1e03      	subs	r3, r0, #0
 800216e:	d003      	beq.n	8002178 <arbitrate_acceleration+0x180>
 8002170:	4b35      	ldr	r3, [pc, #212]	; (8002248 <arbitrate_acceleration+0x250>)
 8002172:	2206      	movs	r2, #6
 8002174:	701a      	strb	r2, [r3, #0]
 8002176:	e057      	b.n	8002228 <arbitrate_acceleration+0x230>
 8002178:	2200      	movs	r2, #0
 800217a:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <arbitrate_acceleration+0x280>)
 800217c:	6838      	ldr	r0, [r7, #0]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	f7fe f96c 	bl	800045c <__aeabi_dcmpge>
 8002184:	1e03      	subs	r3, r0, #0
 8002186:	d003      	beq.n	8002190 <arbitrate_acceleration+0x198>
 8002188:	4b2f      	ldr	r3, [pc, #188]	; (8002248 <arbitrate_acceleration+0x250>)
 800218a:	2205      	movs	r2, #5
 800218c:	701a      	strb	r2, [r3, #0]
 800218e:	e04b      	b.n	8002228 <arbitrate_acceleration+0x230>
 8002190:	2200      	movs	r2, #0
 8002192:	4b3a      	ldr	r3, [pc, #232]	; (800227c <arbitrate_acceleration+0x284>)
 8002194:	6838      	ldr	r0, [r7, #0]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	f7fe f960 	bl	800045c <__aeabi_dcmpge>
 800219c:	1e03      	subs	r3, r0, #0
 800219e:	d003      	beq.n	80021a8 <arbitrate_acceleration+0x1b0>
 80021a0:	4b29      	ldr	r3, [pc, #164]	; (8002248 <arbitrate_acceleration+0x250>)
 80021a2:	2204      	movs	r2, #4
 80021a4:	701a      	strb	r2, [r3, #0]
 80021a6:	e03f      	b.n	8002228 <arbitrate_acceleration+0x230>
 80021a8:	2200      	movs	r2, #0
 80021aa:	4b35      	ldr	r3, [pc, #212]	; (8002280 <arbitrate_acceleration+0x288>)
 80021ac:	6838      	ldr	r0, [r7, #0]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	f7fe f954 	bl	800045c <__aeabi_dcmpge>
 80021b4:	1e03      	subs	r3, r0, #0
 80021b6:	d003      	beq.n	80021c0 <arbitrate_acceleration+0x1c8>
 80021b8:	4b23      	ldr	r3, [pc, #140]	; (8002248 <arbitrate_acceleration+0x250>)
 80021ba:	2203      	movs	r2, #3
 80021bc:	701a      	strb	r2, [r3, #0]
 80021be:	e033      	b.n	8002228 <arbitrate_acceleration+0x230>
 80021c0:	2200      	movs	r2, #0
 80021c2:	4b30      	ldr	r3, [pc, #192]	; (8002284 <arbitrate_acceleration+0x28c>)
 80021c4:	6838      	ldr	r0, [r7, #0]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	f7fe f948 	bl	800045c <__aeabi_dcmpge>
 80021cc:	1e03      	subs	r3, r0, #0
 80021ce:	d003      	beq.n	80021d8 <arbitrate_acceleration+0x1e0>
 80021d0:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <arbitrate_acceleration+0x250>)
 80021d2:	2202      	movs	r2, #2
 80021d4:	701a      	strb	r2, [r3, #0]
 80021d6:	e027      	b.n	8002228 <arbitrate_acceleration+0x230>
 80021d8:	2200      	movs	r2, #0
 80021da:	4b2b      	ldr	r3, [pc, #172]	; (8002288 <arbitrate_acceleration+0x290>)
 80021dc:	6838      	ldr	r0, [r7, #0]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	f7fe f93c 	bl	800045c <__aeabi_dcmpge>
 80021e4:	1e03      	subs	r3, r0, #0
 80021e6:	d003      	beq.n	80021f0 <arbitrate_acceleration+0x1f8>
 80021e8:	4b17      	ldr	r3, [pc, #92]	; (8002248 <arbitrate_acceleration+0x250>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	701a      	strb	r2, [r3, #0]
 80021ee:	e01b      	b.n	8002228 <arbitrate_acceleration+0x230>
 80021f0:	4b15      	ldr	r3, [pc, #84]	; (8002248 <arbitrate_acceleration+0x250>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	e017      	b.n	8002228 <arbitrate_acceleration+0x230>
 80021f8:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <arbitrate_acceleration+0x238>)
 80021fa:	6998      	ldr	r0, [r3, #24]
 80021fc:	69d9      	ldr	r1, [r3, #28]
 80021fe:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <arbitrate_acceleration+0x23c>)
 8002200:	69dc      	ldr	r4, [r3, #28]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	001a      	movs	r2, r3
 8002206:	0023      	movs	r3, r4
 8002208:	f7ff f856 	bl	80012b8 <__aeabi_dsub>
 800220c:	0003      	movs	r3, r0
 800220e:	000c      	movs	r4, r1
 8002210:	603b      	str	r3, [r7, #0]
 8002212:	607c      	str	r4, [r7, #4]
 8002214:	6838      	ldr	r0, [r7, #0]
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	f7ff fbea 	bl	80019f0 <__aeabi_d2iz>
 800221c:	0003      	movs	r3, r0
 800221e:	b21b      	sxth	r3, r3
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <arbitrate_acceleration+0x250>)
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	e7ff      	b.n	8002228 <arbitrate_acceleration+0x230>
 8002228:	46c0      	nop			; (mov r8, r8)
 800222a:	46bd      	mov	sp, r7
 800222c:	b003      	add	sp, #12
 800222e:	bd90      	pop	{r4, r7, pc}
 8002230:	20000050 	.word	0x20000050
 8002234:	200000a0 	.word	0x200000a0
 8002238:	200000c8 	.word	0x200000c8
 800223c:	20001a42 	.word	0x20001a42
 8002240:	405fc000 	.word	0x405fc000
 8002244:	405c4000 	.word	0x405c4000
 8002248:	20001a40 	.word	0x20001a40
 800224c:	40588000 	.word	0x40588000
 8002250:	4054c000 	.word	0x4054c000
 8002254:	40510000 	.word	0x40510000
 8002258:	404a8000 	.word	0x404a8000
 800225c:	40430000 	.word	0x40430000
 8002260:	40370000 	.word	0x40370000
 8002264:	40200000 	.word	0x40200000
 8002268:	c01c0000 	.word	0xc01c0000
 800226c:	c0360000 	.word	0xc0360000
 8002270:	c0428000 	.word	0xc0428000
 8002274:	c04a0000 	.word	0xc04a0000
 8002278:	c050c000 	.word	0xc050c000
 800227c:	c0548000 	.word	0xc0548000
 8002280:	c0584000 	.word	0xc0584000
 8002284:	c05c0000 	.word	0xc05c0000
 8002288:	c05fc000 	.word	0xc05fc000

0800228c <arbitrate_speed>:
 800228c:	b5b0      	push	{r4, r5, r7, lr}
 800228e:	af00      	add	r7, sp, #0
 8002290:	4b63      	ldr	r3, [pc, #396]	; (8002420 <arbitrate_speed+0x194>)
 8002292:	2225      	movs	r2, #37	; 0x25
 8002294:	5c9b      	ldrb	r3, [r3, r2]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d107      	bne.n	80022aa <arbitrate_speed+0x1e>
 800229a:	4b62      	ldr	r3, [pc, #392]	; (8002424 <arbitrate_speed+0x198>)
 800229c:	2225      	movs	r2, #37	; 0x25
 800229e:	5c9b      	ldrb	r3, [r3, r2]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <arbitrate_speed+0x1e>
 80022a4:	4b60      	ldr	r3, [pc, #384]	; (8002428 <arbitrate_speed+0x19c>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	4b5f      	ldr	r3, [pc, #380]	; (8002428 <arbitrate_speed+0x19c>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d000      	beq.n	80022b4 <arbitrate_speed+0x28>
 80022b2:	e0b2      	b.n	800241a <arbitrate_speed+0x18e>
 80022b4:	4b5a      	ldr	r3, [pc, #360]	; (8002420 <arbitrate_speed+0x194>)
 80022b6:	2225      	movs	r2, #37	; 0x25
 80022b8:	5c9b      	ldrb	r3, [r3, r2]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10c      	bne.n	80022d8 <arbitrate_speed+0x4c>
 80022be:	4b59      	ldr	r3, [pc, #356]	; (8002424 <arbitrate_speed+0x198>)
 80022c0:	69dc      	ldr	r4, [r3, #28]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	0018      	movs	r0, r3
 80022c6:	0021      	movs	r1, r4
 80022c8:	f7ff fb92 	bl	80019f0 <__aeabi_d2iz>
 80022cc:	0003      	movs	r3, r0
 80022ce:	b21b      	sxth	r3, r3
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	4b56      	ldr	r3, [pc, #344]	; (800242c <arbitrate_speed+0x1a0>)
 80022d4:	701a      	strb	r2, [r3, #0]
 80022d6:	e01d      	b.n	8002314 <arbitrate_speed+0x88>
 80022d8:	4b52      	ldr	r3, [pc, #328]	; (8002424 <arbitrate_speed+0x198>)
 80022da:	2225      	movs	r2, #37	; 0x25
 80022dc:	5c9b      	ldrb	r3, [r3, r2]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10c      	bne.n	80022fc <arbitrate_speed+0x70>
 80022e2:	4b4f      	ldr	r3, [pc, #316]	; (8002420 <arbitrate_speed+0x194>)
 80022e4:	69dc      	ldr	r4, [r3, #28]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	0018      	movs	r0, r3
 80022ea:	0021      	movs	r1, r4
 80022ec:	f7ff fb80 	bl	80019f0 <__aeabi_d2iz>
 80022f0:	0003      	movs	r3, r0
 80022f2:	b21b      	sxth	r3, r3
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4b4d      	ldr	r3, [pc, #308]	; (800242c <arbitrate_speed+0x1a0>)
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	e00b      	b.n	8002314 <arbitrate_speed+0x88>
 80022fc:	4b49      	ldr	r3, [pc, #292]	; (8002424 <arbitrate_speed+0x198>)
 80022fe:	69dc      	ldr	r4, [r3, #28]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	0018      	movs	r0, r3
 8002304:	0021      	movs	r1, r4
 8002306:	f7ff fb73 	bl	80019f0 <__aeabi_d2iz>
 800230a:	0003      	movs	r3, r0
 800230c:	b21b      	sxth	r3, r3
 800230e:	b2da      	uxtb	r2, r3
 8002310:	4b46      	ldr	r3, [pc, #280]	; (800242c <arbitrate_speed+0x1a0>)
 8002312:	701a      	strb	r2, [r3, #0]
 8002314:	4b45      	ldr	r3, [pc, #276]	; (800242c <arbitrate_speed+0x1a0>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b4f      	cmp	r3, #79	; 0x4f
 800231a:	d903      	bls.n	8002324 <arbitrate_speed+0x98>
 800231c:	4b43      	ldr	r3, [pc, #268]	; (800242c <arbitrate_speed+0x1a0>)
 800231e:	2211      	movs	r2, #17
 8002320:	701a      	strb	r2, [r3, #0]
 8002322:	e07a      	b.n	800241a <arbitrate_speed+0x18e>
 8002324:	4b41      	ldr	r3, [pc, #260]	; (800242c <arbitrate_speed+0x1a0>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b4a      	cmp	r3, #74	; 0x4a
 800232a:	d903      	bls.n	8002334 <arbitrate_speed+0xa8>
 800232c:	4b3f      	ldr	r3, [pc, #252]	; (800242c <arbitrate_speed+0x1a0>)
 800232e:	2210      	movs	r2, #16
 8002330:	701a      	strb	r2, [r3, #0]
 8002332:	e072      	b.n	800241a <arbitrate_speed+0x18e>
 8002334:	4b3d      	ldr	r3, [pc, #244]	; (800242c <arbitrate_speed+0x1a0>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b45      	cmp	r3, #69	; 0x45
 800233a:	d903      	bls.n	8002344 <arbitrate_speed+0xb8>
 800233c:	4b3b      	ldr	r3, [pc, #236]	; (800242c <arbitrate_speed+0x1a0>)
 800233e:	220f      	movs	r2, #15
 8002340:	701a      	strb	r2, [r3, #0]
 8002342:	e06a      	b.n	800241a <arbitrate_speed+0x18e>
 8002344:	4b39      	ldr	r3, [pc, #228]	; (800242c <arbitrate_speed+0x1a0>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b40      	cmp	r3, #64	; 0x40
 800234a:	d903      	bls.n	8002354 <arbitrate_speed+0xc8>
 800234c:	4b37      	ldr	r3, [pc, #220]	; (800242c <arbitrate_speed+0x1a0>)
 800234e:	220e      	movs	r2, #14
 8002350:	701a      	strb	r2, [r3, #0]
 8002352:	e062      	b.n	800241a <arbitrate_speed+0x18e>
 8002354:	4b35      	ldr	r3, [pc, #212]	; (800242c <arbitrate_speed+0x1a0>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b3b      	cmp	r3, #59	; 0x3b
 800235a:	d903      	bls.n	8002364 <arbitrate_speed+0xd8>
 800235c:	4b33      	ldr	r3, [pc, #204]	; (800242c <arbitrate_speed+0x1a0>)
 800235e:	220d      	movs	r2, #13
 8002360:	701a      	strb	r2, [r3, #0]
 8002362:	e05a      	b.n	800241a <arbitrate_speed+0x18e>
 8002364:	4b31      	ldr	r3, [pc, #196]	; (800242c <arbitrate_speed+0x1a0>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b36      	cmp	r3, #54	; 0x36
 800236a:	d903      	bls.n	8002374 <arbitrate_speed+0xe8>
 800236c:	4b2f      	ldr	r3, [pc, #188]	; (800242c <arbitrate_speed+0x1a0>)
 800236e:	220c      	movs	r2, #12
 8002370:	701a      	strb	r2, [r3, #0]
 8002372:	e052      	b.n	800241a <arbitrate_speed+0x18e>
 8002374:	4b2d      	ldr	r3, [pc, #180]	; (800242c <arbitrate_speed+0x1a0>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b31      	cmp	r3, #49	; 0x31
 800237a:	d903      	bls.n	8002384 <arbitrate_speed+0xf8>
 800237c:	4b2b      	ldr	r3, [pc, #172]	; (800242c <arbitrate_speed+0x1a0>)
 800237e:	220b      	movs	r2, #11
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	e04a      	b.n	800241a <arbitrate_speed+0x18e>
 8002384:	4b29      	ldr	r3, [pc, #164]	; (800242c <arbitrate_speed+0x1a0>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b2c      	cmp	r3, #44	; 0x2c
 800238a:	d903      	bls.n	8002394 <arbitrate_speed+0x108>
 800238c:	4b27      	ldr	r3, [pc, #156]	; (800242c <arbitrate_speed+0x1a0>)
 800238e:	220a      	movs	r2, #10
 8002390:	701a      	strb	r2, [r3, #0]
 8002392:	e042      	b.n	800241a <arbitrate_speed+0x18e>
 8002394:	4b25      	ldr	r3, [pc, #148]	; (800242c <arbitrate_speed+0x1a0>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b27      	cmp	r3, #39	; 0x27
 800239a:	d903      	bls.n	80023a4 <arbitrate_speed+0x118>
 800239c:	4b23      	ldr	r3, [pc, #140]	; (800242c <arbitrate_speed+0x1a0>)
 800239e:	2209      	movs	r2, #9
 80023a0:	701a      	strb	r2, [r3, #0]
 80023a2:	e03a      	b.n	800241a <arbitrate_speed+0x18e>
 80023a4:	4b21      	ldr	r3, [pc, #132]	; (800242c <arbitrate_speed+0x1a0>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b22      	cmp	r3, #34	; 0x22
 80023aa:	d903      	bls.n	80023b4 <arbitrate_speed+0x128>
 80023ac:	4b1f      	ldr	r3, [pc, #124]	; (800242c <arbitrate_speed+0x1a0>)
 80023ae:	2208      	movs	r2, #8
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	e032      	b.n	800241a <arbitrate_speed+0x18e>
 80023b4:	4b1d      	ldr	r3, [pc, #116]	; (800242c <arbitrate_speed+0x1a0>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b1d      	cmp	r3, #29
 80023ba:	d903      	bls.n	80023c4 <arbitrate_speed+0x138>
 80023bc:	4b1b      	ldr	r3, [pc, #108]	; (800242c <arbitrate_speed+0x1a0>)
 80023be:	2207      	movs	r2, #7
 80023c0:	701a      	strb	r2, [r3, #0]
 80023c2:	e02a      	b.n	800241a <arbitrate_speed+0x18e>
 80023c4:	4b19      	ldr	r3, [pc, #100]	; (800242c <arbitrate_speed+0x1a0>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b18      	cmp	r3, #24
 80023ca:	d903      	bls.n	80023d4 <arbitrate_speed+0x148>
 80023cc:	4b17      	ldr	r3, [pc, #92]	; (800242c <arbitrate_speed+0x1a0>)
 80023ce:	2206      	movs	r2, #6
 80023d0:	701a      	strb	r2, [r3, #0]
 80023d2:	e022      	b.n	800241a <arbitrate_speed+0x18e>
 80023d4:	4b15      	ldr	r3, [pc, #84]	; (800242c <arbitrate_speed+0x1a0>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b13      	cmp	r3, #19
 80023da:	d903      	bls.n	80023e4 <arbitrate_speed+0x158>
 80023dc:	4b13      	ldr	r3, [pc, #76]	; (800242c <arbitrate_speed+0x1a0>)
 80023de:	2205      	movs	r2, #5
 80023e0:	701a      	strb	r2, [r3, #0]
 80023e2:	e01a      	b.n	800241a <arbitrate_speed+0x18e>
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <arbitrate_speed+0x1a0>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b0e      	cmp	r3, #14
 80023ea:	d903      	bls.n	80023f4 <arbitrate_speed+0x168>
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <arbitrate_speed+0x1a0>)
 80023ee:	2204      	movs	r2, #4
 80023f0:	701a      	strb	r2, [r3, #0]
 80023f2:	e012      	b.n	800241a <arbitrate_speed+0x18e>
 80023f4:	4b0d      	ldr	r3, [pc, #52]	; (800242c <arbitrate_speed+0x1a0>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b09      	cmp	r3, #9
 80023fa:	d903      	bls.n	8002404 <arbitrate_speed+0x178>
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <arbitrate_speed+0x1a0>)
 80023fe:	2203      	movs	r2, #3
 8002400:	701a      	strb	r2, [r3, #0]
 8002402:	e00a      	b.n	800241a <arbitrate_speed+0x18e>
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <arbitrate_speed+0x1a0>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b04      	cmp	r3, #4
 800240a:	d903      	bls.n	8002414 <arbitrate_speed+0x188>
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <arbitrate_speed+0x1a0>)
 800240e:	2202      	movs	r2, #2
 8002410:	701a      	strb	r2, [r3, #0]
 8002412:	e002      	b.n	800241a <arbitrate_speed+0x18e>
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <arbitrate_speed+0x1a0>)
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	46bd      	mov	sp, r7
 800241e:	bdb0      	pop	{r4, r5, r7, pc}
 8002420:	20000028 	.word	0x20000028
 8002424:	20000000 	.word	0x20000000
 8002428:	20001a42 	.word	0x20001a42
 800242c:	20001a4a 	.word	0x20001a4a

08002430 <arbitrate_steering_angle>:
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
 8002434:	4b29      	ldr	r3, [pc, #164]	; (80024dc <arbitrate_steering_angle+0xac>)
 8002436:	2225      	movs	r2, #37	; 0x25
 8002438:	5c9b      	ldrb	r3, [r3, r2]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d102      	bne.n	8002444 <arbitrate_steering_angle+0x14>
 800243e:	4b28      	ldr	r3, [pc, #160]	; (80024e0 <arbitrate_steering_angle+0xb0>)
 8002440:	2201      	movs	r2, #1
 8002442:	701a      	strb	r2, [r3, #0]
 8002444:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <arbitrate_steering_angle+0xb0>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d143      	bne.n	80024d4 <arbitrate_steering_angle+0xa4>
 800244c:	4b23      	ldr	r3, [pc, #140]	; (80024dc <arbitrate_steering_angle+0xac>)
 800244e:	6998      	ldr	r0, [r3, #24]
 8002450:	69d9      	ldr	r1, [r3, #28]
 8002452:	2200      	movs	r2, #0
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <arbitrate_steering_angle+0xb4>)
 8002456:	f7fe f801 	bl	800045c <__aeabi_dcmpge>
 800245a:	1e03      	subs	r3, r0, #0
 800245c:	d003      	beq.n	8002466 <arbitrate_steering_angle+0x36>
 800245e:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <arbitrate_steering_angle+0xb8>)
 8002460:	2204      	movs	r2, #4
 8002462:	701a      	strb	r2, [r3, #0]
 8002464:	e036      	b.n	80024d4 <arbitrate_steering_angle+0xa4>
 8002466:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <arbitrate_steering_angle+0xac>)
 8002468:	6998      	ldr	r0, [r3, #24]
 800246a:	69d9      	ldr	r1, [r3, #28]
 800246c:	2200      	movs	r2, #0
 800246e:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <arbitrate_steering_angle+0xbc>)
 8002470:	f7fd fff4 	bl	800045c <__aeabi_dcmpge>
 8002474:	1e03      	subs	r3, r0, #0
 8002476:	d003      	beq.n	8002480 <arbitrate_steering_angle+0x50>
 8002478:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <arbitrate_steering_angle+0xb8>)
 800247a:	2203      	movs	r2, #3
 800247c:	701a      	strb	r2, [r3, #0]
 800247e:	e029      	b.n	80024d4 <arbitrate_steering_angle+0xa4>
 8002480:	4b16      	ldr	r3, [pc, #88]	; (80024dc <arbitrate_steering_angle+0xac>)
 8002482:	6998      	ldr	r0, [r3, #24]
 8002484:	69d9      	ldr	r1, [r3, #28]
 8002486:	2200      	movs	r2, #0
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <arbitrate_steering_angle+0xc0>)
 800248a:	f7fd ffe7 	bl	800045c <__aeabi_dcmpge>
 800248e:	1e03      	subs	r3, r0, #0
 8002490:	d003      	beq.n	800249a <arbitrate_steering_angle+0x6a>
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <arbitrate_steering_angle+0xb8>)
 8002494:	2202      	movs	r2, #2
 8002496:	701a      	strb	r2, [r3, #0]
 8002498:	e01c      	b.n	80024d4 <arbitrate_steering_angle+0xa4>
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <arbitrate_steering_angle+0xac>)
 800249c:	6998      	ldr	r0, [r3, #24]
 800249e:	69d9      	ldr	r1, [r3, #28]
 80024a0:	2200      	movs	r2, #0
 80024a2:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <arbitrate_steering_angle+0xc4>)
 80024a4:	f7fd ffda 	bl	800045c <__aeabi_dcmpge>
 80024a8:	1e03      	subs	r3, r0, #0
 80024aa:	d003      	beq.n	80024b4 <arbitrate_steering_angle+0x84>
 80024ac:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <arbitrate_steering_angle+0xb8>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	e00f      	b.n	80024d4 <arbitrate_steering_angle+0xa4>
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <arbitrate_steering_angle+0xac>)
 80024b6:	6998      	ldr	r0, [r3, #24]
 80024b8:	69d9      	ldr	r1, [r3, #28]
 80024ba:	2200      	movs	r2, #0
 80024bc:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <arbitrate_steering_angle+0xc8>)
 80024be:	f7fd ffcd 	bl	800045c <__aeabi_dcmpge>
 80024c2:	1e03      	subs	r3, r0, #0
 80024c4:	d003      	beq.n	80024ce <arbitrate_steering_angle+0x9e>
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <arbitrate_steering_angle+0xb8>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
 80024cc:	e002      	b.n	80024d4 <arbitrate_steering_angle+0xa4>
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <arbitrate_steering_angle+0xb8>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
 80024d4:	46c0      	nop			; (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	20000078 	.word	0x20000078
 80024e0:	20001a42 	.word	0x20001a42
 80024e4:	40520000 	.word	0x40520000
 80024e8:	20002c39 	.word	0x20002c39
 80024ec:	404b0000 	.word	0x404b0000
 80024f0:	c04b0000 	.word	0xc04b0000
 80024f4:	c0520000 	.word	0xc0520000
 80024f8:	c0568000 	.word	0xc0568000

080024fc <output_angles>:
 80024fc:	b5b0      	push	{r4, r5, r7, lr}
 80024fe:	b090      	sub	sp, #64	; 0x40
 8002500:	af10      	add	r7, sp, #64	; 0x40
 8002502:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <output_angles+0xa8>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	4c28      	ldr	r4, [pc, #160]	; (80025a8 <output_angles+0xac>)
 8002508:	930e      	str	r3, [sp, #56]	; 0x38
 800250a:	4b28      	ldr	r3, [pc, #160]	; (80025ac <output_angles+0xb0>)
 800250c:	930d      	str	r3, [sp, #52]	; 0x34
 800250e:	2300      	movs	r3, #0
 8002510:	930c      	str	r3, [sp, #48]	; 0x30
 8002512:	466b      	mov	r3, sp
 8002514:	001a      	movs	r2, r3
 8002516:	0023      	movs	r3, r4
 8002518:	3310      	adds	r3, #16
 800251a:	cb23      	ldmia	r3!, {r0, r1, r5}
 800251c:	c223      	stmia	r2!, {r0, r1, r5}
 800251e:	cb23      	ldmia	r3!, {r0, r1, r5}
 8002520:	c223      	stmia	r2!, {r0, r1, r5}
 8002522:	cb23      	ldmia	r3!, {r0, r1, r5}
 8002524:	c223      	stmia	r2!, {r0, r1, r5}
 8002526:	cb23      	ldmia	r3!, {r0, r1, r5}
 8002528:	c223      	stmia	r2!, {r0, r1, r5}
 800252a:	6820      	ldr	r0, [r4, #0]
 800252c:	6861      	ldr	r1, [r4, #4]
 800252e:	68a2      	ldr	r2, [r4, #8]
 8002530:	68e3      	ldr	r3, [r4, #12]
 8002532:	f000 f841 	bl	80025b8 <setPWM>
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <output_angles+0xb4>)
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	4c1b      	ldr	r4, [pc, #108]	; (80025a8 <output_angles+0xac>)
 800253c:	930e      	str	r3, [sp, #56]	; 0x38
 800253e:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <output_angles+0xb0>)
 8002540:	930d      	str	r3, [sp, #52]	; 0x34
 8002542:	2304      	movs	r3, #4
 8002544:	930c      	str	r3, [sp, #48]	; 0x30
 8002546:	466b      	mov	r3, sp
 8002548:	001a      	movs	r2, r3
 800254a:	0023      	movs	r3, r4
 800254c:	3310      	adds	r3, #16
 800254e:	cb23      	ldmia	r3!, {r0, r1, r5}
 8002550:	c223      	stmia	r2!, {r0, r1, r5}
 8002552:	cb23      	ldmia	r3!, {r0, r1, r5}
 8002554:	c223      	stmia	r2!, {r0, r1, r5}
 8002556:	cb23      	ldmia	r3!, {r0, r1, r5}
 8002558:	c223      	stmia	r2!, {r0, r1, r5}
 800255a:	cb23      	ldmia	r3!, {r0, r1, r5}
 800255c:	c223      	stmia	r2!, {r0, r1, r5}
 800255e:	6820      	ldr	r0, [r4, #0]
 8002560:	6861      	ldr	r1, [r4, #4]
 8002562:	68a2      	ldr	r2, [r4, #8]
 8002564:	68e3      	ldr	r3, [r4, #12]
 8002566:	f000 f827 	bl	80025b8 <setPWM>
 800256a:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <output_angles+0xb8>)
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	4c0e      	ldr	r4, [pc, #56]	; (80025a8 <output_angles+0xac>)
 8002570:	930e      	str	r3, [sp, #56]	; 0x38
 8002572:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <output_angles+0xb0>)
 8002574:	930d      	str	r3, [sp, #52]	; 0x34
 8002576:	2308      	movs	r3, #8
 8002578:	930c      	str	r3, [sp, #48]	; 0x30
 800257a:	466b      	mov	r3, sp
 800257c:	001a      	movs	r2, r3
 800257e:	0023      	movs	r3, r4
 8002580:	3310      	adds	r3, #16
 8002582:	cb23      	ldmia	r3!, {r0, r1, r5}
 8002584:	c223      	stmia	r2!, {r0, r1, r5}
 8002586:	cb23      	ldmia	r3!, {r0, r1, r5}
 8002588:	c223      	stmia	r2!, {r0, r1, r5}
 800258a:	cb23      	ldmia	r3!, {r0, r1, r5}
 800258c:	c223      	stmia	r2!, {r0, r1, r5}
 800258e:	cb23      	ldmia	r3!, {r0, r1, r5}
 8002590:	c223      	stmia	r2!, {r0, r1, r5}
 8002592:	6820      	ldr	r0, [r4, #0]
 8002594:	6861      	ldr	r1, [r4, #4]
 8002596:	68a2      	ldr	r2, [r4, #8]
 8002598:	68e3      	ldr	r3, [r4, #12]
 800259a:	f000 f80d 	bl	80025b8 <setPWM>
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bdb0      	pop	{r4, r5, r7, pc}
 80025a4:	20001a44 	.word	0x20001a44
 80025a8:	20003334 	.word	0x20003334
 80025ac:	0000ea60 	.word	0x0000ea60
 80025b0:	20001a48 	.word	0x20001a48
 80025b4:	200020e8 	.word	0x200020e8

080025b8 <setPWM>:
 80025b8:	b084      	sub	sp, #16
 80025ba:	b5b0      	push	{r4, r5, r7, lr}
 80025bc:	b088      	sub	sp, #32
 80025be:	af00      	add	r7, sp, #0
 80025c0:	2430      	movs	r4, #48	; 0x30
 80025c2:	0025      	movs	r5, r4
 80025c4:	193c      	adds	r4, r7, r4
 80025c6:	6020      	str	r0, [r4, #0]
 80025c8:	6061      	str	r1, [r4, #4]
 80025ca:	60a2      	str	r2, [r4, #8]
 80025cc:	60e3      	str	r3, [r4, #12]
 80025ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025d0:	002c      	movs	r4, r5
 80025d2:	193a      	adds	r2, r7, r4
 80025d4:	0019      	movs	r1, r3
 80025d6:	0010      	movs	r0, r2
 80025d8:	f002 fc1c 	bl	8004e14 <HAL_TIM_PWM_Stop>
 80025dc:	2344      	movs	r3, #68	; 0x44
 80025de:	2230      	movs	r2, #48	; 0x30
 80025e0:	4694      	mov	ip, r2
 80025e2:	44bc      	add	ip, r7
 80025e4:	4463      	add	r3, ip
 80025e6:	881a      	ldrh	r2, [r3, #0]
 80025e8:	193b      	adds	r3, r7, r4
 80025ea:	60da      	str	r2, [r3, #12]
 80025ec:	193b      	adds	r3, r7, r4
 80025ee:	0018      	movs	r0, r3
 80025f0:	f002 fb98 	bl	8004d24 <HAL_TIM_PWM_Init>
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	2260      	movs	r2, #96	; 0x60
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	2348      	movs	r3, #72	; 0x48
 80025fc:	2230      	movs	r2, #48	; 0x30
 80025fe:	4694      	mov	ip, r2
 8002600:	44bc      	add	ip, r7
 8002602:	4463      	add	r3, ip
 8002604:	881a      	ldrh	r2, [r3, #0]
 8002606:	1d3b      	adds	r3, r7, #4
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	2200      	movs	r2, #0
 8002614:	611a      	str	r2, [r3, #16]
 8002616:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	1938      	adds	r0, r7, r4
 800261c:	0019      	movs	r1, r3
 800261e:	f002 fd73 	bl	8005108 <HAL_TIM_PWM_ConfigChannel>
 8002622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002624:	193a      	adds	r2, r7, r4
 8002626:	0019      	movs	r1, r3
 8002628:	0010      	movs	r0, r2
 800262a:	f002 fba7 	bl	8004d7c <HAL_TIM_PWM_Start>
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	46bd      	mov	sp, r7
 8002632:	b008      	add	sp, #32
 8002634:	bcb0      	pop	{r4, r5, r7}
 8002636:	bc08      	pop	{r3}
 8002638:	b004      	add	sp, #16
 800263a:	4718      	bx	r3

0800263c <get_btn_state>:
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	019b      	lsls	r3, r3, #6
 8002644:	4a08      	ldr	r2, [pc, #32]	; (8002668 <get_btn_state+0x2c>)
 8002646:	0019      	movs	r1, r3
 8002648:	0010      	movs	r0, r2
 800264a:	f001 fcbd 	bl	8003fc8 <HAL_GPIO_ReadPin>
 800264e:	1e03      	subs	r3, r0, #0
 8002650:	d103      	bne.n	800265a <get_btn_state+0x1e>
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <get_btn_state+0x30>)
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	e002      	b.n	8002660 <get_btn_state+0x24>
 800265a:	4b04      	ldr	r3, [pc, #16]	; (800266c <get_btn_state+0x30>)
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	48000800 	.word	0x48000800
 800266c:	20001a41 	.word	0x20001a41

08002670 <HAL_CAN_RxFifo0MsgPendingCallback>:
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2100      	movs	r1, #0
 800267c:	0018      	movs	r0, r3
 800267e:	f000 f811 	bl	80026a4 <service_can_rx_hardware>
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	46bd      	mov	sp, r7
 8002686:	b002      	add	sp, #8
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_CAN_RxFifo1MsgPendingCallback>:
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2101      	movs	r1, #1
 8002696:	0018      	movs	r0, r3
 8002698:	f000 f804 	bl	80026a4 <service_can_rx_hardware>
 800269c:	46c0      	nop			; (mov r8, r8)
 800269e:	46bd      	mov	sp, r7
 80026a0:	b002      	add	sp, #8
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <service_can_rx_hardware>:
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
 80026ae:	e032      	b.n	8002716 <service_can_rx_hardware+0x72>
 80026b0:	4b21      	ldr	r3, [pc, #132]	; (8002738 <service_can_rx_hardware+0x94>)
 80026b2:	799a      	ldrb	r2, [r3, #6]
 80026b4:	4b20      	ldr	r3, [pc, #128]	; (8002738 <service_can_rx_hardware+0x94>)
 80026b6:	0011      	movs	r1, r2
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 f906 	bl	80028ca <get_from_buffer>
 80026be:	0003      	movs	r3, r0
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	3306      	adds	r3, #6
 80026c6:	2208      	movs	r2, #8
 80026c8:	18ba      	adds	r2, r7, r2
 80026ca:	6839      	ldr	r1, [r7, #0]
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 ff05 	bl	80034dc <HAL_CAN_GetRxMessage>
 80026d2:	1e03      	subs	r3, r0, #0
 80026d4:	d004      	beq.n	80026e0 <service_can_rx_hardware+0x3c>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026da:	4b18      	ldr	r3, [pc, #96]	; (800273c <service_can_rx_hardware+0x98>)
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	e028      	b.n	8002732 <service_can_rx_hardware+0x8e>
 80026e0:	4b15      	ldr	r3, [pc, #84]	; (8002738 <service_can_rx_hardware+0x94>)
 80026e2:	799b      	ldrb	r3, [r3, #6]
 80026e4:	3301      	adds	r3, #1
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	4b13      	ldr	r3, [pc, #76]	; (8002738 <service_can_rx_hardware+0x94>)
 80026ea:	719a      	strb	r2, [r3, #6]
 80026ec:	2108      	movs	r1, #8
 80026ee:	187b      	adds	r3, r7, r1
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	711a      	strb	r2, [r3, #4]
 80026f8:	187b      	adds	r3, r7, r1
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	187b      	adds	r3, r7, r1
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	715a      	strb	r2, [r3, #5]
 800270a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	0011      	movs	r1, r2
 8002710:	0018      	movs	r0, r3
 8002712:	f000 f84f 	bl	80027b4 <rout_can_message>
 8002716:	4b08      	ldr	r3, [pc, #32]	; (8002738 <service_can_rx_hardware+0x94>)
 8002718:	0018      	movs	r0, r3
 800271a:	f000 f8c5 	bl	80028a8 <is_full>
 800271e:	1e03      	subs	r3, r0, #0
 8002720:	d107      	bne.n	8002732 <service_can_rx_hardware+0x8e>
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	0011      	movs	r1, r2
 8002728:	0018      	movs	r0, r3
 800272a:	f000 fff3 	bl	8003714 <HAL_CAN_GetRxFifoFillLevel>
 800272e:	1e03      	subs	r3, r0, #0
 8002730:	d1be      	bne.n	80026b0 <service_can_rx_hardware+0xc>
 8002732:	46bd      	mov	sp, r7
 8002734:	b00a      	add	sp, #40	; 0x28
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20003060 	.word	0x20003060
 800273c:	20000138 	.word	0x20000138

08002740 <choose_tx_buffer_from_hcan>:
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <choose_tx_buffer_from_hcan+0x24>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	429a      	cmp	r2, r3
 8002750:	d102      	bne.n	8002758 <choose_tx_buffer_from_hcan+0x18>
 8002752:	4b04      	ldr	r3, [pc, #16]	; (8002764 <choose_tx_buffer_from_hcan+0x24>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	e001      	b.n	800275c <choose_tx_buffer_from_hcan+0x1c>
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <choose_tx_buffer_from_hcan+0x28>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	0018      	movs	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	b002      	add	sp, #8
 8002762:	bd80      	pop	{r7, pc}
 8002764:	200032fc 	.word	0x200032fc
 8002768:	20003280 	.word	0x20003280

0800276c <choose_tx_buffer_from_dest_module>:
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	0d9b      	lsrs	r3, r3, #22
 800277a:	b2da      	uxtb	r2, r3
 800277c:	200f      	movs	r0, #15
 800277e:	183b      	adds	r3, r7, r0
 8002780:	213f      	movs	r1, #63	; 0x3f
 8002782:	400a      	ands	r2, r1
 8002784:	701a      	strb	r2, [r3, #0]
 8002786:	183b      	adds	r3, r7, r0
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	4a07      	ldr	r2, [pc, #28]	; (80027a8 <choose_tx_buffer_from_dest_module+0x3c>)
 800278c:	5cd2      	ldrb	r2, [r2, r3]
 800278e:	4b07      	ldr	r3, [pc, #28]	; (80027ac <choose_tx_buffer_from_dest_module+0x40>)
 8002790:	7a1b      	ldrb	r3, [r3, #8]
 8002792:	429a      	cmp	r2, r3
 8002794:	d102      	bne.n	800279c <choose_tx_buffer_from_dest_module+0x30>
 8002796:	4b05      	ldr	r3, [pc, #20]	; (80027ac <choose_tx_buffer_from_dest_module+0x40>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	e001      	b.n	80027a0 <choose_tx_buffer_from_dest_module+0x34>
 800279c:	4b04      	ldr	r3, [pc, #16]	; (80027b0 <choose_tx_buffer_from_dest_module+0x44>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	0018      	movs	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b004      	add	sp, #16
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	200000f0 	.word	0x200000f0
 80027ac:	200032fc 	.word	0x200032fc
 80027b0:	20003280 	.word	0x20003280

080027b4 <rout_can_message>:
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	0d9b      	lsrs	r3, r3, #22
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	240f      	movs	r4, #15
 80027c8:	193b      	adds	r3, r7, r4
 80027ca:	213f      	movs	r1, #63	; 0x3f
 80027cc:	400a      	ands	r2, r1
 80027ce:	701a      	strb	r2, [r3, #0]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	0018      	movs	r0, r3
 80027d4:	f7ff ffca 	bl	800276c <choose_tx_buffer_from_dest_module>
 80027d8:	0003      	movs	r3, r0
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	193b      	adds	r3, r7, r4
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d128      	bne.n	8002836 <rout_can_message+0x82>
 80027e4:	4b2c      	ldr	r3, [pc, #176]	; (8002898 <rout_can_message+0xe4>)
 80027e6:	0018      	movs	r0, r3
 80027e8:	f000 f85e 	bl	80028a8 <is_full>
 80027ec:	1e03      	subs	r3, r0, #0
 80027ee:	d10d      	bne.n	800280c <rout_can_message+0x58>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	0018      	movs	r0, r3
 80027f4:	f7ff ffa4 	bl	8002740 <choose_tx_buffer_from_hcan>
 80027f8:	0002      	movs	r2, r0
 80027fa:	4b27      	ldr	r3, [pc, #156]	; (8002898 <rout_can_message+0xe4>)
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d005      	beq.n	800280c <rout_can_message+0x58>
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	4b25      	ldr	r3, [pc, #148]	; (8002898 <rout_can_message+0xe4>)
 8002804:	0011      	movs	r1, r2
 8002806:	0018      	movs	r0, r3
 8002808:	f000 f87b 	bl	8002902 <add_message_to_back>
 800280c:	4b23      	ldr	r3, [pc, #140]	; (800289c <rout_can_message+0xe8>)
 800280e:	0018      	movs	r0, r3
 8002810:	f000 f84a 	bl	80028a8 <is_full>
 8002814:	1e03      	subs	r3, r0, #0
 8002816:	d137      	bne.n	8002888 <rout_can_message+0xd4>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	0018      	movs	r0, r3
 800281c:	f7ff ff90 	bl	8002740 <choose_tx_buffer_from_hcan>
 8002820:	0002      	movs	r2, r0
 8002822:	4b1e      	ldr	r3, [pc, #120]	; (800289c <rout_can_message+0xe8>)
 8002824:	429a      	cmp	r2, r3
 8002826:	d02f      	beq.n	8002888 <rout_can_message+0xd4>
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	4b1c      	ldr	r3, [pc, #112]	; (800289c <rout_can_message+0xe8>)
 800282c:	0011      	movs	r1, r2
 800282e:	0018      	movs	r0, r3
 8002830:	f000 f867 	bl	8002902 <add_message_to_back>
 8002834:	e028      	b.n	8002888 <rout_can_message+0xd4>
 8002836:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <rout_can_message+0xec>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	220f      	movs	r2, #15
 800283c:	18ba      	adds	r2, r7, r2
 800283e:	7812      	ldrb	r2, [r2, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d023      	beq.n	800288c <rout_can_message+0xd8>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	0018      	movs	r0, r3
 8002848:	f7ff ff7a 	bl	8002740 <choose_tx_buffer_from_hcan>
 800284c:	0002      	movs	r2, r0
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	4293      	cmp	r3, r2
 8002852:	d01d      	beq.n	8002890 <rout_can_message+0xdc>
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	0018      	movs	r0, r3
 8002858:	f000 f826 	bl	80028a8 <is_full>
 800285c:	1e03      	subs	r3, r0, #0
 800285e:	d006      	beq.n	800286e <rout_can_message+0xba>
 8002860:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <rout_can_message+0xf0>)
 8002862:	799b      	ldrb	r3, [r3, #6]
 8002864:	3b01      	subs	r3, #1
 8002866:	b2da      	uxtb	r2, r3
 8002868:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <rout_can_message+0xf0>)
 800286a:	719a      	strb	r2, [r3, #6]
 800286c:	e011      	b.n	8002892 <rout_can_message+0xde>
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	0011      	movs	r1, r2
 8002874:	0018      	movs	r0, r3
 8002876:	f000 f844 	bl	8002902 <add_message_to_back>
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <rout_can_message+0xf0>)
 800287c:	799b      	ldrb	r3, [r3, #6]
 800287e:	3b01      	subs	r3, #1
 8002880:	b2da      	uxtb	r2, r3
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <rout_can_message+0xf0>)
 8002884:	719a      	strb	r2, [r3, #6]
 8002886:	e004      	b.n	8002892 <rout_can_message+0xde>
 8002888:	46c0      	nop			; (mov r8, r8)
 800288a:	e002      	b.n	8002892 <rout_can_message+0xde>
 800288c:	46c0      	nop			; (mov r8, r8)
 800288e:	e000      	b.n	8002892 <rout_can_message+0xde>
 8002890:	46c0      	nop			; (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	b005      	add	sp, #20
 8002896:	bd90      	pop	{r4, r7, pc}
 8002898:	20003294 	.word	0x20003294
 800289c:	20003270 	.word	0x20003270
 80028a0:	200032f0 	.word	0x200032f0
 80028a4:	20003060 	.word	0x20003060

080028a8 <is_full>:
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	799a      	ldrb	r2, [r3, #6]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	791b      	ldrb	r3, [r3, #4]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d301      	bcc.n	80028c0 <is_full+0x18>
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <is_full+0x1a>
 80028c0:	2300      	movs	r3, #0
 80028c2:	0018      	movs	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b002      	add	sp, #8
 80028c8:	bd80      	pop	{r7, pc}

080028ca <get_from_buffer>:
 80028ca:	b590      	push	{r4, r7, lr}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	000a      	movs	r2, r1
 80028d4:	1cfb      	adds	r3, r7, #3
 80028d6:	701a      	strb	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681c      	ldr	r4, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	795b      	ldrb	r3, [r3, #5]
 80028e0:	001a      	movs	r2, r3
 80028e2:	1cfb      	adds	r3, r7, #3
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	18d2      	adds	r2, r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	791b      	ldrb	r3, [r3, #4]
 80028ec:	0019      	movs	r1, r3
 80028ee:	0010      	movs	r0, r2
 80028f0:	f7fd fd7a 	bl	80003e8 <__aeabi_idivmod>
 80028f4:	000b      	movs	r3, r1
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	18e3      	adds	r3, r4, r3
 80028fa:	0018      	movs	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b003      	add	sp, #12
 8002900:	bd90      	pop	{r4, r7, pc}

08002902 <add_message_to_back>:
 8002902:	b580      	push	{r7, lr}
 8002904:	b084      	sub	sp, #16
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	6039      	str	r1, [r7, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	799a      	ldrb	r2, [r3, #6]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	0011      	movs	r1, r2
 8002914:	0018      	movs	r0, r3
 8002916:	f7ff ffd8 	bl	80028ca <get_from_buffer>
 800291a:	0003      	movs	r3, r0
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	795a      	ldrb	r2, [r3, #5]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	715a      	strb	r2, [r3, #5]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	791a      	ldrb	r2, [r3, #4]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	711a      	strb	r2, [r3, #4]
 8002936:	230f      	movs	r3, #15
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	e010      	b.n	8002962 <add_message_to_back+0x60>
 8002940:	200f      	movs	r0, #15
 8002942:	183b      	adds	r3, r7, r0
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	183b      	adds	r3, r7, r0
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	6839      	ldr	r1, [r7, #0]
 800294c:	188a      	adds	r2, r1, r2
 800294e:	7991      	ldrb	r1, [r2, #6]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	18d3      	adds	r3, r2, r3
 8002954:	1c0a      	adds	r2, r1, #0
 8002956:	719a      	strb	r2, [r3, #6]
 8002958:	183b      	adds	r3, r7, r0
 800295a:	781a      	ldrb	r2, [r3, #0]
 800295c:	183b      	adds	r3, r7, r0
 800295e:	3201      	adds	r2, #1
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	795b      	ldrb	r3, [r3, #5]
 8002966:	220f      	movs	r2, #15
 8002968:	18ba      	adds	r2, r7, r2
 800296a:	7812      	ldrb	r2, [r2, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d3e7      	bcc.n	8002940 <add_message_to_back+0x3e>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	799b      	ldrb	r3, [r3, #6]
 8002974:	3301      	adds	r3, #1
 8002976:	b2da      	uxtb	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	719a      	strb	r2, [r3, #6]
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	b004      	add	sp, #16
 8002982:	bd80      	pop	{r7, pc}

08002984 <main>:
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
 8002988:	f000 fc7a 	bl	8003280 <HAL_Init>
 800298c:	f000 f84e 	bl	8002a2c <SystemClock_Config>
 8002990:	f000 f9a2 	bl	8002cd8 <MX_GPIO_Init>
 8002994:	f000 f970 	bl	8002c78 <MX_USART2_UART_Init>
 8002998:	f000 f8d2 	bl	8002b40 <MX_TIM3_Init>
 800299c:	f000 f89a 	bl	8002ad4 <MX_CAN_Init>
 80029a0:	f000 f944 	bl	8002c2c <MX_TIM14_Init>
 80029a4:	f7ff f8b4 	bl	8001b10 <ACM_Init>
 80029a8:	f003 fb34 	bl	8006014 <osKernelInitialize>
 80029ac:	4a13      	ldr	r2, [pc, #76]	; (80029fc <main+0x78>)
 80029ae:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <main+0x7c>)
 80029b0:	2100      	movs	r1, #0
 80029b2:	0018      	movs	r0, r3
 80029b4:	f003 fb88 	bl	80060c8 <osThreadNew>
 80029b8:	0002      	movs	r2, r0
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <main+0x80>)
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <main+0x84>)
 80029c0:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <main+0x88>)
 80029c2:	2100      	movs	r1, #0
 80029c4:	0018      	movs	r0, r3
 80029c6:	f003 fb7f 	bl	80060c8 <osThreadNew>
 80029ca:	0002      	movs	r2, r0
 80029cc:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <main+0x8c>)
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	4a10      	ldr	r2, [pc, #64]	; (8002a14 <main+0x90>)
 80029d2:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <main+0x94>)
 80029d4:	2100      	movs	r1, #0
 80029d6:	0018      	movs	r0, r3
 80029d8:	f003 fb76 	bl	80060c8 <osThreadNew>
 80029dc:	0002      	movs	r2, r0
 80029de:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <main+0x98>)
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	4a0f      	ldr	r2, [pc, #60]	; (8002a20 <main+0x9c>)
 80029e4:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <main+0xa0>)
 80029e6:	2100      	movs	r1, #0
 80029e8:	0018      	movs	r0, r3
 80029ea:	f003 fb6d 	bl	80060c8 <osThreadNew>
 80029ee:	0002      	movs	r2, r0
 80029f0:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <main+0xa4>)
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	f003 fb3a 	bl	800606c <osKernelStart>
 80029f8:	e7fe      	b.n	80029f8 <main+0x74>
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	08008584 	.word	0x08008584
 8002a00:	08002dc9 	.word	0x08002dc9
 8002a04:	20003374 	.word	0x20003374
 8002a08:	080085a8 	.word	0x080085a8
 8002a0c:	08002ded 	.word	0x08002ded
 8002a10:	20003378 	.word	0x20003378
 8002a14:	080085cc 	.word	0x080085cc
 8002a18:	08002e01 	.word	0x08002e01
 8002a1c:	2000337c 	.word	0x2000337c
 8002a20:	080085f0 	.word	0x080085f0
 8002a24:	08002e15 	.word	0x08002e15
 8002a28:	20003330 	.word	0x20003330

08002a2c <SystemClock_Config>:
 8002a2c:	b590      	push	{r4, r7, lr}
 8002a2e:	b099      	sub	sp, #100	; 0x64
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	242c      	movs	r4, #44	; 0x2c
 8002a34:	193b      	adds	r3, r7, r4
 8002a36:	0018      	movs	r0, r3
 8002a38:	2334      	movs	r3, #52	; 0x34
 8002a3a:	001a      	movs	r2, r3
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	f005 fd32 	bl	80084a6 <memset>
 8002a42:	231c      	movs	r3, #28
 8002a44:	18fb      	adds	r3, r7, r3
 8002a46:	0018      	movs	r0, r3
 8002a48:	2310      	movs	r3, #16
 8002a4a:	001a      	movs	r2, r3
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	f005 fd2a 	bl	80084a6 <memset>
 8002a52:	003b      	movs	r3, r7
 8002a54:	0018      	movs	r0, r3
 8002a56:	231c      	movs	r3, #28
 8002a58:	001a      	movs	r2, r3
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	f005 fd23 	bl	80084a6 <memset>
 8002a60:	193b      	adds	r3, r7, r4
 8002a62:	2220      	movs	r2, #32
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	193b      	adds	r3, r7, r4
 8002a68:	2201      	movs	r2, #1
 8002a6a:	621a      	str	r2, [r3, #32]
 8002a6c:	193b      	adds	r3, r7, r4
 8002a6e:	2200      	movs	r2, #0
 8002a70:	625a      	str	r2, [r3, #36]	; 0x24
 8002a72:	193b      	adds	r3, r7, r4
 8002a74:	0018      	movs	r0, r3
 8002a76:	f001 fae1 	bl	800403c <HAL_RCC_OscConfig>
 8002a7a:	1e03      	subs	r3, r0, #0
 8002a7c:	d001      	beq.n	8002a82 <SystemClock_Config+0x56>
 8002a7e:	f000 f9e5 	bl	8002e4c <Error_Handler>
 8002a82:	211c      	movs	r1, #28
 8002a84:	187b      	adds	r3, r7, r1
 8002a86:	2207      	movs	r2, #7
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	187b      	adds	r3, r7, r1
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	187b      	adds	r3, r7, r1
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
 8002a96:	187b      	adds	r3, r7, r1
 8002a98:	2200      	movs	r2, #0
 8002a9a:	60da      	str	r2, [r3, #12]
 8002a9c:	187b      	adds	r3, r7, r1
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f001 fe51 	bl	8004748 <HAL_RCC_ClockConfig>
 8002aa6:	1e03      	subs	r3, r0, #0
 8002aa8:	d001      	beq.n	8002aae <SystemClock_Config+0x82>
 8002aaa:	f000 f9cf 	bl	8002e4c <Error_Handler>
 8002aae:	003b      	movs	r3, r7
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	003b      	movs	r3, r7
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	003b      	movs	r3, r7
 8002abc:	0018      	movs	r0, r3
 8002abe:	f001 ffe5 	bl	8004a8c <HAL_RCCEx_PeriphCLKConfig>
 8002ac2:	1e03      	subs	r3, r0, #0
 8002ac4:	d001      	beq.n	8002aca <SystemClock_Config+0x9e>
 8002ac6:	f000 f9c1 	bl	8002e4c <Error_Handler>
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b019      	add	sp, #100	; 0x64
 8002ad0:	bd90      	pop	{r4, r7, pc}
	...

08002ad4 <MX_CAN_Init>:
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <MX_CAN_Init+0x64>)
 8002ada:	4a18      	ldr	r2, [pc, #96]	; (8002b3c <MX_CAN_Init+0x68>)
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <MX_CAN_Init+0x64>)
 8002ae0:	2206      	movs	r2, #6
 8002ae2:	605a      	str	r2, [r3, #4]
 8002ae4:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <MX_CAN_Init+0x64>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <MX_CAN_Init+0x64>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	60da      	str	r2, [r3, #12]
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <MX_CAN_Init+0x64>)
 8002af2:	22a0      	movs	r2, #160	; 0xa0
 8002af4:	02d2      	lsls	r2, r2, #11
 8002af6:	611a      	str	r2, [r3, #16]
 8002af8:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <MX_CAN_Init+0x64>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	615a      	str	r2, [r3, #20]
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <MX_CAN_Init+0x64>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	761a      	strb	r2, [r3, #24]
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <MX_CAN_Init+0x64>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	765a      	strb	r2, [r3, #25]
 8002b0a:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <MX_CAN_Init+0x64>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	769a      	strb	r2, [r3, #26]
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <MX_CAN_Init+0x64>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	76da      	strb	r2, [r3, #27]
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <MX_CAN_Init+0x64>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	771a      	strb	r2, [r3, #28]
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <MX_CAN_Init+0x64>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	775a      	strb	r2, [r3, #29]
 8002b22:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <MX_CAN_Init+0x64>)
 8002b24:	0018      	movs	r0, r3
 8002b26:	f000 fbdb 	bl	80032e0 <HAL_CAN_Init>
 8002b2a:	1e03      	subs	r3, r0, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_CAN_Init+0x5e>
 8002b2e:	f000 f98d 	bl	8002e4c <Error_Handler>
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20003308 	.word	0x20003308
 8002b3c:	40006400 	.word	0x40006400

08002b40 <MX_TIM3_Init>:
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08a      	sub	sp, #40	; 0x28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	2320      	movs	r3, #32
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	2308      	movs	r3, #8
 8002b4e:	001a      	movs	r2, r3
 8002b50:	2100      	movs	r1, #0
 8002b52:	f005 fca8 	bl	80084a6 <memset>
 8002b56:	1d3b      	adds	r3, r7, #4
 8002b58:	0018      	movs	r0, r3
 8002b5a:	231c      	movs	r3, #28
 8002b5c:	001a      	movs	r2, r3
 8002b5e:	2100      	movs	r1, #0
 8002b60:	f005 fca1 	bl	80084a6 <memset>
 8002b64:	4b2e      	ldr	r3, [pc, #184]	; (8002c20 <MX_TIM3_Init+0xe0>)
 8002b66:	4a2f      	ldr	r2, [pc, #188]	; (8002c24 <MX_TIM3_Init+0xe4>)
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	4b2d      	ldr	r3, [pc, #180]	; (8002c20 <MX_TIM3_Init+0xe0>)
 8002b6c:	2210      	movs	r2, #16
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	4b2b      	ldr	r3, [pc, #172]	; (8002c20 <MX_TIM3_Init+0xe0>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	609a      	str	r2, [r3, #8]
 8002b76:	4b2a      	ldr	r3, [pc, #168]	; (8002c20 <MX_TIM3_Init+0xe0>)
 8002b78:	4a2b      	ldr	r2, [pc, #172]	; (8002c28 <MX_TIM3_Init+0xe8>)
 8002b7a:	60da      	str	r2, [r3, #12]
 8002b7c:	4b28      	ldr	r3, [pc, #160]	; (8002c20 <MX_TIM3_Init+0xe0>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	611a      	str	r2, [r3, #16]
 8002b82:	4b27      	ldr	r3, [pc, #156]	; (8002c20 <MX_TIM3_Init+0xe0>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	619a      	str	r2, [r3, #24]
 8002b88:	4b25      	ldr	r3, [pc, #148]	; (8002c20 <MX_TIM3_Init+0xe0>)
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f002 f8ca 	bl	8004d24 <HAL_TIM_PWM_Init>
 8002b90:	1e03      	subs	r3, r0, #0
 8002b92:	d001      	beq.n	8002b98 <MX_TIM3_Init+0x58>
 8002b94:	f000 f95a 	bl	8002e4c <Error_Handler>
 8002b98:	2120      	movs	r1, #32
 8002b9a:	187b      	adds	r3, r7, r1
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	187b      	adds	r3, r7, r1
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	605a      	str	r2, [r3, #4]
 8002ba6:	187a      	adds	r2, r7, r1
 8002ba8:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <MX_TIM3_Init+0xe0>)
 8002baa:	0011      	movs	r1, r2
 8002bac:	0018      	movs	r0, r3
 8002bae:	f002 fe29 	bl	8005804 <HAL_TIMEx_MasterConfigSynchronization>
 8002bb2:	1e03      	subs	r3, r0, #0
 8002bb4:	d001      	beq.n	8002bba <MX_TIM3_Init+0x7a>
 8002bb6:	f000 f949 	bl	8002e4c <Error_Handler>
 8002bba:	1d3b      	adds	r3, r7, #4
 8002bbc:	2260      	movs	r2, #96	; 0x60
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	1d3b      	adds	r3, r7, #4
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	1d3b      	adds	r3, r7, #4
 8002bce:	2200      	movs	r2, #0
 8002bd0:	611a      	str	r2, [r3, #16]
 8002bd2:	1d39      	adds	r1, r7, #4
 8002bd4:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <MX_TIM3_Init+0xe0>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f002 fa95 	bl	8005108 <HAL_TIM_PWM_ConfigChannel>
 8002bde:	1e03      	subs	r3, r0, #0
 8002be0:	d001      	beq.n	8002be6 <MX_TIM3_Init+0xa6>
 8002be2:	f000 f933 	bl	8002e4c <Error_Handler>
 8002be6:	1d39      	adds	r1, r7, #4
 8002be8:	4b0d      	ldr	r3, [pc, #52]	; (8002c20 <MX_TIM3_Init+0xe0>)
 8002bea:	2204      	movs	r2, #4
 8002bec:	0018      	movs	r0, r3
 8002bee:	f002 fa8b 	bl	8005108 <HAL_TIM_PWM_ConfigChannel>
 8002bf2:	1e03      	subs	r3, r0, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_TIM3_Init+0xba>
 8002bf6:	f000 f929 	bl	8002e4c <Error_Handler>
 8002bfa:	1d39      	adds	r1, r7, #4
 8002bfc:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <MX_TIM3_Init+0xe0>)
 8002bfe:	2208      	movs	r2, #8
 8002c00:	0018      	movs	r0, r3
 8002c02:	f002 fa81 	bl	8005108 <HAL_TIM_PWM_ConfigChannel>
 8002c06:	1e03      	subs	r3, r0, #0
 8002c08:	d001      	beq.n	8002c0e <MX_TIM3_Init+0xce>
 8002c0a:	f000 f91f 	bl	8002e4c <Error_Handler>
 8002c0e:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <MX_TIM3_Init+0xe0>)
 8002c10:	0018      	movs	r0, r3
 8002c12:	f000 f9d9 	bl	8002fc8 <HAL_TIM_MspPostInit>
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	b00a      	add	sp, #40	; 0x28
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	20003334 	.word	0x20003334
 8002c24:	40000400 	.word	0x40000400
 8002c28:	0000ea60 	.word	0x0000ea60

08002c2c <MX_TIM14_Init>:
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <MX_TIM14_Init+0x40>)
 8002c32:	4a0f      	ldr	r2, [pc, #60]	; (8002c70 <MX_TIM14_Init+0x44>)
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <MX_TIM14_Init+0x40>)
 8002c38:	22b7      	movs	r2, #183	; 0xb7
 8002c3a:	605a      	str	r2, [r3, #4]
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <MX_TIM14_Init+0x40>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
 8002c42:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <MX_TIM14_Init+0x40>)
 8002c44:	4a0b      	ldr	r2, [pc, #44]	; (8002c74 <MX_TIM14_Init+0x48>)
 8002c46:	60da      	str	r2, [r3, #12]
 8002c48:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <MX_TIM14_Init+0x40>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	611a      	str	r2, [r3, #16]
 8002c4e:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <MX_TIM14_Init+0x40>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	619a      	str	r2, [r3, #24]
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <MX_TIM14_Init+0x40>)
 8002c56:	0018      	movs	r0, r3
 8002c58:	f002 f816 	bl	8004c88 <HAL_TIM_Base_Init>
 8002c5c:	1e03      	subs	r3, r0, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM14_Init+0x38>
 8002c60:	f000 f8f4 	bl	8002e4c <Error_Handler>
 8002c64:	46c0      	nop			; (mov r8, r8)
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	20003400 	.word	0x20003400
 8002c70:	40002000 	.word	0x40002000
 8002c74:	0000ffff 	.word	0x0000ffff

08002c78 <MX_USART2_UART_Init>:
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <MX_USART2_UART_Init+0x58>)
 8002c7e:	4a15      	ldr	r2, [pc, #84]	; (8002cd4 <MX_USART2_UART_Init+0x5c>)
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <MX_USART2_UART_Init+0x58>)
 8002c84:	2296      	movs	r2, #150	; 0x96
 8002c86:	0212      	lsls	r2, r2, #8
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <MX_USART2_UART_Init+0x58>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <MX_USART2_UART_Init+0x58>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	4b0e      	ldr	r3, [pc, #56]	; (8002cd0 <MX_USART2_UART_Init+0x58>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	611a      	str	r2, [r3, #16]
 8002c9c:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <MX_USART2_UART_Init+0x58>)
 8002c9e:	220c      	movs	r2, #12
 8002ca0:	615a      	str	r2, [r3, #20]
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <MX_USART2_UART_Init+0x58>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	619a      	str	r2, [r3, #24]
 8002ca8:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <MX_USART2_UART_Init+0x58>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	61da      	str	r2, [r3, #28]
 8002cae:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <MX_USART2_UART_Init+0x58>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	621a      	str	r2, [r3, #32]
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <MX_USART2_UART_Init+0x58>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24
 8002cba:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <MX_USART2_UART_Init+0x58>)
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f002 fe0f 	bl	80058e0 <HAL_UART_Init>
 8002cc2:	1e03      	subs	r3, r0, #0
 8002cc4:	d001      	beq.n	8002cca <MX_USART2_UART_Init+0x52>
 8002cc6:	f000 f8c1 	bl	8002e4c <Error_Handler>
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20003380 	.word	0x20003380
 8002cd4:	40004400 	.word	0x40004400

08002cd8 <MX_GPIO_Init>:
 8002cd8:	b590      	push	{r4, r7, lr}
 8002cda:	b08b      	sub	sp, #44	; 0x2c
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	2414      	movs	r4, #20
 8002ce0:	193b      	adds	r3, r7, r4
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	2314      	movs	r3, #20
 8002ce6:	001a      	movs	r2, r3
 8002ce8:	2100      	movs	r1, #0
 8002cea:	f005 fbdc 	bl	80084a6 <memset>
 8002cee:	4b33      	ldr	r3, [pc, #204]	; (8002dbc <MX_GPIO_Init+0xe4>)
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	4b32      	ldr	r3, [pc, #200]	; (8002dbc <MX_GPIO_Init+0xe4>)
 8002cf4:	2180      	movs	r1, #128	; 0x80
 8002cf6:	0309      	lsls	r1, r1, #12
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	615a      	str	r2, [r3, #20]
 8002cfc:	4b2f      	ldr	r3, [pc, #188]	; (8002dbc <MX_GPIO_Init+0xe4>)
 8002cfe:	695a      	ldr	r2, [r3, #20]
 8002d00:	2380      	movs	r3, #128	; 0x80
 8002d02:	031b      	lsls	r3, r3, #12
 8002d04:	4013      	ands	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4b2c      	ldr	r3, [pc, #176]	; (8002dbc <MX_GPIO_Init+0xe4>)
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	4b2b      	ldr	r3, [pc, #172]	; (8002dbc <MX_GPIO_Init+0xe4>)
 8002d10:	2180      	movs	r1, #128	; 0x80
 8002d12:	03c9      	lsls	r1, r1, #15
 8002d14:	430a      	orrs	r2, r1
 8002d16:	615a      	str	r2, [r3, #20]
 8002d18:	4b28      	ldr	r3, [pc, #160]	; (8002dbc <MX_GPIO_Init+0xe4>)
 8002d1a:	695a      	ldr	r2, [r3, #20]
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	03db      	lsls	r3, r3, #15
 8002d20:	4013      	ands	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4b25      	ldr	r3, [pc, #148]	; (8002dbc <MX_GPIO_Init+0xe4>)
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <MX_GPIO_Init+0xe4>)
 8002d2c:	2180      	movs	r1, #128	; 0x80
 8002d2e:	0289      	lsls	r1, r1, #10
 8002d30:	430a      	orrs	r2, r1
 8002d32:	615a      	str	r2, [r3, #20]
 8002d34:	4b21      	ldr	r3, [pc, #132]	; (8002dbc <MX_GPIO_Init+0xe4>)
 8002d36:	695a      	ldr	r2, [r3, #20]
 8002d38:	2380      	movs	r3, #128	; 0x80
 8002d3a:	029b      	lsls	r3, r3, #10
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <MX_GPIO_Init+0xe4>)
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <MX_GPIO_Init+0xe4>)
 8002d48:	2180      	movs	r1, #128	; 0x80
 8002d4a:	02c9      	lsls	r1, r1, #11
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	615a      	str	r2, [r3, #20]
 8002d50:	4b1a      	ldr	r3, [pc, #104]	; (8002dbc <MX_GPIO_Init+0xe4>)
 8002d52:	695a      	ldr	r2, [r3, #20]
 8002d54:	2380      	movs	r3, #128	; 0x80
 8002d56:	02db      	lsls	r3, r3, #11
 8002d58:	4013      	ands	r3, r2
 8002d5a:	607b      	str	r3, [r7, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2390      	movs	r3, #144	; 0x90
 8002d60:	05db      	lsls	r3, r3, #23
 8002d62:	2200      	movs	r2, #0
 8002d64:	2120      	movs	r1, #32
 8002d66:	0018      	movs	r0, r3
 8002d68:	f001 f94b 	bl	8004002 <HAL_GPIO_WritePin>
 8002d6c:	193b      	adds	r3, r7, r4
 8002d6e:	2280      	movs	r2, #128	; 0x80
 8002d70:	0192      	lsls	r2, r2, #6
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	193b      	adds	r3, r7, r4
 8002d76:	4a12      	ldr	r2, [pc, #72]	; (8002dc0 <MX_GPIO_Init+0xe8>)
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	193b      	adds	r3, r7, r4
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	193b      	adds	r3, r7, r4
 8002d82:	4a10      	ldr	r2, [pc, #64]	; (8002dc4 <MX_GPIO_Init+0xec>)
 8002d84:	0019      	movs	r1, r3
 8002d86:	0010      	movs	r0, r2
 8002d88:	f000 ffa6 	bl	8003cd8 <HAL_GPIO_Init>
 8002d8c:	0021      	movs	r1, r4
 8002d8e:	187b      	adds	r3, r7, r1
 8002d90:	2220      	movs	r2, #32
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	187b      	adds	r3, r7, r1
 8002d96:	2201      	movs	r2, #1
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	187b      	adds	r3, r7, r1
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	187b      	adds	r3, r7, r1
 8002da2:	2200      	movs	r2, #0
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	187a      	adds	r2, r7, r1
 8002da8:	2390      	movs	r3, #144	; 0x90
 8002daa:	05db      	lsls	r3, r3, #23
 8002dac:	0011      	movs	r1, r2
 8002dae:	0018      	movs	r0, r3
 8002db0:	f000 ff92 	bl	8003cd8 <HAL_GPIO_Init>
 8002db4:	46c0      	nop			; (mov r8, r8)
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b00b      	add	sp, #44	; 0x2c
 8002dba:	bd90      	pop	{r4, r7, pc}
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	10210000 	.word	0x10210000
 8002dc4:	48000800 	.word	0x48000800

08002dc8 <start_update_calculate_wing_angle>:
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	f7fe ff6a 	bl	8001ca8 <update_data>
 8002dd4:	f7ff f910 	bl	8001ff8 <arbitrate_acceleration>
 8002dd8:	f7ff fa58 	bl	800228c <arbitrate_speed>
 8002ddc:	f7ff fb28 	bl	8002430 <arbitrate_steering_angle>
 8002de0:	f7ff f826 	bl	8001e30 <calculate_wing_angle>
 8002de4:	2001      	movs	r0, #1
 8002de6:	f003 fa17 	bl	8006218 <osDelay>
 8002dea:	e7f1      	b.n	8002dd0 <start_update_calculate_wing_angle+0x8>

08002dec <start_actuate_wings>:
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	f7ff fb82 	bl	80024fc <output_angles>
 8002df8:	2001      	movs	r0, #1
 8002dfa:	f003 fa0d 	bl	8006218 <osDelay>
 8002dfe:	e7f9      	b.n	8002df4 <start_actuate_wings+0x8>

08002e00 <start_DRS_button>:
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	f7ff fc18 	bl	800263c <get_btn_state>
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	f003 fa03 	bl	8006218 <osDelay>
 8002e12:	e7f9      	b.n	8002e08 <start_DRS_button+0x8>

08002e14 <start_fetch_data>:
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	f7fe febc 	bl	8001b98 <fetch_data>
 8002e20:	2001      	movs	r0, #1
 8002e22:	f003 f9f9 	bl	8006218 <osDelay>
 8002e26:	e7f9      	b.n	8002e1c <start_fetch_data+0x8>

08002e28 <HAL_TIM_PeriodElapsedCallback>:
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d101      	bne.n	8002e3e <HAL_TIM_PeriodElapsedCallback+0x16>
 8002e3a:	f000 fa35 	bl	80032a8 <HAL_IncTick>
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	46bd      	mov	sp, r7
 8002e42:	b002      	add	sp, #8
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	40001000 	.word	0x40001000

08002e4c <Error_Handler>:
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	46c0      	nop			; (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <HAL_MspInit>:
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <HAL_MspInit+0x44>)
 8002e60:	699a      	ldr	r2, [r3, #24]
 8002e62:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <HAL_MspInit+0x44>)
 8002e64:	2101      	movs	r1, #1
 8002e66:	430a      	orrs	r2, r1
 8002e68:	619a      	str	r2, [r3, #24]
 8002e6a:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <HAL_MspInit+0x44>)
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	4013      	ands	r3, r2
 8002e72:	607b      	str	r3, [r7, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <HAL_MspInit+0x44>)
 8002e78:	69da      	ldr	r2, [r3, #28]
 8002e7a:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <HAL_MspInit+0x44>)
 8002e7c:	2180      	movs	r1, #128	; 0x80
 8002e7e:	0549      	lsls	r1, r1, #21
 8002e80:	430a      	orrs	r2, r1
 8002e82:	61da      	str	r2, [r3, #28]
 8002e84:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_MspInit+0x44>)
 8002e86:	69da      	ldr	r2, [r3, #28]
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	055b      	lsls	r3, r3, #21
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b002      	add	sp, #8
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	40021000 	.word	0x40021000

08002ea0 <HAL_CAN_MspInit>:
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08a      	sub	sp, #40	; 0x28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	2314      	movs	r3, #20
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	0018      	movs	r0, r3
 8002eae:	2314      	movs	r3, #20
 8002eb0:	001a      	movs	r2, r3
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	f005 faf7 	bl	80084a6 <memset>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a20      	ldr	r2, [pc, #128]	; (8002f40 <HAL_CAN_MspInit+0xa0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d13a      	bne.n	8002f38 <HAL_CAN_MspInit+0x98>
 8002ec2:	4b20      	ldr	r3, [pc, #128]	; (8002f44 <HAL_CAN_MspInit+0xa4>)
 8002ec4:	69da      	ldr	r2, [r3, #28]
 8002ec6:	4b1f      	ldr	r3, [pc, #124]	; (8002f44 <HAL_CAN_MspInit+0xa4>)
 8002ec8:	2180      	movs	r1, #128	; 0x80
 8002eca:	0489      	lsls	r1, r1, #18
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	61da      	str	r2, [r3, #28]
 8002ed0:	4b1c      	ldr	r3, [pc, #112]	; (8002f44 <HAL_CAN_MspInit+0xa4>)
 8002ed2:	69da      	ldr	r2, [r3, #28]
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	049b      	lsls	r3, r3, #18
 8002ed8:	4013      	ands	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_CAN_MspInit+0xa4>)
 8002ee0:	695a      	ldr	r2, [r3, #20]
 8002ee2:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <HAL_CAN_MspInit+0xa4>)
 8002ee4:	2180      	movs	r1, #128	; 0x80
 8002ee6:	02c9      	lsls	r1, r1, #11
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	615a      	str	r2, [r3, #20]
 8002eec:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <HAL_CAN_MspInit+0xa4>)
 8002eee:	695a      	ldr	r2, [r3, #20]
 8002ef0:	2380      	movs	r3, #128	; 0x80
 8002ef2:	02db      	lsls	r3, r3, #11
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2114      	movs	r1, #20
 8002efc:	187b      	adds	r3, r7, r1
 8002efe:	22c0      	movs	r2, #192	; 0xc0
 8002f00:	0092      	lsls	r2, r2, #2
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	187b      	adds	r3, r7, r1
 8002f06:	2202      	movs	r2, #2
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	187b      	adds	r3, r7, r1
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	187b      	adds	r3, r7, r1
 8002f12:	2203      	movs	r2, #3
 8002f14:	60da      	str	r2, [r3, #12]
 8002f16:	187b      	adds	r3, r7, r1
 8002f18:	2204      	movs	r2, #4
 8002f1a:	611a      	str	r2, [r3, #16]
 8002f1c:	187b      	adds	r3, r7, r1
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <HAL_CAN_MspInit+0xa8>)
 8002f20:	0019      	movs	r1, r3
 8002f22:	0010      	movs	r0, r2
 8002f24:	f000 fed8 	bl	8003cd8 <HAL_GPIO_Init>
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	201e      	movs	r0, #30
 8002f2e:	f000 fead 	bl	8003c8c <HAL_NVIC_SetPriority>
 8002f32:	201e      	movs	r0, #30
 8002f34:	f000 febf 	bl	8003cb6 <HAL_NVIC_EnableIRQ>
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b00a      	add	sp, #40	; 0x28
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40006400 	.word	0x40006400
 8002f44:	40021000 	.word	0x40021000
 8002f48:	48000400 	.word	0x48000400

08002f4c <HAL_TIM_PWM_MspInit>:
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a09      	ldr	r2, [pc, #36]	; (8002f80 <HAL_TIM_PWM_MspInit+0x34>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d10b      	bne.n	8002f76 <HAL_TIM_PWM_MspInit+0x2a>
 8002f5e:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <HAL_TIM_PWM_MspInit+0x38>)
 8002f60:	69da      	ldr	r2, [r3, #28]
 8002f62:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <HAL_TIM_PWM_MspInit+0x38>)
 8002f64:	2102      	movs	r1, #2
 8002f66:	430a      	orrs	r2, r1
 8002f68:	61da      	str	r2, [r3, #28]
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <HAL_TIM_PWM_MspInit+0x38>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	4013      	ands	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	b004      	add	sp, #16
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	40000400 	.word	0x40000400
 8002f84:	40021000 	.word	0x40021000

08002f88 <HAL_TIM_Base_MspInit>:
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <HAL_TIM_Base_MspInit+0x38>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d10d      	bne.n	8002fb6 <HAL_TIM_Base_MspInit+0x2e>
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <HAL_TIM_Base_MspInit+0x3c>)
 8002f9c:	69da      	ldr	r2, [r3, #28]
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <HAL_TIM_Base_MspInit+0x3c>)
 8002fa0:	2180      	movs	r1, #128	; 0x80
 8002fa2:	0049      	lsls	r1, r1, #1
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	61da      	str	r2, [r3, #28]
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_TIM_Base_MspInit+0x3c>)
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b004      	add	sp, #16
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	40002000 	.word	0x40002000
 8002fc4:	40021000 	.word	0x40021000

08002fc8 <HAL_TIM_MspPostInit>:
 8002fc8:	b590      	push	{r4, r7, lr}
 8002fca:	b08b      	sub	sp, #44	; 0x2c
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	2314      	movs	r3, #20
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	2314      	movs	r3, #20
 8002fd8:	001a      	movs	r2, r3
 8002fda:	2100      	movs	r1, #0
 8002fdc:	f005 fa63 	bl	80084a6 <memset>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a27      	ldr	r2, [pc, #156]	; (8003084 <HAL_TIM_MspPostInit+0xbc>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d148      	bne.n	800307c <HAL_TIM_MspPostInit+0xb4>
 8002fea:	4b27      	ldr	r3, [pc, #156]	; (8003088 <HAL_TIM_MspPostInit+0xc0>)
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	4b26      	ldr	r3, [pc, #152]	; (8003088 <HAL_TIM_MspPostInit+0xc0>)
 8002ff0:	2180      	movs	r1, #128	; 0x80
 8002ff2:	0289      	lsls	r1, r1, #10
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	615a      	str	r2, [r3, #20]
 8002ff8:	4b23      	ldr	r3, [pc, #140]	; (8003088 <HAL_TIM_MspPostInit+0xc0>)
 8002ffa:	695a      	ldr	r2, [r3, #20]
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	029b      	lsls	r3, r3, #10
 8003000:	4013      	ands	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4b20      	ldr	r3, [pc, #128]	; (8003088 <HAL_TIM_MspPostInit+0xc0>)
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	4b1f      	ldr	r3, [pc, #124]	; (8003088 <HAL_TIM_MspPostInit+0xc0>)
 800300c:	2180      	movs	r1, #128	; 0x80
 800300e:	02c9      	lsls	r1, r1, #11
 8003010:	430a      	orrs	r2, r1
 8003012:	615a      	str	r2, [r3, #20]
 8003014:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <HAL_TIM_MspPostInit+0xc0>)
 8003016:	695a      	ldr	r2, [r3, #20]
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	02db      	lsls	r3, r3, #11
 800301c:	4013      	ands	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2414      	movs	r4, #20
 8003024:	193b      	adds	r3, r7, r4
 8003026:	22c0      	movs	r2, #192	; 0xc0
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	193b      	adds	r3, r7, r4
 800302c:	2202      	movs	r2, #2
 800302e:	605a      	str	r2, [r3, #4]
 8003030:	193b      	adds	r3, r7, r4
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	193b      	adds	r3, r7, r4
 8003038:	2200      	movs	r2, #0
 800303a:	60da      	str	r2, [r3, #12]
 800303c:	193b      	adds	r3, r7, r4
 800303e:	2201      	movs	r2, #1
 8003040:	611a      	str	r2, [r3, #16]
 8003042:	193a      	adds	r2, r7, r4
 8003044:	2390      	movs	r3, #144	; 0x90
 8003046:	05db      	lsls	r3, r3, #23
 8003048:	0011      	movs	r1, r2
 800304a:	0018      	movs	r0, r3
 800304c:	f000 fe44 	bl	8003cd8 <HAL_GPIO_Init>
 8003050:	0021      	movs	r1, r4
 8003052:	187b      	adds	r3, r7, r1
 8003054:	2201      	movs	r2, #1
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	187b      	adds	r3, r7, r1
 800305a:	2202      	movs	r2, #2
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	187b      	adds	r3, r7, r1
 8003060:	2200      	movs	r2, #0
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	187b      	adds	r3, r7, r1
 8003066:	2200      	movs	r2, #0
 8003068:	60da      	str	r2, [r3, #12]
 800306a:	187b      	adds	r3, r7, r1
 800306c:	2201      	movs	r2, #1
 800306e:	611a      	str	r2, [r3, #16]
 8003070:	187b      	adds	r3, r7, r1
 8003072:	4a06      	ldr	r2, [pc, #24]	; (800308c <HAL_TIM_MspPostInit+0xc4>)
 8003074:	0019      	movs	r1, r3
 8003076:	0010      	movs	r0, r2
 8003078:	f000 fe2e 	bl	8003cd8 <HAL_GPIO_Init>
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	b00b      	add	sp, #44	; 0x2c
 8003082:	bd90      	pop	{r4, r7, pc}
 8003084:	40000400 	.word	0x40000400
 8003088:	40021000 	.word	0x40021000
 800308c:	48000400 	.word	0x48000400

08003090 <HAL_UART_MspInit>:
 8003090:	b580      	push	{r7, lr}
 8003092:	b08a      	sub	sp, #40	; 0x28
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	2314      	movs	r3, #20
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	0018      	movs	r0, r3
 800309e:	2314      	movs	r3, #20
 80030a0:	001a      	movs	r2, r3
 80030a2:	2100      	movs	r1, #0
 80030a4:	f005 f9ff 	bl	80084a6 <memset>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1c      	ldr	r2, [pc, #112]	; (8003120 <HAL_UART_MspInit+0x90>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d132      	bne.n	8003118 <HAL_UART_MspInit+0x88>
 80030b2:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <HAL_UART_MspInit+0x94>)
 80030b4:	69da      	ldr	r2, [r3, #28]
 80030b6:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <HAL_UART_MspInit+0x94>)
 80030b8:	2180      	movs	r1, #128	; 0x80
 80030ba:	0289      	lsls	r1, r1, #10
 80030bc:	430a      	orrs	r2, r1
 80030be:	61da      	str	r2, [r3, #28]
 80030c0:	4b18      	ldr	r3, [pc, #96]	; (8003124 <HAL_UART_MspInit+0x94>)
 80030c2:	69da      	ldr	r2, [r3, #28]
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	029b      	lsls	r3, r3, #10
 80030c8:	4013      	ands	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4b15      	ldr	r3, [pc, #84]	; (8003124 <HAL_UART_MspInit+0x94>)
 80030d0:	695a      	ldr	r2, [r3, #20]
 80030d2:	4b14      	ldr	r3, [pc, #80]	; (8003124 <HAL_UART_MspInit+0x94>)
 80030d4:	2180      	movs	r1, #128	; 0x80
 80030d6:	0289      	lsls	r1, r1, #10
 80030d8:	430a      	orrs	r2, r1
 80030da:	615a      	str	r2, [r3, #20]
 80030dc:	4b11      	ldr	r3, [pc, #68]	; (8003124 <HAL_UART_MspInit+0x94>)
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	2380      	movs	r3, #128	; 0x80
 80030e2:	029b      	lsls	r3, r3, #10
 80030e4:	4013      	ands	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2114      	movs	r1, #20
 80030ec:	187b      	adds	r3, r7, r1
 80030ee:	220c      	movs	r2, #12
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	187b      	adds	r3, r7, r1
 80030f4:	2202      	movs	r2, #2
 80030f6:	605a      	str	r2, [r3, #4]
 80030f8:	187b      	adds	r3, r7, r1
 80030fa:	2200      	movs	r2, #0
 80030fc:	609a      	str	r2, [r3, #8]
 80030fe:	187b      	adds	r3, r7, r1
 8003100:	2200      	movs	r2, #0
 8003102:	60da      	str	r2, [r3, #12]
 8003104:	187b      	adds	r3, r7, r1
 8003106:	2201      	movs	r2, #1
 8003108:	611a      	str	r2, [r3, #16]
 800310a:	187a      	adds	r2, r7, r1
 800310c:	2390      	movs	r3, #144	; 0x90
 800310e:	05db      	lsls	r3, r3, #23
 8003110:	0011      	movs	r1, r2
 8003112:	0018      	movs	r0, r3
 8003114:	f000 fde0 	bl	8003cd8 <HAL_GPIO_Init>
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	b00a      	add	sp, #40	; 0x28
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40004400 	.word	0x40004400
 8003124:	40021000 	.word	0x40021000

08003128 <HAL_InitTick>:
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	2300      	movs	r3, #0
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
 8003134:	2300      	movs	r3, #0
 8003136:	623b      	str	r3, [r7, #32]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	0019      	movs	r1, r3
 800313e:	2011      	movs	r0, #17
 8003140:	f000 fda4 	bl	8003c8c <HAL_NVIC_SetPriority>
 8003144:	2011      	movs	r0, #17
 8003146:	f000 fdb6 	bl	8003cb6 <HAL_NVIC_EnableIRQ>
 800314a:	4b20      	ldr	r3, [pc, #128]	; (80031cc <HAL_InitTick+0xa4>)
 800314c:	69da      	ldr	r2, [r3, #28]
 800314e:	4b1f      	ldr	r3, [pc, #124]	; (80031cc <HAL_InitTick+0xa4>)
 8003150:	2110      	movs	r1, #16
 8003152:	430a      	orrs	r2, r1
 8003154:	61da      	str	r2, [r3, #28]
 8003156:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <HAL_InitTick+0xa4>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	2210      	movs	r2, #16
 800315c:	4013      	ands	r3, r2
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	230c      	movs	r3, #12
 8003164:	18fa      	adds	r2, r7, r3
 8003166:	2310      	movs	r3, #16
 8003168:	18fb      	adds	r3, r7, r3
 800316a:	0011      	movs	r1, r2
 800316c:	0018      	movs	r0, r3
 800316e:	f001 fc63 	bl	8004a38 <HAL_RCC_GetClockConfig>
 8003172:	f001 fc4b 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 8003176:	0003      	movs	r3, r0
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	4914      	ldr	r1, [pc, #80]	; (80031d0 <HAL_InitTick+0xa8>)
 800317e:	0018      	movs	r0, r3
 8003180:	f7fc ffc2 	bl	8000108 <__udivsi3>
 8003184:	0003      	movs	r3, r0
 8003186:	3b01      	subs	r3, #1
 8003188:	623b      	str	r3, [r7, #32]
 800318a:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <HAL_InitTick+0xac>)
 800318c:	4a12      	ldr	r2, [pc, #72]	; (80031d8 <HAL_InitTick+0xb0>)
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <HAL_InitTick+0xac>)
 8003192:	4a12      	ldr	r2, [pc, #72]	; (80031dc <HAL_InitTick+0xb4>)
 8003194:	60da      	str	r2, [r3, #12]
 8003196:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <HAL_InitTick+0xac>)
 8003198:	6a3a      	ldr	r2, [r7, #32]
 800319a:	605a      	str	r2, [r3, #4]
 800319c:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <HAL_InitTick+0xac>)
 800319e:	2200      	movs	r2, #0
 80031a0:	611a      	str	r2, [r3, #16]
 80031a2:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <HAL_InitTick+0xac>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <HAL_InitTick+0xac>)
 80031aa:	0018      	movs	r0, r3
 80031ac:	f001 fd6c 	bl	8004c88 <HAL_TIM_Base_Init>
 80031b0:	1e03      	subs	r3, r0, #0
 80031b2:	d105      	bne.n	80031c0 <HAL_InitTick+0x98>
 80031b4:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <HAL_InitTick+0xac>)
 80031b6:	0018      	movs	r0, r3
 80031b8:	f001 fd92 	bl	8004ce0 <HAL_TIM_Base_Start_IT>
 80031bc:	0003      	movs	r3, r0
 80031be:	e000      	b.n	80031c2 <HAL_InitTick+0x9a>
 80031c0:	2301      	movs	r3, #1
 80031c2:	0018      	movs	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	b00a      	add	sp, #40	; 0x28
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	40021000 	.word	0x40021000
 80031d0:	000f4240 	.word	0x000f4240
 80031d4:	20003440 	.word	0x20003440
 80031d8:	40001000 	.word	0x40001000
 80031dc:	000003e7 	.word	0x000003e7

080031e0 <NMI_Handler>:
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	46c0      	nop			; (mov r8, r8)
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HardFault_Handler>:
 80031ea:	b580      	push	{r7, lr}
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	e7fe      	b.n	80031ee <HardFault_Handler+0x4>

080031f0 <TIM6_DAC_IRQHandler>:
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	4b03      	ldr	r3, [pc, #12]	; (8003204 <TIM6_DAC_IRQHandler+0x14>)
 80031f6:	0018      	movs	r0, r3
 80031f8:	f001 fe70 	bl	8004edc <HAL_TIM_IRQHandler>
 80031fc:	46c0      	nop			; (mov r8, r8)
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	20003440 	.word	0x20003440

08003208 <CEC_CAN_IRQHandler>:
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
 800320c:	4b03      	ldr	r3, [pc, #12]	; (800321c <CEC_CAN_IRQHandler+0x14>)
 800320e:	0018      	movs	r0, r3
 8003210:	f000 faab 	bl	800376a <HAL_CAN_IRQHandler>
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	20003308 	.word	0x20003308

08003220 <SystemInit>:
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
 8003224:	46c0      	nop			; (mov r8, r8)
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <Reset_Handler>:
 800322c:	480d      	ldr	r0, [pc, #52]	; (8003264 <LoopForever+0x2>)
 800322e:	4685      	mov	sp, r0
 8003230:	480d      	ldr	r0, [pc, #52]	; (8003268 <LoopForever+0x6>)
 8003232:	490e      	ldr	r1, [pc, #56]	; (800326c <LoopForever+0xa>)
 8003234:	4a0e      	ldr	r2, [pc, #56]	; (8003270 <LoopForever+0xe>)
 8003236:	2300      	movs	r3, #0
 8003238:	e002      	b.n	8003240 <LoopCopyDataInit>

0800323a <CopyDataInit>:
 800323a:	58d4      	ldr	r4, [r2, r3]
 800323c:	50c4      	str	r4, [r0, r3]
 800323e:	3304      	adds	r3, #4

08003240 <LoopCopyDataInit>:
 8003240:	18c4      	adds	r4, r0, r3
 8003242:	428c      	cmp	r4, r1
 8003244:	d3f9      	bcc.n	800323a <CopyDataInit>
 8003246:	4a0b      	ldr	r2, [pc, #44]	; (8003274 <LoopForever+0x12>)
 8003248:	4c0b      	ldr	r4, [pc, #44]	; (8003278 <LoopForever+0x16>)
 800324a:	2300      	movs	r3, #0
 800324c:	e001      	b.n	8003252 <LoopFillZerobss>

0800324e <FillZerobss>:
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	3204      	adds	r2, #4

08003252 <LoopFillZerobss>:
 8003252:	42a2      	cmp	r2, r4
 8003254:	d3fb      	bcc.n	800324e <FillZerobss>
 8003256:	f7ff ffe3 	bl	8003220 <SystemInit>
 800325a:	f005 f8f7 	bl	800844c <__libc_init_array>
 800325e:	f7ff fb91 	bl	8002984 <main>

08003262 <LoopForever>:
 8003262:	e7fe      	b.n	8003262 <LoopForever>
 8003264:	20004000 	.word	0x20004000
 8003268:	20000000 	.word	0x20000000
 800326c:	20000104 	.word	0x20000104
 8003270:	0800865c 	.word	0x0800865c
 8003274:	20000108 	.word	0x20000108
 8003278:	200034c4 	.word	0x200034c4

0800327c <ADC1_COMP_IRQHandler>:
 800327c:	e7fe      	b.n	800327c <ADC1_COMP_IRQHandler>
	...

08003280 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003284:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <HAL_Init+0x24>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <HAL_Init+0x24>)
 800328a:	2110      	movs	r1, #16
 800328c:	430a      	orrs	r2, r1
 800328e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003290:	2000      	movs	r0, #0
 8003292:	f7ff ff49 	bl	8003128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003296:	f7ff fddf 	bl	8002e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	0018      	movs	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	40022000 	.word	0x40022000

080032a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032ac:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <HAL_IncTick+0x1c>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	001a      	movs	r2, r3
 80032b2:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <HAL_IncTick+0x20>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	18d2      	adds	r2, r2, r3
 80032b8:	4b03      	ldr	r3, [pc, #12]	; (80032c8 <HAL_IncTick+0x20>)
 80032ba:	601a      	str	r2, [r3, #0]
}
 80032bc:	46c0      	nop			; (mov r8, r8)
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	200000fc 	.word	0x200000fc
 80032c8:	20003480 	.word	0x20003480

080032cc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  return uwTick;
 80032d0:	4b02      	ldr	r3, [pc, #8]	; (80032dc <HAL_GetTick+0x10>)
 80032d2:	681b      	ldr	r3, [r3, #0]
}
 80032d4:	0018      	movs	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	20003480 	.word	0x20003480

080032e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e0f0      	b.n	80034d4 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2220      	movs	r2, #32
 80032f6:	5c9b      	ldrb	r3, [r3, r2]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d103      	bne.n	8003306 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	0018      	movs	r0, r3
 8003302:	f7ff fdcd 	bl	8002ea0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2102      	movs	r1, #2
 8003312:	438a      	bics	r2, r1
 8003314:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003316:	f7ff ffd9 	bl	80032cc <HAL_GetTick>
 800331a:	0003      	movs	r3, r0
 800331c:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800331e:	e013      	b.n	8003348 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003320:	f7ff ffd4 	bl	80032cc <HAL_GetTick>
 8003324:	0002      	movs	r2, r0
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b0a      	cmp	r3, #10
 800332c:	d90c      	bls.n	8003348 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	2280      	movs	r2, #128	; 0x80
 8003334:	0292      	lsls	r2, r2, #10
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	2105      	movs	r1, #5
 8003342:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0c5      	b.n	80034d4 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	4013      	ands	r3, r2
 8003352:	d1e5      	bne.n	8003320 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2101      	movs	r1, #1
 8003360:	430a      	orrs	r2, r1
 8003362:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003364:	f7ff ffb2 	bl	80032cc <HAL_GetTick>
 8003368:	0003      	movs	r3, r0
 800336a:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800336c:	e013      	b.n	8003396 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800336e:	f7ff ffad 	bl	80032cc <HAL_GetTick>
 8003372:	0002      	movs	r2, r0
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b0a      	cmp	r3, #10
 800337a:	d90c      	bls.n	8003396 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	2280      	movs	r2, #128	; 0x80
 8003382:	0292      	lsls	r2, r2, #10
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2220      	movs	r2, #32
 800338e:	2105      	movs	r1, #5
 8003390:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e09e      	b.n	80034d4 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	4013      	ands	r3, r2
 80033a0:	d0e5      	beq.n	800336e <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	7e1b      	ldrb	r3, [r3, #24]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d108      	bne.n	80033bc <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2180      	movs	r1, #128	; 0x80
 80033b6:	430a      	orrs	r2, r1
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	e007      	b.n	80033cc <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2180      	movs	r1, #128	; 0x80
 80033c8:	438a      	bics	r2, r1
 80033ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	7e5b      	ldrb	r3, [r3, #25]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d108      	bne.n	80033e6 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2140      	movs	r1, #64	; 0x40
 80033e0:	430a      	orrs	r2, r1
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	e007      	b.n	80033f6 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2140      	movs	r1, #64	; 0x40
 80033f2:	438a      	bics	r2, r1
 80033f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	7e9b      	ldrb	r3, [r3, #26]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d108      	bne.n	8003410 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2120      	movs	r1, #32
 800340a:	430a      	orrs	r2, r1
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	e007      	b.n	8003420 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2120      	movs	r1, #32
 800341c:	438a      	bics	r2, r1
 800341e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	7edb      	ldrb	r3, [r3, #27]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d108      	bne.n	800343a <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2110      	movs	r1, #16
 8003434:	438a      	bics	r2, r1
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	e007      	b.n	800344a <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2110      	movs	r1, #16
 8003446:	430a      	orrs	r2, r1
 8003448:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	7f1b      	ldrb	r3, [r3, #28]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d108      	bne.n	8003464 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2108      	movs	r1, #8
 800345e:	430a      	orrs	r2, r1
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	e007      	b.n	8003474 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2108      	movs	r1, #8
 8003470:	438a      	bics	r2, r1
 8003472:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	7f5b      	ldrb	r3, [r3, #29]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d108      	bne.n	800348e <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2104      	movs	r1, #4
 8003488:	430a      	orrs	r2, r1
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	e007      	b.n	800349e <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2104      	movs	r1, #4
 800349a:	438a      	bics	r2, r1
 800349c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	0011      	movs	r1, r2
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	1e5a      	subs	r2, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2220      	movs	r2, #32
 80034ce:	2101      	movs	r1, #1
 80034d0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	0018      	movs	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b004      	add	sp, #16
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034ea:	2017      	movs	r0, #23
 80034ec:	183b      	adds	r3, r7, r0
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	2120      	movs	r1, #32
 80034f2:	5c52      	ldrb	r2, [r2, r1]
 80034f4:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80034f6:	0002      	movs	r2, r0
 80034f8:	18bb      	adds	r3, r7, r2
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d004      	beq.n	800350a <HAL_CAN_GetRxMessage+0x2e>
 8003500:	18bb      	adds	r3, r7, r2
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d000      	beq.n	800350a <HAL_CAN_GetRxMessage+0x2e>
 8003508:	e0f8      	b.n	80036fc <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10e      	bne.n	800352e <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	2203      	movs	r2, #3
 8003518:	4013      	ands	r3, r2
 800351a:	d117      	bne.n	800354c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	2280      	movs	r2, #128	; 0x80
 8003522:	0392      	lsls	r2, r2, #14
 8003524:	431a      	orrs	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e0ee      	b.n	800370c <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	2203      	movs	r2, #3
 8003536:	4013      	ands	r3, r2
 8003538:	d108      	bne.n	800354c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	2280      	movs	r2, #128	; 0x80
 8003540:	0392      	lsls	r2, r2, #14
 8003542:	431a      	orrs	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0df      	b.n	800370c <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	321b      	adds	r2, #27
 8003554:	0112      	lsls	r2, r2, #4
 8003556:	58d3      	ldr	r3, [r2, r3]
 8003558:	2204      	movs	r2, #4
 800355a:	401a      	ands	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10b      	bne.n	8003580 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	321b      	adds	r2, #27
 8003570:	0112      	lsls	r2, r2, #4
 8003572:	58d3      	ldr	r3, [r2, r3]
 8003574:	0d5b      	lsrs	r3, r3, #21
 8003576:	055b      	lsls	r3, r3, #21
 8003578:	0d5a      	lsrs	r2, r3, #21
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	e00a      	b.n	8003596 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	321b      	adds	r2, #27
 8003588:	0112      	lsls	r2, r2, #4
 800358a:	58d3      	ldr	r3, [r2, r3]
 800358c:	08db      	lsrs	r3, r3, #3
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	08da      	lsrs	r2, r3, #3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	321b      	adds	r2, #27
 800359e:	0112      	lsls	r2, r2, #4
 80035a0:	58d3      	ldr	r3, [r2, r3]
 80035a2:	2202      	movs	r2, #2
 80035a4:	401a      	ands	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	331b      	adds	r3, #27
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	18d3      	adds	r3, r2, r3
 80035b6:	3304      	adds	r3, #4
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	220f      	movs	r2, #15
 80035bc:	401a      	ands	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	331b      	adds	r3, #27
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	18d3      	adds	r3, r2, r3
 80035ce:	3304      	adds	r3, #4
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	0a1b      	lsrs	r3, r3, #8
 80035d4:	22ff      	movs	r2, #255	; 0xff
 80035d6:	401a      	ands	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	331b      	adds	r3, #27
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	18d3      	adds	r3, r2, r3
 80035e8:	3304      	adds	r3, #4
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	0c1b      	lsrs	r3, r3, #16
 80035ee:	041b      	lsls	r3, r3, #16
 80035f0:	0c1a      	lsrs	r2, r3, #16
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6819      	ldr	r1, [r3, #0]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	23dc      	movs	r3, #220	; 0xdc
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	0112      	lsls	r2, r2, #4
 8003602:	188a      	adds	r2, r1, r2
 8003604:	18d3      	adds	r3, r2, r3
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	b2da      	uxtb	r2, r3
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6819      	ldr	r1, [r3, #0]
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	23dc      	movs	r3, #220	; 0xdc
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	0112      	lsls	r2, r2, #4
 800361a:	188a      	adds	r2, r1, r2
 800361c:	18d3      	adds	r3, r2, r3
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	0a1a      	lsrs	r2, r3, #8
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	3301      	adds	r3, #1
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6819      	ldr	r1, [r3, #0]
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	23dc      	movs	r3, #220	; 0xdc
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	0112      	lsls	r2, r2, #4
 8003636:	188a      	adds	r2, r1, r2
 8003638:	18d3      	adds	r3, r2, r3
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	0c1a      	lsrs	r2, r3, #16
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	3302      	adds	r3, #2
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6819      	ldr	r1, [r3, #0]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	23dc      	movs	r3, #220	; 0xdc
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	0112      	lsls	r2, r2, #4
 8003652:	188a      	adds	r2, r1, r2
 8003654:	18d3      	adds	r3, r2, r3
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	0e1a      	lsrs	r2, r3, #24
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	3303      	adds	r3, #3
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6819      	ldr	r1, [r3, #0]
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	23de      	movs	r3, #222	; 0xde
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	0112      	lsls	r2, r2, #4
 800366e:	188a      	adds	r2, r1, r2
 8003670:	18d3      	adds	r3, r2, r3
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	3304      	adds	r3, #4
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6819      	ldr	r1, [r3, #0]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	23de      	movs	r3, #222	; 0xde
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	0112      	lsls	r2, r2, #4
 8003688:	188a      	adds	r2, r1, r2
 800368a:	18d3      	adds	r3, r2, r3
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	0a1a      	lsrs	r2, r3, #8
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	3305      	adds	r3, #5
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6819      	ldr	r1, [r3, #0]
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	23de      	movs	r3, #222	; 0xde
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	0112      	lsls	r2, r2, #4
 80036a4:	188a      	adds	r2, r1, r2
 80036a6:	18d3      	adds	r3, r2, r3
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	0c1a      	lsrs	r2, r3, #16
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	3306      	adds	r3, #6
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6819      	ldr	r1, [r3, #0]
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	23de      	movs	r3, #222	; 0xde
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	0112      	lsls	r2, r2, #4
 80036c0:	188a      	adds	r2, r1, r2
 80036c2:	18d3      	adds	r3, r2, r3
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	0e1a      	lsrs	r2, r3, #24
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	3307      	adds	r3, #7
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d108      	bne.n	80036e8 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2120      	movs	r1, #32
 80036e2:	430a      	orrs	r2, r1
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	e007      	b.n	80036f8 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691a      	ldr	r2, [r3, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2120      	movs	r1, #32
 80036f4:	430a      	orrs	r2, r1
 80036f6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	e007      	b.n	800370c <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	2280      	movs	r2, #128	; 0x80
 8003702:	02d2      	lsls	r2, r2, #11
 8003704:	431a      	orrs	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
  }
}
 800370c:	0018      	movs	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	b006      	add	sp, #24
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003722:	200b      	movs	r0, #11
 8003724:	183b      	adds	r3, r7, r0
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	2120      	movs	r1, #32
 800372a:	5c52      	ldrb	r2, [r2, r1]
 800372c:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800372e:	0002      	movs	r2, r0
 8003730:	18bb      	adds	r3, r7, r2
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d003      	beq.n	8003740 <HAL_CAN_GetRxFifoFillLevel+0x2c>
 8003738:	18bb      	adds	r3, r7, r2
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d10f      	bne.n	8003760 <HAL_CAN_GetRxFifoFillLevel+0x4c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <HAL_CAN_GetRxFifoFillLevel+0x40>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	2203      	movs	r2, #3
 800374e:	4013      	ands	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	e005      	b.n	8003760 <HAL_CAN_GetRxFifoFillLevel+0x4c>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2203      	movs	r2, #3
 800375c:	4013      	ands	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003760:	68fb      	ldr	r3, [r7, #12]
}
 8003762:	0018      	movs	r0, r3
 8003764:	46bd      	mov	sp, r7
 8003766:	b004      	add	sp, #16
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b08a      	sub	sp, #40	; 0x28
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003772:	2300      	movs	r3, #0
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	2201      	movs	r2, #1
 80037aa:	4013      	ands	r3, r2
 80037ac:	d100      	bne.n	80037b0 <HAL_CAN_IRQHandler+0x46>
 80037ae:	e084      	b.n	80038ba <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	2201      	movs	r2, #1
 80037b4:	4013      	ands	r3, r2
 80037b6:	d024      	beq.n	8003802 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2201      	movs	r2, #1
 80037be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	2202      	movs	r2, #2
 80037c4:	4013      	ands	r3, r2
 80037c6:	d004      	beq.n	80037d2 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	0018      	movs	r0, r3
 80037cc:	f000 f97e 	bl	8003acc <HAL_CAN_TxMailbox0CompleteCallback>
 80037d0:	e017      	b.n	8003802 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2204      	movs	r2, #4
 80037d6:	4013      	ands	r3, r2
 80037d8:	d005      	beq.n	80037e6 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	2280      	movs	r2, #128	; 0x80
 80037de:	0112      	lsls	r2, r2, #4
 80037e0:	4313      	orrs	r3, r2
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
 80037e4:	e00d      	b.n	8003802 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	2208      	movs	r2, #8
 80037ea:	4013      	ands	r3, r2
 80037ec:	d005      	beq.n	80037fa <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	2280      	movs	r2, #128	; 0x80
 80037f2:	0152      	lsls	r2, r2, #5
 80037f4:	4313      	orrs	r3, r2
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
 80037f8:	e003      	b.n	8003802 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	0018      	movs	r0, r3
 80037fe:	f000 f97d 	bl	8003afc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	2380      	movs	r3, #128	; 0x80
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	4013      	ands	r3, r2
 800380a:	d028      	beq.n	800385e <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2280      	movs	r2, #128	; 0x80
 8003812:	0052      	lsls	r2, r2, #1
 8003814:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	2380      	movs	r3, #128	; 0x80
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4013      	ands	r3, r2
 800381e:	d004      	beq.n	800382a <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	0018      	movs	r0, r3
 8003824:	f000 f95a 	bl	8003adc <HAL_CAN_TxMailbox1CompleteCallback>
 8003828:	e019      	b.n	800385e <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	4013      	ands	r3, r2
 8003832:	d005      	beq.n	8003840 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	2280      	movs	r2, #128	; 0x80
 8003838:	0192      	lsls	r2, r2, #6
 800383a:	4313      	orrs	r3, r2
 800383c:	627b      	str	r3, [r7, #36]	; 0x24
 800383e:	e00e      	b.n	800385e <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	2380      	movs	r3, #128	; 0x80
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	4013      	ands	r3, r2
 8003848:	d005      	beq.n	8003856 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	2280      	movs	r2, #128	; 0x80
 800384e:	01d2      	lsls	r2, r2, #7
 8003850:	4313      	orrs	r3, r2
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
 8003854:	e003      	b.n	800385e <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	0018      	movs	r0, r3
 800385a:	f000 f957 	bl	8003b0c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	2380      	movs	r3, #128	; 0x80
 8003862:	025b      	lsls	r3, r3, #9
 8003864:	4013      	ands	r3, r2
 8003866:	d028      	beq.n	80038ba <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2280      	movs	r2, #128	; 0x80
 800386e:	0252      	lsls	r2, r2, #9
 8003870:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	2380      	movs	r3, #128	; 0x80
 8003876:	029b      	lsls	r3, r3, #10
 8003878:	4013      	ands	r3, r2
 800387a:	d004      	beq.n	8003886 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	0018      	movs	r0, r3
 8003880:	f000 f934 	bl	8003aec <HAL_CAN_TxMailbox2CompleteCallback>
 8003884:	e019      	b.n	80038ba <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	2380      	movs	r3, #128	; 0x80
 800388a:	02db      	lsls	r3, r3, #11
 800388c:	4013      	ands	r3, r2
 800388e:	d005      	beq.n	800389c <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	2280      	movs	r2, #128	; 0x80
 8003894:	0212      	lsls	r2, r2, #8
 8003896:	4313      	orrs	r3, r2
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
 800389a:	e00e      	b.n	80038ba <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	2380      	movs	r3, #128	; 0x80
 80038a0:	031b      	lsls	r3, r3, #12
 80038a2:	4013      	ands	r3, r2
 80038a4:	d005      	beq.n	80038b2 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	2280      	movs	r2, #128	; 0x80
 80038aa:	0252      	lsls	r2, r2, #9
 80038ac:	4313      	orrs	r3, r2
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
 80038b0:	e003      	b.n	80038ba <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	0018      	movs	r0, r3
 80038b6:	f000 f931 	bl	8003b1c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	2208      	movs	r2, #8
 80038be:	4013      	ands	r3, r2
 80038c0:	d00c      	beq.n	80038dc <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2210      	movs	r2, #16
 80038c6:	4013      	ands	r3, r2
 80038c8:	d008      	beq.n	80038dc <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	2280      	movs	r2, #128	; 0x80
 80038ce:	0092      	lsls	r2, r2, #2
 80038d0:	4313      	orrs	r3, r2
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2210      	movs	r2, #16
 80038da:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	2204      	movs	r2, #4
 80038e0:	4013      	ands	r3, r2
 80038e2:	d00b      	beq.n	80038fc <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2208      	movs	r2, #8
 80038e8:	4013      	ands	r3, r2
 80038ea:	d007      	beq.n	80038fc <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2208      	movs	r2, #8
 80038f2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	0018      	movs	r0, r3
 80038f8:	f000 f918 	bl	8003b2c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	2202      	movs	r2, #2
 8003900:	4013      	ands	r3, r2
 8003902:	d009      	beq.n	8003918 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	2203      	movs	r2, #3
 800390c:	4013      	ands	r3, r2
 800390e:	d003      	beq.n	8003918 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	0018      	movs	r0, r3
 8003914:	f7fe feac 	bl	8002670 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	2240      	movs	r2, #64	; 0x40
 800391c:	4013      	ands	r3, r2
 800391e:	d00c      	beq.n	800393a <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	2210      	movs	r2, #16
 8003924:	4013      	ands	r3, r2
 8003926:	d008      	beq.n	800393a <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	2280      	movs	r2, #128	; 0x80
 800392c:	00d2      	lsls	r2, r2, #3
 800392e:	4313      	orrs	r3, r2
 8003930:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2210      	movs	r2, #16
 8003938:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	2220      	movs	r2, #32
 800393e:	4013      	ands	r3, r2
 8003940:	d00b      	beq.n	800395a <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2208      	movs	r2, #8
 8003946:	4013      	ands	r3, r2
 8003948:	d007      	beq.n	800395a <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2208      	movs	r2, #8
 8003950:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	0018      	movs	r0, r3
 8003956:	f000 f8f1 	bl	8003b3c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	2210      	movs	r2, #16
 800395e:	4013      	ands	r3, r2
 8003960:	d009      	beq.n	8003976 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	2203      	movs	r2, #3
 800396a:	4013      	ands	r3, r2
 800396c:	d003      	beq.n	8003976 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	0018      	movs	r0, r3
 8003972:	f7fe fe8a 	bl	800268a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003976:	6a3a      	ldr	r2, [r7, #32]
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	029b      	lsls	r3, r3, #10
 800397c:	4013      	ands	r3, r2
 800397e:	d00b      	beq.n	8003998 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	2210      	movs	r2, #16
 8003984:	4013      	ands	r3, r2
 8003986:	d007      	beq.n	8003998 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2210      	movs	r2, #16
 800398e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	0018      	movs	r0, r3
 8003994:	f000 f8da 	bl	8003b4c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003998:	6a3a      	ldr	r2, [r7, #32]
 800399a:	2380      	movs	r3, #128	; 0x80
 800399c:	025b      	lsls	r3, r3, #9
 800399e:	4013      	ands	r3, r2
 80039a0:	d00b      	beq.n	80039ba <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	2208      	movs	r2, #8
 80039a6:	4013      	ands	r3, r2
 80039a8:	d007      	beq.n	80039ba <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2208      	movs	r2, #8
 80039b0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	0018      	movs	r0, r3
 80039b6:	f000 f8d1 	bl	8003b5c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80039ba:	6a3a      	ldr	r2, [r7, #32]
 80039bc:	2380      	movs	r3, #128	; 0x80
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	4013      	ands	r3, r2
 80039c2:	d100      	bne.n	80039c6 <HAL_CAN_IRQHandler+0x25c>
 80039c4:	e071      	b.n	8003aaa <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	2204      	movs	r2, #4
 80039ca:	4013      	ands	r3, r2
 80039cc:	d100      	bne.n	80039d0 <HAL_CAN_IRQHandler+0x266>
 80039ce:	e068      	b.n	8003aa2 <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039d0:	6a3a      	ldr	r2, [r7, #32]
 80039d2:	2380      	movs	r3, #128	; 0x80
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	4013      	ands	r3, r2
 80039d8:	d007      	beq.n	80039ea <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2201      	movs	r2, #1
 80039de:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039e0:	d003      	beq.n	80039ea <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	2201      	movs	r2, #1
 80039e6:	4313      	orrs	r3, r2
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039ea:	6a3a      	ldr	r2, [r7, #32]
 80039ec:	2380      	movs	r3, #128	; 0x80
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4013      	ands	r3, r2
 80039f2:	d007      	beq.n	8003a04 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2202      	movs	r2, #2
 80039f8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039fa:	d003      	beq.n	8003a04 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	2202      	movs	r2, #2
 8003a00:	4313      	orrs	r3, r2
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a04:	6a3a      	ldr	r2, [r7, #32]
 8003a06:	2380      	movs	r3, #128	; 0x80
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d007      	beq.n	8003a1e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2204      	movs	r2, #4
 8003a12:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a14:	d003      	beq.n	8003a1e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	2204      	movs	r2, #4
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a1e:	6a3a      	ldr	r2, [r7, #32]
 8003a20:	2380      	movs	r3, #128	; 0x80
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	4013      	ands	r3, r2
 8003a26:	d03c      	beq.n	8003aa2 <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2270      	movs	r2, #112	; 0x70
 8003a2c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a2e:	d038      	beq.n	8003aa2 <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2270      	movs	r2, #112	; 0x70
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b30      	cmp	r3, #48	; 0x30
 8003a38:	d016      	beq.n	8003a68 <HAL_CAN_IRQHandler+0x2fe>
 8003a3a:	d804      	bhi.n	8003a46 <HAL_CAN_IRQHandler+0x2dc>
 8003a3c:	2b10      	cmp	r3, #16
 8003a3e:	d009      	beq.n	8003a54 <HAL_CAN_IRQHandler+0x2ea>
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d00c      	beq.n	8003a5e <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a44:	e025      	b.n	8003a92 <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 8003a46:	2b50      	cmp	r3, #80	; 0x50
 8003a48:	d018      	beq.n	8003a7c <HAL_CAN_IRQHandler+0x312>
 8003a4a:	2b60      	cmp	r3, #96	; 0x60
 8003a4c:	d01b      	beq.n	8003a86 <HAL_CAN_IRQHandler+0x31c>
 8003a4e:	2b40      	cmp	r3, #64	; 0x40
 8003a50:	d00f      	beq.n	8003a72 <HAL_CAN_IRQHandler+0x308>
            break;
 8003a52:	e01e      	b.n	8003a92 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	2208      	movs	r2, #8
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a5c:	e019      	b.n	8003a92 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	2210      	movs	r2, #16
 8003a62:	4313      	orrs	r3, r2
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a66:	e014      	b.n	8003a92 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a70:	e00f      	b.n	8003a92 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	2240      	movs	r2, #64	; 0x40
 8003a76:	4313      	orrs	r3, r2
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a7a:	e00a      	b.n	8003a92 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	2280      	movs	r2, #128	; 0x80
 8003a80:	4313      	orrs	r3, r2
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a84:	e005      	b.n	8003a92 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	2280      	movs	r2, #128	; 0x80
 8003a8a:	0052      	lsls	r2, r2, #1
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a90:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	699a      	ldr	r2, [r3, #24]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2170      	movs	r1, #112	; 0x70
 8003a9e:	438a      	bics	r2, r1
 8003aa0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d009      	beq.n	8003ac4 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f000 f854 	bl	8003b6c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003ac4:	46c0      	nop			; (mov r8, r8)
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b00a      	add	sp, #40	; 0x28
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003ad4:	46c0      	nop			; (mov r8, r8)
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b002      	add	sp, #8
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003ae4:	46c0      	nop			; (mov r8, r8)
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b002      	add	sp, #8
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b002      	add	sp, #8
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003b04:	46c0      	nop			; (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b002      	add	sp, #8
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b14:	46c0      	nop			; (mov r8, r8)
 8003b16:	46bd      	mov	sp, r7
 8003b18:	b002      	add	sp, #8
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b24:	46c0      	nop			; (mov r8, r8)
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b002      	add	sp, #8
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003b34:	46c0      	nop			; (mov r8, r8)
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b002      	add	sp, #8
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003b44:	46c0      	nop			; (mov r8, r8)
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b002      	add	sp, #8
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003b54:	46c0      	nop			; (mov r8, r8)
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b002      	add	sp, #8
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003b64:	46c0      	nop			; (mov r8, r8)
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b002      	add	sp, #8
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003b74:	46c0      	nop			; (mov r8, r8)
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b002      	add	sp, #8
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	0002      	movs	r2, r0
 8003b84:	1dfb      	adds	r3, r7, #7
 8003b86:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003b88:	1dfb      	adds	r3, r7, #7
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b7f      	cmp	r3, #127	; 0x7f
 8003b8e:	d809      	bhi.n	8003ba4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b90:	1dfb      	adds	r3, r7, #7
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	001a      	movs	r2, r3
 8003b96:	231f      	movs	r3, #31
 8003b98:	401a      	ands	r2, r3
 8003b9a:	4b04      	ldr	r3, [pc, #16]	; (8003bac <__NVIC_EnableIRQ+0x30>)
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	4091      	lsls	r1, r2
 8003ba0:	000a      	movs	r2, r1
 8003ba2:	601a      	str	r2, [r3, #0]
  }
}
 8003ba4:	46c0      	nop			; (mov r8, r8)
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b002      	add	sp, #8
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	e000e100 	.word	0xe000e100

08003bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bb0:	b590      	push	{r4, r7, lr}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	0002      	movs	r2, r0
 8003bb8:	6039      	str	r1, [r7, #0]
 8003bba:	1dfb      	adds	r3, r7, #7
 8003bbc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003bbe:	1dfb      	adds	r3, r7, #7
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b7f      	cmp	r3, #127	; 0x7f
 8003bc4:	d828      	bhi.n	8003c18 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003bc6:	4a2f      	ldr	r2, [pc, #188]	; (8003c84 <__NVIC_SetPriority+0xd4>)
 8003bc8:	1dfb      	adds	r3, r7, #7
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	b25b      	sxtb	r3, r3
 8003bce:	089b      	lsrs	r3, r3, #2
 8003bd0:	33c0      	adds	r3, #192	; 0xc0
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	589b      	ldr	r3, [r3, r2]
 8003bd6:	1dfa      	adds	r2, r7, #7
 8003bd8:	7812      	ldrb	r2, [r2, #0]
 8003bda:	0011      	movs	r1, r2
 8003bdc:	2203      	movs	r2, #3
 8003bde:	400a      	ands	r2, r1
 8003be0:	00d2      	lsls	r2, r2, #3
 8003be2:	21ff      	movs	r1, #255	; 0xff
 8003be4:	4091      	lsls	r1, r2
 8003be6:	000a      	movs	r2, r1
 8003be8:	43d2      	mvns	r2, r2
 8003bea:	401a      	ands	r2, r3
 8003bec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	019b      	lsls	r3, r3, #6
 8003bf2:	22ff      	movs	r2, #255	; 0xff
 8003bf4:	401a      	ands	r2, r3
 8003bf6:	1dfb      	adds	r3, r7, #7
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	4003      	ands	r3, r0
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c04:	481f      	ldr	r0, [pc, #124]	; (8003c84 <__NVIC_SetPriority+0xd4>)
 8003c06:	1dfb      	adds	r3, r7, #7
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	b25b      	sxtb	r3, r3
 8003c0c:	089b      	lsrs	r3, r3, #2
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	33c0      	adds	r3, #192	; 0xc0
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003c16:	e031      	b.n	8003c7c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c18:	4a1b      	ldr	r2, [pc, #108]	; (8003c88 <__NVIC_SetPriority+0xd8>)
 8003c1a:	1dfb      	adds	r3, r7, #7
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	0019      	movs	r1, r3
 8003c20:	230f      	movs	r3, #15
 8003c22:	400b      	ands	r3, r1
 8003c24:	3b08      	subs	r3, #8
 8003c26:	089b      	lsrs	r3, r3, #2
 8003c28:	3306      	adds	r3, #6
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	18d3      	adds	r3, r2, r3
 8003c2e:	3304      	adds	r3, #4
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	1dfa      	adds	r2, r7, #7
 8003c34:	7812      	ldrb	r2, [r2, #0]
 8003c36:	0011      	movs	r1, r2
 8003c38:	2203      	movs	r2, #3
 8003c3a:	400a      	ands	r2, r1
 8003c3c:	00d2      	lsls	r2, r2, #3
 8003c3e:	21ff      	movs	r1, #255	; 0xff
 8003c40:	4091      	lsls	r1, r2
 8003c42:	000a      	movs	r2, r1
 8003c44:	43d2      	mvns	r2, r2
 8003c46:	401a      	ands	r2, r3
 8003c48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	019b      	lsls	r3, r3, #6
 8003c4e:	22ff      	movs	r2, #255	; 0xff
 8003c50:	401a      	ands	r2, r3
 8003c52:	1dfb      	adds	r3, r7, #7
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	0018      	movs	r0, r3
 8003c58:	2303      	movs	r3, #3
 8003c5a:	4003      	ands	r3, r0
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c60:	4809      	ldr	r0, [pc, #36]	; (8003c88 <__NVIC_SetPriority+0xd8>)
 8003c62:	1dfb      	adds	r3, r7, #7
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	001c      	movs	r4, r3
 8003c68:	230f      	movs	r3, #15
 8003c6a:	4023      	ands	r3, r4
 8003c6c:	3b08      	subs	r3, #8
 8003c6e:	089b      	lsrs	r3, r3, #2
 8003c70:	430a      	orrs	r2, r1
 8003c72:	3306      	adds	r3, #6
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	18c3      	adds	r3, r0, r3
 8003c78:	3304      	adds	r3, #4
 8003c7a:	601a      	str	r2, [r3, #0]
}
 8003c7c:	46c0      	nop			; (mov r8, r8)
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b003      	add	sp, #12
 8003c82:	bd90      	pop	{r4, r7, pc}
 8003c84:	e000e100 	.word	0xe000e100
 8003c88:	e000ed00 	.word	0xe000ed00

08003c8c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	210f      	movs	r1, #15
 8003c98:	187b      	adds	r3, r7, r1
 8003c9a:	1c02      	adds	r2, r0, #0
 8003c9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	187b      	adds	r3, r7, r1
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	b25b      	sxtb	r3, r3
 8003ca6:	0011      	movs	r1, r2
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f7ff ff81 	bl	8003bb0 <__NVIC_SetPriority>
}
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	b004      	add	sp, #16
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	0002      	movs	r2, r0
 8003cbe:	1dfb      	adds	r3, r7, #7
 8003cc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cc2:	1dfb      	adds	r3, r7, #7
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	b25b      	sxtb	r3, r3
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f7ff ff57 	bl	8003b7c <__NVIC_EnableIRQ>
}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b002      	add	sp, #8
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ce6:	e155      	b.n	8003f94 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2101      	movs	r1, #1
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4091      	lsls	r1, r2
 8003cf2:	000a      	movs	r2, r1
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d100      	bne.n	8003d00 <HAL_GPIO_Init+0x28>
 8003cfe:	e146      	b.n	8003f8e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d003      	beq.n	8003d10 <HAL_GPIO_Init+0x38>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b12      	cmp	r3, #18
 8003d0e:	d123      	bne.n	8003d58 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	08da      	lsrs	r2, r3, #3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3208      	adds	r2, #8
 8003d18:	0092      	lsls	r2, r2, #2
 8003d1a:	58d3      	ldr	r3, [r2, r3]
 8003d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2207      	movs	r2, #7
 8003d22:	4013      	ands	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	220f      	movs	r2, #15
 8003d28:	409a      	lsls	r2, r3
 8003d2a:	0013      	movs	r3, r2
 8003d2c:	43da      	mvns	r2, r3
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	4013      	ands	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2107      	movs	r1, #7
 8003d3c:	400b      	ands	r3, r1
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	409a      	lsls	r2, r3
 8003d42:	0013      	movs	r3, r2
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	08da      	lsrs	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3208      	adds	r2, #8
 8003d52:	0092      	lsls	r2, r2, #2
 8003d54:	6939      	ldr	r1, [r7, #16]
 8003d56:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	2203      	movs	r2, #3
 8003d64:	409a      	lsls	r2, r3
 8003d66:	0013      	movs	r3, r2
 8003d68:	43da      	mvns	r2, r3
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2203      	movs	r2, #3
 8003d76:	401a      	ands	r2, r3
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	409a      	lsls	r2, r3
 8003d7e:	0013      	movs	r3, r2
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d00b      	beq.n	8003dac <HAL_GPIO_Init+0xd4>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d007      	beq.n	8003dac <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003da0:	2b11      	cmp	r3, #17
 8003da2:	d003      	beq.n	8003dac <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b12      	cmp	r3, #18
 8003daa:	d130      	bne.n	8003e0e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	2203      	movs	r2, #3
 8003db8:	409a      	lsls	r2, r3
 8003dba:	0013      	movs	r3, r2
 8003dbc:	43da      	mvns	r2, r3
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	0013      	movs	r3, r2
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003de2:	2201      	movs	r2, #1
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	409a      	lsls	r2, r3
 8003de8:	0013      	movs	r3, r2
 8003dea:	43da      	mvns	r2, r3
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	4013      	ands	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	091b      	lsrs	r3, r3, #4
 8003df8:	2201      	movs	r2, #1
 8003dfa:	401a      	ands	r2, r3
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	0013      	movs	r3, r2
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	2203      	movs	r2, #3
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	0013      	movs	r3, r2
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4013      	ands	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	0013      	movs	r3, r2
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	2380      	movs	r3, #128	; 0x80
 8003e44:	055b      	lsls	r3, r3, #21
 8003e46:	4013      	ands	r3, r2
 8003e48:	d100      	bne.n	8003e4c <HAL_GPIO_Init+0x174>
 8003e4a:	e0a0      	b.n	8003f8e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e4c:	4b57      	ldr	r3, [pc, #348]	; (8003fac <HAL_GPIO_Init+0x2d4>)
 8003e4e:	699a      	ldr	r2, [r3, #24]
 8003e50:	4b56      	ldr	r3, [pc, #344]	; (8003fac <HAL_GPIO_Init+0x2d4>)
 8003e52:	2101      	movs	r1, #1
 8003e54:	430a      	orrs	r2, r1
 8003e56:	619a      	str	r2, [r3, #24]
 8003e58:	4b54      	ldr	r3, [pc, #336]	; (8003fac <HAL_GPIO_Init+0x2d4>)
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	4013      	ands	r3, r2
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e64:	4a52      	ldr	r2, [pc, #328]	; (8003fb0 <HAL_GPIO_Init+0x2d8>)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	089b      	lsrs	r3, r3, #2
 8003e6a:	3302      	adds	r3, #2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	589b      	ldr	r3, [r3, r2]
 8003e70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2203      	movs	r2, #3
 8003e76:	4013      	ands	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	220f      	movs	r2, #15
 8003e7c:	409a      	lsls	r2, r3
 8003e7e:	0013      	movs	r3, r2
 8003e80:	43da      	mvns	r2, r3
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4013      	ands	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	2390      	movs	r3, #144	; 0x90
 8003e8c:	05db      	lsls	r3, r3, #23
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d019      	beq.n	8003ec6 <HAL_GPIO_Init+0x1ee>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a47      	ldr	r2, [pc, #284]	; (8003fb4 <HAL_GPIO_Init+0x2dc>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d013      	beq.n	8003ec2 <HAL_GPIO_Init+0x1ea>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a46      	ldr	r2, [pc, #280]	; (8003fb8 <HAL_GPIO_Init+0x2e0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00d      	beq.n	8003ebe <HAL_GPIO_Init+0x1e6>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a45      	ldr	r2, [pc, #276]	; (8003fbc <HAL_GPIO_Init+0x2e4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d007      	beq.n	8003eba <HAL_GPIO_Init+0x1e2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a44      	ldr	r2, [pc, #272]	; (8003fc0 <HAL_GPIO_Init+0x2e8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d101      	bne.n	8003eb6 <HAL_GPIO_Init+0x1de>
 8003eb2:	2304      	movs	r3, #4
 8003eb4:	e008      	b.n	8003ec8 <HAL_GPIO_Init+0x1f0>
 8003eb6:	2305      	movs	r3, #5
 8003eb8:	e006      	b.n	8003ec8 <HAL_GPIO_Init+0x1f0>
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e004      	b.n	8003ec8 <HAL_GPIO_Init+0x1f0>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e002      	b.n	8003ec8 <HAL_GPIO_Init+0x1f0>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <HAL_GPIO_Init+0x1f0>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	2103      	movs	r1, #3
 8003ecc:	400a      	ands	r2, r1
 8003ece:	0092      	lsls	r2, r2, #2
 8003ed0:	4093      	lsls	r3, r2
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ed8:	4935      	ldr	r1, [pc, #212]	; (8003fb0 <HAL_GPIO_Init+0x2d8>)
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	3302      	adds	r3, #2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ee6:	4b37      	ldr	r3, [pc, #220]	; (8003fc4 <HAL_GPIO_Init+0x2ec>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	43da      	mvns	r2, r3
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	2380      	movs	r3, #128	; 0x80
 8003efc:	025b      	lsls	r3, r3, #9
 8003efe:	4013      	ands	r3, r2
 8003f00:	d003      	beq.n	8003f0a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003f0a:	4b2e      	ldr	r3, [pc, #184]	; (8003fc4 <HAL_GPIO_Init+0x2ec>)
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003f10:	4b2c      	ldr	r3, [pc, #176]	; (8003fc4 <HAL_GPIO_Init+0x2ec>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	43da      	mvns	r2, r3
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	2380      	movs	r3, #128	; 0x80
 8003f26:	029b      	lsls	r3, r3, #10
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d003      	beq.n	8003f34 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f34:	4b23      	ldr	r3, [pc, #140]	; (8003fc4 <HAL_GPIO_Init+0x2ec>)
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f3a:	4b22      	ldr	r3, [pc, #136]	; (8003fc4 <HAL_GPIO_Init+0x2ec>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	43da      	mvns	r2, r3
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	4013      	ands	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	2380      	movs	r3, #128	; 0x80
 8003f50:	035b      	lsls	r3, r3, #13
 8003f52:	4013      	ands	r3, r2
 8003f54:	d003      	beq.n	8003f5e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f5e:	4b19      	ldr	r3, [pc, #100]	; (8003fc4 <HAL_GPIO_Init+0x2ec>)
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003f64:	4b17      	ldr	r3, [pc, #92]	; (8003fc4 <HAL_GPIO_Init+0x2ec>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	43da      	mvns	r2, r3
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4013      	ands	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	2380      	movs	r3, #128	; 0x80
 8003f7a:	039b      	lsls	r3, r3, #14
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d003      	beq.n	8003f88 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f88:	4b0e      	ldr	r3, [pc, #56]	; (8003fc4 <HAL_GPIO_Init+0x2ec>)
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	3301      	adds	r3, #1
 8003f92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	40da      	lsrs	r2, r3
 8003f9c:	1e13      	subs	r3, r2, #0
 8003f9e:	d000      	beq.n	8003fa2 <HAL_GPIO_Init+0x2ca>
 8003fa0:	e6a2      	b.n	8003ce8 <HAL_GPIO_Init+0x10>
  } 
}
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	b006      	add	sp, #24
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	40010000 	.word	0x40010000
 8003fb4:	48000400 	.word	0x48000400
 8003fb8:	48000800 	.word	0x48000800
 8003fbc:	48000c00 	.word	0x48000c00
 8003fc0:	48001000 	.word	0x48001000
 8003fc4:	40010400 	.word	0x40010400

08003fc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	000a      	movs	r2, r1
 8003fd2:	1cbb      	adds	r3, r7, #2
 8003fd4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	1cba      	adds	r2, r7, #2
 8003fdc:	8812      	ldrh	r2, [r2, #0]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d004      	beq.n	8003fec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003fe2:	230f      	movs	r3, #15
 8003fe4:	18fb      	adds	r3, r7, r3
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	701a      	strb	r2, [r3, #0]
 8003fea:	e003      	b.n	8003ff4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fec:	230f      	movs	r3, #15
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003ff4:	230f      	movs	r3, #15
 8003ff6:	18fb      	adds	r3, r7, r3
 8003ff8:	781b      	ldrb	r3, [r3, #0]
  }
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	b004      	add	sp, #16
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b082      	sub	sp, #8
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	0008      	movs	r0, r1
 800400c:	0011      	movs	r1, r2
 800400e:	1cbb      	adds	r3, r7, #2
 8004010:	1c02      	adds	r2, r0, #0
 8004012:	801a      	strh	r2, [r3, #0]
 8004014:	1c7b      	adds	r3, r7, #1
 8004016:	1c0a      	adds	r2, r1, #0
 8004018:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800401a:	1c7b      	adds	r3, r7, #1
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d004      	beq.n	800402c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004022:	1cbb      	adds	r3, r7, #2
 8004024:	881a      	ldrh	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800402a:	e003      	b.n	8004034 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800402c:	1cbb      	adds	r3, r7, #2
 800402e:	881a      	ldrh	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004034:	46c0      	nop			; (mov r8, r8)
 8004036:	46bd      	mov	sp, r7
 8004038:	b002      	add	sp, #8
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d102      	bne.n	8004050 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	f000 fb76 	bl	800473c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2201      	movs	r2, #1
 8004056:	4013      	ands	r3, r2
 8004058:	d100      	bne.n	800405c <HAL_RCC_OscConfig+0x20>
 800405a:	e08e      	b.n	800417a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800405c:	4bc5      	ldr	r3, [pc, #788]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	220c      	movs	r2, #12
 8004062:	4013      	ands	r3, r2
 8004064:	2b04      	cmp	r3, #4
 8004066:	d00e      	beq.n	8004086 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004068:	4bc2      	ldr	r3, [pc, #776]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	220c      	movs	r2, #12
 800406e:	4013      	ands	r3, r2
 8004070:	2b08      	cmp	r3, #8
 8004072:	d117      	bne.n	80040a4 <HAL_RCC_OscConfig+0x68>
 8004074:	4bbf      	ldr	r3, [pc, #764]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	23c0      	movs	r3, #192	; 0xc0
 800407a:	025b      	lsls	r3, r3, #9
 800407c:	401a      	ands	r2, r3
 800407e:	2380      	movs	r3, #128	; 0x80
 8004080:	025b      	lsls	r3, r3, #9
 8004082:	429a      	cmp	r2, r3
 8004084:	d10e      	bne.n	80040a4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004086:	4bbb      	ldr	r3, [pc, #748]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	2380      	movs	r3, #128	; 0x80
 800408c:	029b      	lsls	r3, r3, #10
 800408e:	4013      	ands	r3, r2
 8004090:	d100      	bne.n	8004094 <HAL_RCC_OscConfig+0x58>
 8004092:	e071      	b.n	8004178 <HAL_RCC_OscConfig+0x13c>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d000      	beq.n	800409e <HAL_RCC_OscConfig+0x62>
 800409c:	e06c      	b.n	8004178 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	f000 fb4c 	bl	800473c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d107      	bne.n	80040bc <HAL_RCC_OscConfig+0x80>
 80040ac:	4bb1      	ldr	r3, [pc, #708]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	4bb0      	ldr	r3, [pc, #704]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 80040b2:	2180      	movs	r1, #128	; 0x80
 80040b4:	0249      	lsls	r1, r1, #9
 80040b6:	430a      	orrs	r2, r1
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	e02f      	b.n	800411c <HAL_RCC_OscConfig+0xe0>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10c      	bne.n	80040de <HAL_RCC_OscConfig+0xa2>
 80040c4:	4bab      	ldr	r3, [pc, #684]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	4baa      	ldr	r3, [pc, #680]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 80040ca:	49ab      	ldr	r1, [pc, #684]	; (8004378 <HAL_RCC_OscConfig+0x33c>)
 80040cc:	400a      	ands	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	4ba8      	ldr	r3, [pc, #672]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	4ba7      	ldr	r3, [pc, #668]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 80040d6:	49a9      	ldr	r1, [pc, #676]	; (800437c <HAL_RCC_OscConfig+0x340>)
 80040d8:	400a      	ands	r2, r1
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	e01e      	b.n	800411c <HAL_RCC_OscConfig+0xe0>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b05      	cmp	r3, #5
 80040e4:	d10e      	bne.n	8004104 <HAL_RCC_OscConfig+0xc8>
 80040e6:	4ba3      	ldr	r3, [pc, #652]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	4ba2      	ldr	r3, [pc, #648]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 80040ec:	2180      	movs	r1, #128	; 0x80
 80040ee:	02c9      	lsls	r1, r1, #11
 80040f0:	430a      	orrs	r2, r1
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	4b9f      	ldr	r3, [pc, #636]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	4b9e      	ldr	r3, [pc, #632]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 80040fa:	2180      	movs	r1, #128	; 0x80
 80040fc:	0249      	lsls	r1, r1, #9
 80040fe:	430a      	orrs	r2, r1
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	e00b      	b.n	800411c <HAL_RCC_OscConfig+0xe0>
 8004104:	4b9b      	ldr	r3, [pc, #620]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	4b9a      	ldr	r3, [pc, #616]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 800410a:	499b      	ldr	r1, [pc, #620]	; (8004378 <HAL_RCC_OscConfig+0x33c>)
 800410c:	400a      	ands	r2, r1
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	4b98      	ldr	r3, [pc, #608]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4b97      	ldr	r3, [pc, #604]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 8004116:	4999      	ldr	r1, [pc, #612]	; (800437c <HAL_RCC_OscConfig+0x340>)
 8004118:	400a      	ands	r2, r1
 800411a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d014      	beq.n	800414e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004124:	f7ff f8d2 	bl	80032cc <HAL_GetTick>
 8004128:	0003      	movs	r3, r0
 800412a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800412e:	f7ff f8cd 	bl	80032cc <HAL_GetTick>
 8004132:	0002      	movs	r2, r0
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b64      	cmp	r3, #100	; 0x64
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e2fd      	b.n	800473c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004140:	4b8c      	ldr	r3, [pc, #560]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	2380      	movs	r3, #128	; 0x80
 8004146:	029b      	lsls	r3, r3, #10
 8004148:	4013      	ands	r3, r2
 800414a:	d0f0      	beq.n	800412e <HAL_RCC_OscConfig+0xf2>
 800414c:	e015      	b.n	800417a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414e:	f7ff f8bd 	bl	80032cc <HAL_GetTick>
 8004152:	0003      	movs	r3, r0
 8004154:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004158:	f7ff f8b8 	bl	80032cc <HAL_GetTick>
 800415c:	0002      	movs	r2, r0
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b64      	cmp	r3, #100	; 0x64
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e2e8      	b.n	800473c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800416a:	4b82      	ldr	r3, [pc, #520]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	2380      	movs	r3, #128	; 0x80
 8004170:	029b      	lsls	r3, r3, #10
 8004172:	4013      	ands	r3, r2
 8004174:	d1f0      	bne.n	8004158 <HAL_RCC_OscConfig+0x11c>
 8004176:	e000      	b.n	800417a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004178:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2202      	movs	r2, #2
 8004180:	4013      	ands	r3, r2
 8004182:	d100      	bne.n	8004186 <HAL_RCC_OscConfig+0x14a>
 8004184:	e06c      	b.n	8004260 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004186:	4b7b      	ldr	r3, [pc, #492]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	220c      	movs	r2, #12
 800418c:	4013      	ands	r3, r2
 800418e:	d00e      	beq.n	80041ae <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004190:	4b78      	ldr	r3, [pc, #480]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	220c      	movs	r2, #12
 8004196:	4013      	ands	r3, r2
 8004198:	2b08      	cmp	r3, #8
 800419a:	d11f      	bne.n	80041dc <HAL_RCC_OscConfig+0x1a0>
 800419c:	4b75      	ldr	r3, [pc, #468]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	23c0      	movs	r3, #192	; 0xc0
 80041a2:	025b      	lsls	r3, r3, #9
 80041a4:	401a      	ands	r2, r3
 80041a6:	2380      	movs	r3, #128	; 0x80
 80041a8:	021b      	lsls	r3, r3, #8
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d116      	bne.n	80041dc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ae:	4b71      	ldr	r3, [pc, #452]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2202      	movs	r2, #2
 80041b4:	4013      	ands	r3, r2
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_OscConfig+0x188>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d001      	beq.n	80041c4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e2bb      	b.n	800473c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c4:	4b6b      	ldr	r3, [pc, #428]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	22f8      	movs	r2, #248	; 0xf8
 80041ca:	4393      	bics	r3, r2
 80041cc:	0019      	movs	r1, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	00da      	lsls	r2, r3, #3
 80041d4:	4b67      	ldr	r3, [pc, #412]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 80041d6:	430a      	orrs	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041da:	e041      	b.n	8004260 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d024      	beq.n	800422e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041e4:	4b63      	ldr	r3, [pc, #396]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	4b62      	ldr	r3, [pc, #392]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 80041ea:	2101      	movs	r1, #1
 80041ec:	430a      	orrs	r2, r1
 80041ee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f0:	f7ff f86c 	bl	80032cc <HAL_GetTick>
 80041f4:	0003      	movs	r3, r0
 80041f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041fa:	f7ff f867 	bl	80032cc <HAL_GetTick>
 80041fe:	0002      	movs	r2, r0
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e297      	b.n	800473c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800420c:	4b59      	ldr	r3, [pc, #356]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2202      	movs	r2, #2
 8004212:	4013      	ands	r3, r2
 8004214:	d0f1      	beq.n	80041fa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004216:	4b57      	ldr	r3, [pc, #348]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	22f8      	movs	r2, #248	; 0xf8
 800421c:	4393      	bics	r3, r2
 800421e:	0019      	movs	r1, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	00da      	lsls	r2, r3, #3
 8004226:	4b53      	ldr	r3, [pc, #332]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 8004228:	430a      	orrs	r2, r1
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	e018      	b.n	8004260 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800422e:	4b51      	ldr	r3, [pc, #324]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4b50      	ldr	r3, [pc, #320]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 8004234:	2101      	movs	r1, #1
 8004236:	438a      	bics	r2, r1
 8004238:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423a:	f7ff f847 	bl	80032cc <HAL_GetTick>
 800423e:	0003      	movs	r3, r0
 8004240:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004244:	f7ff f842 	bl	80032cc <HAL_GetTick>
 8004248:	0002      	movs	r2, r0
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e272      	b.n	800473c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004256:	4b47      	ldr	r3, [pc, #284]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2202      	movs	r2, #2
 800425c:	4013      	ands	r3, r2
 800425e:	d1f1      	bne.n	8004244 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2208      	movs	r2, #8
 8004266:	4013      	ands	r3, r2
 8004268:	d036      	beq.n	80042d8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d019      	beq.n	80042a6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004272:	4b40      	ldr	r3, [pc, #256]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 8004274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004276:	4b3f      	ldr	r3, [pc, #252]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 8004278:	2101      	movs	r1, #1
 800427a:	430a      	orrs	r2, r1
 800427c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800427e:	f7ff f825 	bl	80032cc <HAL_GetTick>
 8004282:	0003      	movs	r3, r0
 8004284:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004288:	f7ff f820 	bl	80032cc <HAL_GetTick>
 800428c:	0002      	movs	r2, r0
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e250      	b.n	800473c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429a:	4b36      	ldr	r3, [pc, #216]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	2202      	movs	r2, #2
 80042a0:	4013      	ands	r3, r2
 80042a2:	d0f1      	beq.n	8004288 <HAL_RCC_OscConfig+0x24c>
 80042a4:	e018      	b.n	80042d8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a6:	4b33      	ldr	r3, [pc, #204]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 80042a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042aa:	4b32      	ldr	r3, [pc, #200]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 80042ac:	2101      	movs	r1, #1
 80042ae:	438a      	bics	r2, r1
 80042b0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b2:	f7ff f80b 	bl	80032cc <HAL_GetTick>
 80042b6:	0003      	movs	r3, r0
 80042b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042bc:	f7ff f806 	bl	80032cc <HAL_GetTick>
 80042c0:	0002      	movs	r2, r0
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e236      	b.n	800473c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ce:	4b29      	ldr	r3, [pc, #164]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	2202      	movs	r2, #2
 80042d4:	4013      	ands	r3, r2
 80042d6:	d1f1      	bne.n	80042bc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2204      	movs	r2, #4
 80042de:	4013      	ands	r3, r2
 80042e0:	d100      	bne.n	80042e4 <HAL_RCC_OscConfig+0x2a8>
 80042e2:	e0b5      	b.n	8004450 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042e4:	201f      	movs	r0, #31
 80042e6:	183b      	adds	r3, r7, r0
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ec:	4b21      	ldr	r3, [pc, #132]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 80042ee:	69da      	ldr	r2, [r3, #28]
 80042f0:	2380      	movs	r3, #128	; 0x80
 80042f2:	055b      	lsls	r3, r3, #21
 80042f4:	4013      	ands	r3, r2
 80042f6:	d110      	bne.n	800431a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f8:	4b1e      	ldr	r3, [pc, #120]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 80042fa:	69da      	ldr	r2, [r3, #28]
 80042fc:	4b1d      	ldr	r3, [pc, #116]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 80042fe:	2180      	movs	r1, #128	; 0x80
 8004300:	0549      	lsls	r1, r1, #21
 8004302:	430a      	orrs	r2, r1
 8004304:	61da      	str	r2, [r3, #28]
 8004306:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 8004308:	69da      	ldr	r2, [r3, #28]
 800430a:	2380      	movs	r3, #128	; 0x80
 800430c:	055b      	lsls	r3, r3, #21
 800430e:	4013      	ands	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004314:	183b      	adds	r3, r7, r0
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431a:	4b19      	ldr	r3, [pc, #100]	; (8004380 <HAL_RCC_OscConfig+0x344>)
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	2380      	movs	r3, #128	; 0x80
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	4013      	ands	r3, r2
 8004324:	d11a      	bne.n	800435c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004326:	4b16      	ldr	r3, [pc, #88]	; (8004380 <HAL_RCC_OscConfig+0x344>)
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4b15      	ldr	r3, [pc, #84]	; (8004380 <HAL_RCC_OscConfig+0x344>)
 800432c:	2180      	movs	r1, #128	; 0x80
 800432e:	0049      	lsls	r1, r1, #1
 8004330:	430a      	orrs	r2, r1
 8004332:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004334:	f7fe ffca 	bl	80032cc <HAL_GetTick>
 8004338:	0003      	movs	r3, r0
 800433a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800433e:	f7fe ffc5 	bl	80032cc <HAL_GetTick>
 8004342:	0002      	movs	r2, r0
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b64      	cmp	r3, #100	; 0x64
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e1f5      	b.n	800473c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <HAL_RCC_OscConfig+0x344>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	4013      	ands	r3, r2
 800435a:	d0f0      	beq.n	800433e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d10f      	bne.n	8004384 <HAL_RCC_OscConfig+0x348>
 8004364:	4b03      	ldr	r3, [pc, #12]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 8004366:	6a1a      	ldr	r2, [r3, #32]
 8004368:	4b02      	ldr	r3, [pc, #8]	; (8004374 <HAL_RCC_OscConfig+0x338>)
 800436a:	2101      	movs	r1, #1
 800436c:	430a      	orrs	r2, r1
 800436e:	621a      	str	r2, [r3, #32]
 8004370:	e036      	b.n	80043e0 <HAL_RCC_OscConfig+0x3a4>
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	40021000 	.word	0x40021000
 8004378:	fffeffff 	.word	0xfffeffff
 800437c:	fffbffff 	.word	0xfffbffff
 8004380:	40007000 	.word	0x40007000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10c      	bne.n	80043a6 <HAL_RCC_OscConfig+0x36a>
 800438c:	4bca      	ldr	r3, [pc, #808]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 800438e:	6a1a      	ldr	r2, [r3, #32]
 8004390:	4bc9      	ldr	r3, [pc, #804]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 8004392:	2101      	movs	r1, #1
 8004394:	438a      	bics	r2, r1
 8004396:	621a      	str	r2, [r3, #32]
 8004398:	4bc7      	ldr	r3, [pc, #796]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 800439a:	6a1a      	ldr	r2, [r3, #32]
 800439c:	4bc6      	ldr	r3, [pc, #792]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 800439e:	2104      	movs	r1, #4
 80043a0:	438a      	bics	r2, r1
 80043a2:	621a      	str	r2, [r3, #32]
 80043a4:	e01c      	b.n	80043e0 <HAL_RCC_OscConfig+0x3a4>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b05      	cmp	r3, #5
 80043ac:	d10c      	bne.n	80043c8 <HAL_RCC_OscConfig+0x38c>
 80043ae:	4bc2      	ldr	r3, [pc, #776]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80043b0:	6a1a      	ldr	r2, [r3, #32]
 80043b2:	4bc1      	ldr	r3, [pc, #772]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80043b4:	2104      	movs	r1, #4
 80043b6:	430a      	orrs	r2, r1
 80043b8:	621a      	str	r2, [r3, #32]
 80043ba:	4bbf      	ldr	r3, [pc, #764]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80043bc:	6a1a      	ldr	r2, [r3, #32]
 80043be:	4bbe      	ldr	r3, [pc, #760]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80043c0:	2101      	movs	r1, #1
 80043c2:	430a      	orrs	r2, r1
 80043c4:	621a      	str	r2, [r3, #32]
 80043c6:	e00b      	b.n	80043e0 <HAL_RCC_OscConfig+0x3a4>
 80043c8:	4bbb      	ldr	r3, [pc, #748]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80043ca:	6a1a      	ldr	r2, [r3, #32]
 80043cc:	4bba      	ldr	r3, [pc, #744]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80043ce:	2101      	movs	r1, #1
 80043d0:	438a      	bics	r2, r1
 80043d2:	621a      	str	r2, [r3, #32]
 80043d4:	4bb8      	ldr	r3, [pc, #736]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80043d6:	6a1a      	ldr	r2, [r3, #32]
 80043d8:	4bb7      	ldr	r3, [pc, #732]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80043da:	2104      	movs	r1, #4
 80043dc:	438a      	bics	r2, r1
 80043de:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d014      	beq.n	8004412 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e8:	f7fe ff70 	bl	80032cc <HAL_GetTick>
 80043ec:	0003      	movs	r3, r0
 80043ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f0:	e009      	b.n	8004406 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043f2:	f7fe ff6b 	bl	80032cc <HAL_GetTick>
 80043f6:	0002      	movs	r2, r0
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	4aaf      	ldr	r2, [pc, #700]	; (80046bc <HAL_RCC_OscConfig+0x680>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e19a      	b.n	800473c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004406:	4bac      	ldr	r3, [pc, #688]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	2202      	movs	r2, #2
 800440c:	4013      	ands	r3, r2
 800440e:	d0f0      	beq.n	80043f2 <HAL_RCC_OscConfig+0x3b6>
 8004410:	e013      	b.n	800443a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004412:	f7fe ff5b 	bl	80032cc <HAL_GetTick>
 8004416:	0003      	movs	r3, r0
 8004418:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800441a:	e009      	b.n	8004430 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800441c:	f7fe ff56 	bl	80032cc <HAL_GetTick>
 8004420:	0002      	movs	r2, r0
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	4aa5      	ldr	r2, [pc, #660]	; (80046bc <HAL_RCC_OscConfig+0x680>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e185      	b.n	800473c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004430:	4ba1      	ldr	r3, [pc, #644]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	2202      	movs	r2, #2
 8004436:	4013      	ands	r3, r2
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800443a:	231f      	movs	r3, #31
 800443c:	18fb      	adds	r3, r7, r3
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d105      	bne.n	8004450 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004444:	4b9c      	ldr	r3, [pc, #624]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 8004446:	69da      	ldr	r2, [r3, #28]
 8004448:	4b9b      	ldr	r3, [pc, #620]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 800444a:	499d      	ldr	r1, [pc, #628]	; (80046c0 <HAL_RCC_OscConfig+0x684>)
 800444c:	400a      	ands	r2, r1
 800444e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2210      	movs	r2, #16
 8004456:	4013      	ands	r3, r2
 8004458:	d063      	beq.n	8004522 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d12a      	bne.n	80044b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004462:	4b95      	ldr	r3, [pc, #596]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 8004464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004466:	4b94      	ldr	r3, [pc, #592]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 8004468:	2104      	movs	r1, #4
 800446a:	430a      	orrs	r2, r1
 800446c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800446e:	4b92      	ldr	r3, [pc, #584]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 8004470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004472:	4b91      	ldr	r3, [pc, #580]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 8004474:	2101      	movs	r1, #1
 8004476:	430a      	orrs	r2, r1
 8004478:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800447a:	f7fe ff27 	bl	80032cc <HAL_GetTick>
 800447e:	0003      	movs	r3, r0
 8004480:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004484:	f7fe ff22 	bl	80032cc <HAL_GetTick>
 8004488:	0002      	movs	r2, r0
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e152      	b.n	800473c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004496:	4b88      	ldr	r3, [pc, #544]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 8004498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449a:	2202      	movs	r2, #2
 800449c:	4013      	ands	r3, r2
 800449e:	d0f1      	beq.n	8004484 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80044a0:	4b85      	ldr	r3, [pc, #532]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80044a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a4:	22f8      	movs	r2, #248	; 0xf8
 80044a6:	4393      	bics	r3, r2
 80044a8:	0019      	movs	r1, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	00da      	lsls	r2, r3, #3
 80044b0:	4b81      	ldr	r3, [pc, #516]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80044b2:	430a      	orrs	r2, r1
 80044b4:	635a      	str	r2, [r3, #52]	; 0x34
 80044b6:	e034      	b.n	8004522 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	3305      	adds	r3, #5
 80044be:	d111      	bne.n	80044e4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80044c0:	4b7d      	ldr	r3, [pc, #500]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80044c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044c4:	4b7c      	ldr	r3, [pc, #496]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80044c6:	2104      	movs	r1, #4
 80044c8:	438a      	bics	r2, r1
 80044ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80044cc:	4b7a      	ldr	r3, [pc, #488]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80044ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d0:	22f8      	movs	r2, #248	; 0xf8
 80044d2:	4393      	bics	r3, r2
 80044d4:	0019      	movs	r1, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	00da      	lsls	r2, r3, #3
 80044dc:	4b76      	ldr	r3, [pc, #472]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80044de:	430a      	orrs	r2, r1
 80044e0:	635a      	str	r2, [r3, #52]	; 0x34
 80044e2:	e01e      	b.n	8004522 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80044e4:	4b74      	ldr	r3, [pc, #464]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80044e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044e8:	4b73      	ldr	r3, [pc, #460]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80044ea:	2104      	movs	r1, #4
 80044ec:	430a      	orrs	r2, r1
 80044ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80044f0:	4b71      	ldr	r3, [pc, #452]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80044f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044f4:	4b70      	ldr	r3, [pc, #448]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80044f6:	2101      	movs	r1, #1
 80044f8:	438a      	bics	r2, r1
 80044fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044fc:	f7fe fee6 	bl	80032cc <HAL_GetTick>
 8004500:	0003      	movs	r3, r0
 8004502:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004506:	f7fe fee1 	bl	80032cc <HAL_GetTick>
 800450a:	0002      	movs	r2, r0
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e111      	b.n	800473c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004518:	4b67      	ldr	r3, [pc, #412]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 800451a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451c:	2202      	movs	r2, #2
 800451e:	4013      	ands	r3, r2
 8004520:	d1f1      	bne.n	8004506 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2220      	movs	r2, #32
 8004528:	4013      	ands	r3, r2
 800452a:	d05c      	beq.n	80045e6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800452c:	4b62      	ldr	r3, [pc, #392]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	220c      	movs	r2, #12
 8004532:	4013      	ands	r3, r2
 8004534:	2b0c      	cmp	r3, #12
 8004536:	d00e      	beq.n	8004556 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004538:	4b5f      	ldr	r3, [pc, #380]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	220c      	movs	r2, #12
 800453e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004540:	2b08      	cmp	r3, #8
 8004542:	d114      	bne.n	800456e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004544:	4b5c      	ldr	r3, [pc, #368]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	23c0      	movs	r3, #192	; 0xc0
 800454a:	025b      	lsls	r3, r3, #9
 800454c:	401a      	ands	r2, r3
 800454e:	23c0      	movs	r3, #192	; 0xc0
 8004550:	025b      	lsls	r3, r3, #9
 8004552:	429a      	cmp	r2, r3
 8004554:	d10b      	bne.n	800456e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004556:	4b58      	ldr	r3, [pc, #352]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 8004558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800455a:	2380      	movs	r3, #128	; 0x80
 800455c:	025b      	lsls	r3, r3, #9
 800455e:	4013      	ands	r3, r2
 8004560:	d040      	beq.n	80045e4 <HAL_RCC_OscConfig+0x5a8>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d03c      	beq.n	80045e4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e0e6      	b.n	800473c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d01b      	beq.n	80045ae <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004576:	4b50      	ldr	r3, [pc, #320]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 8004578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800457a:	4b4f      	ldr	r3, [pc, #316]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 800457c:	2180      	movs	r1, #128	; 0x80
 800457e:	0249      	lsls	r1, r1, #9
 8004580:	430a      	orrs	r2, r1
 8004582:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004584:	f7fe fea2 	bl	80032cc <HAL_GetTick>
 8004588:	0003      	movs	r3, r0
 800458a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800458e:	f7fe fe9d 	bl	80032cc <HAL_GetTick>
 8004592:	0002      	movs	r2, r0
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e0cd      	b.n	800473c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80045a0:	4b45      	ldr	r3, [pc, #276]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80045a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a4:	2380      	movs	r3, #128	; 0x80
 80045a6:	025b      	lsls	r3, r3, #9
 80045a8:	4013      	ands	r3, r2
 80045aa:	d0f0      	beq.n	800458e <HAL_RCC_OscConfig+0x552>
 80045ac:	e01b      	b.n	80045e6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80045ae:	4b42      	ldr	r3, [pc, #264]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80045b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045b2:	4b41      	ldr	r3, [pc, #260]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80045b4:	4943      	ldr	r1, [pc, #268]	; (80046c4 <HAL_RCC_OscConfig+0x688>)
 80045b6:	400a      	ands	r2, r1
 80045b8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ba:	f7fe fe87 	bl	80032cc <HAL_GetTick>
 80045be:	0003      	movs	r3, r0
 80045c0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045c4:	f7fe fe82 	bl	80032cc <HAL_GetTick>
 80045c8:	0002      	movs	r2, r0
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e0b2      	b.n	800473c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80045d6:	4b38      	ldr	r3, [pc, #224]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80045d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045da:	2380      	movs	r3, #128	; 0x80
 80045dc:	025b      	lsls	r3, r3, #9
 80045de:	4013      	ands	r3, r2
 80045e0:	d1f0      	bne.n	80045c4 <HAL_RCC_OscConfig+0x588>
 80045e2:	e000      	b.n	80045e6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80045e4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d100      	bne.n	80045f0 <HAL_RCC_OscConfig+0x5b4>
 80045ee:	e0a4      	b.n	800473a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045f0:	4b31      	ldr	r3, [pc, #196]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	220c      	movs	r2, #12
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d100      	bne.n	80045fe <HAL_RCC_OscConfig+0x5c2>
 80045fc:	e078      	b.n	80046f0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	2b02      	cmp	r3, #2
 8004604:	d14c      	bne.n	80046a0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004606:	4b2c      	ldr	r3, [pc, #176]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	4b2b      	ldr	r3, [pc, #172]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 800460c:	492e      	ldr	r1, [pc, #184]	; (80046c8 <HAL_RCC_OscConfig+0x68c>)
 800460e:	400a      	ands	r2, r1
 8004610:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004612:	f7fe fe5b 	bl	80032cc <HAL_GetTick>
 8004616:	0003      	movs	r3, r0
 8004618:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800461c:	f7fe fe56 	bl	80032cc <HAL_GetTick>
 8004620:	0002      	movs	r2, r0
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e086      	b.n	800473c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800462e:	4b22      	ldr	r3, [pc, #136]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	2380      	movs	r3, #128	; 0x80
 8004634:	049b      	lsls	r3, r3, #18
 8004636:	4013      	ands	r3, r2
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800463a:	4b1f      	ldr	r3, [pc, #124]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	220f      	movs	r2, #15
 8004640:	4393      	bics	r3, r2
 8004642:	0019      	movs	r1, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004648:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 800464a:	430a      	orrs	r2, r1
 800464c:	62da      	str	r2, [r3, #44]	; 0x2c
 800464e:	4b1a      	ldr	r3, [pc, #104]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4a1e      	ldr	r2, [pc, #120]	; (80046cc <HAL_RCC_OscConfig+0x690>)
 8004654:	4013      	ands	r3, r2
 8004656:	0019      	movs	r1, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004660:	431a      	orrs	r2, r3
 8004662:	4b15      	ldr	r3, [pc, #84]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 8004664:	430a      	orrs	r2, r1
 8004666:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004668:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	4b12      	ldr	r3, [pc, #72]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 800466e:	2180      	movs	r1, #128	; 0x80
 8004670:	0449      	lsls	r1, r1, #17
 8004672:	430a      	orrs	r2, r1
 8004674:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004676:	f7fe fe29 	bl	80032cc <HAL_GetTick>
 800467a:	0003      	movs	r3, r0
 800467c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004680:	f7fe fe24 	bl	80032cc <HAL_GetTick>
 8004684:	0002      	movs	r2, r0
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e054      	b.n	800473c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004692:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	2380      	movs	r3, #128	; 0x80
 8004698:	049b      	lsls	r3, r3, #18
 800469a:	4013      	ands	r3, r2
 800469c:	d0f0      	beq.n	8004680 <HAL_RCC_OscConfig+0x644>
 800469e:	e04c      	b.n	800473a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046a0:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4b04      	ldr	r3, [pc, #16]	; (80046b8 <HAL_RCC_OscConfig+0x67c>)
 80046a6:	4908      	ldr	r1, [pc, #32]	; (80046c8 <HAL_RCC_OscConfig+0x68c>)
 80046a8:	400a      	ands	r2, r1
 80046aa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ac:	f7fe fe0e 	bl	80032cc <HAL_GetTick>
 80046b0:	0003      	movs	r3, r0
 80046b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046b4:	e015      	b.n	80046e2 <HAL_RCC_OscConfig+0x6a6>
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	40021000 	.word	0x40021000
 80046bc:	00001388 	.word	0x00001388
 80046c0:	efffffff 	.word	0xefffffff
 80046c4:	fffeffff 	.word	0xfffeffff
 80046c8:	feffffff 	.word	0xfeffffff
 80046cc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d0:	f7fe fdfc 	bl	80032cc <HAL_GetTick>
 80046d4:	0002      	movs	r2, r0
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e02c      	b.n	800473c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046e2:	4b18      	ldr	r3, [pc, #96]	; (8004744 <HAL_RCC_OscConfig+0x708>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	2380      	movs	r3, #128	; 0x80
 80046e8:	049b      	lsls	r3, r3, #18
 80046ea:	4013      	ands	r3, r2
 80046ec:	d1f0      	bne.n	80046d0 <HAL_RCC_OscConfig+0x694>
 80046ee:	e024      	b.n	800473a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e01f      	b.n	800473c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80046fc:	4b11      	ldr	r3, [pc, #68]	; (8004744 <HAL_RCC_OscConfig+0x708>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004702:	4b10      	ldr	r3, [pc, #64]	; (8004744 <HAL_RCC_OscConfig+0x708>)
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004706:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	23c0      	movs	r3, #192	; 0xc0
 800470c:	025b      	lsls	r3, r3, #9
 800470e:	401a      	ands	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	429a      	cmp	r2, r3
 8004716:	d10e      	bne.n	8004736 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	220f      	movs	r2, #15
 800471c:	401a      	ands	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004722:	429a      	cmp	r2, r3
 8004724:	d107      	bne.n	8004736 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	23f0      	movs	r3, #240	; 0xf0
 800472a:	039b      	lsls	r3, r3, #14
 800472c:	401a      	ands	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004732:	429a      	cmp	r2, r3
 8004734:	d001      	beq.n	800473a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	0018      	movs	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	b008      	add	sp, #32
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40021000 	.word	0x40021000

08004748 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0bf      	b.n	80048dc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800475c:	4b61      	ldr	r3, [pc, #388]	; (80048e4 <HAL_RCC_ClockConfig+0x19c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2201      	movs	r2, #1
 8004762:	4013      	ands	r3, r2
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d911      	bls.n	800478e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476a:	4b5e      	ldr	r3, [pc, #376]	; (80048e4 <HAL_RCC_ClockConfig+0x19c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2201      	movs	r2, #1
 8004770:	4393      	bics	r3, r2
 8004772:	0019      	movs	r1, r3
 8004774:	4b5b      	ldr	r3, [pc, #364]	; (80048e4 <HAL_RCC_ClockConfig+0x19c>)
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800477c:	4b59      	ldr	r3, [pc, #356]	; (80048e4 <HAL_RCC_ClockConfig+0x19c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2201      	movs	r2, #1
 8004782:	4013      	ands	r3, r2
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d001      	beq.n	800478e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e0a6      	b.n	80048dc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2202      	movs	r2, #2
 8004794:	4013      	ands	r3, r2
 8004796:	d015      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2204      	movs	r2, #4
 800479e:	4013      	ands	r3, r2
 80047a0:	d006      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80047a2:	4b51      	ldr	r3, [pc, #324]	; (80048e8 <HAL_RCC_ClockConfig+0x1a0>)
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	4b50      	ldr	r3, [pc, #320]	; (80048e8 <HAL_RCC_ClockConfig+0x1a0>)
 80047a8:	21e0      	movs	r1, #224	; 0xe0
 80047aa:	00c9      	lsls	r1, r1, #3
 80047ac:	430a      	orrs	r2, r1
 80047ae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b0:	4b4d      	ldr	r3, [pc, #308]	; (80048e8 <HAL_RCC_ClockConfig+0x1a0>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	22f0      	movs	r2, #240	; 0xf0
 80047b6:	4393      	bics	r3, r2
 80047b8:	0019      	movs	r1, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	4b4a      	ldr	r3, [pc, #296]	; (80048e8 <HAL_RCC_ClockConfig+0x1a0>)
 80047c0:	430a      	orrs	r2, r1
 80047c2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2201      	movs	r2, #1
 80047ca:	4013      	ands	r3, r2
 80047cc:	d04c      	beq.n	8004868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d107      	bne.n	80047e6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d6:	4b44      	ldr	r3, [pc, #272]	; (80048e8 <HAL_RCC_ClockConfig+0x1a0>)
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	2380      	movs	r3, #128	; 0x80
 80047dc:	029b      	lsls	r3, r3, #10
 80047de:	4013      	ands	r3, r2
 80047e0:	d120      	bne.n	8004824 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e07a      	b.n	80048dc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d107      	bne.n	80047fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ee:	4b3e      	ldr	r3, [pc, #248]	; (80048e8 <HAL_RCC_ClockConfig+0x1a0>)
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	2380      	movs	r3, #128	; 0x80
 80047f4:	049b      	lsls	r3, r3, #18
 80047f6:	4013      	ands	r3, r2
 80047f8:	d114      	bne.n	8004824 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e06e      	b.n	80048dc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2b03      	cmp	r3, #3
 8004804:	d107      	bne.n	8004816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004806:	4b38      	ldr	r3, [pc, #224]	; (80048e8 <HAL_RCC_ClockConfig+0x1a0>)
 8004808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800480a:	2380      	movs	r3, #128	; 0x80
 800480c:	025b      	lsls	r3, r3, #9
 800480e:	4013      	ands	r3, r2
 8004810:	d108      	bne.n	8004824 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e062      	b.n	80048dc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004816:	4b34      	ldr	r3, [pc, #208]	; (80048e8 <HAL_RCC_ClockConfig+0x1a0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2202      	movs	r2, #2
 800481c:	4013      	ands	r3, r2
 800481e:	d101      	bne.n	8004824 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e05b      	b.n	80048dc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004824:	4b30      	ldr	r3, [pc, #192]	; (80048e8 <HAL_RCC_ClockConfig+0x1a0>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	2203      	movs	r2, #3
 800482a:	4393      	bics	r3, r2
 800482c:	0019      	movs	r1, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	4b2d      	ldr	r3, [pc, #180]	; (80048e8 <HAL_RCC_ClockConfig+0x1a0>)
 8004834:	430a      	orrs	r2, r1
 8004836:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004838:	f7fe fd48 	bl	80032cc <HAL_GetTick>
 800483c:	0003      	movs	r3, r0
 800483e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004840:	e009      	b.n	8004856 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004842:	f7fe fd43 	bl	80032cc <HAL_GetTick>
 8004846:	0002      	movs	r2, r0
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	4a27      	ldr	r2, [pc, #156]	; (80048ec <HAL_RCC_ClockConfig+0x1a4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e042      	b.n	80048dc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004856:	4b24      	ldr	r3, [pc, #144]	; (80048e8 <HAL_RCC_ClockConfig+0x1a0>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	220c      	movs	r2, #12
 800485c:	401a      	ands	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	429a      	cmp	r2, r3
 8004866:	d1ec      	bne.n	8004842 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004868:	4b1e      	ldr	r3, [pc, #120]	; (80048e4 <HAL_RCC_ClockConfig+0x19c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2201      	movs	r2, #1
 800486e:	4013      	ands	r3, r2
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d211      	bcs.n	800489a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004876:	4b1b      	ldr	r3, [pc, #108]	; (80048e4 <HAL_RCC_ClockConfig+0x19c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2201      	movs	r2, #1
 800487c:	4393      	bics	r3, r2
 800487e:	0019      	movs	r1, r3
 8004880:	4b18      	ldr	r3, [pc, #96]	; (80048e4 <HAL_RCC_ClockConfig+0x19c>)
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004888:	4b16      	ldr	r3, [pc, #88]	; (80048e4 <HAL_RCC_ClockConfig+0x19c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2201      	movs	r2, #1
 800488e:	4013      	ands	r3, r2
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d001      	beq.n	800489a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e020      	b.n	80048dc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2204      	movs	r2, #4
 80048a0:	4013      	ands	r3, r2
 80048a2:	d009      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80048a4:	4b10      	ldr	r3, [pc, #64]	; (80048e8 <HAL_RCC_ClockConfig+0x1a0>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	4a11      	ldr	r2, [pc, #68]	; (80048f0 <HAL_RCC_ClockConfig+0x1a8>)
 80048aa:	4013      	ands	r3, r2
 80048ac:	0019      	movs	r1, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <HAL_RCC_ClockConfig+0x1a0>)
 80048b4:	430a      	orrs	r2, r1
 80048b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80048b8:	f000 f820 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 80048bc:	0001      	movs	r1, r0
 80048be:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <HAL_RCC_ClockConfig+0x1a0>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	091b      	lsrs	r3, r3, #4
 80048c4:	220f      	movs	r2, #15
 80048c6:	4013      	ands	r3, r2
 80048c8:	4a0a      	ldr	r2, [pc, #40]	; (80048f4 <HAL_RCC_ClockConfig+0x1ac>)
 80048ca:	5cd3      	ldrb	r3, [r2, r3]
 80048cc:	000a      	movs	r2, r1
 80048ce:	40da      	lsrs	r2, r3
 80048d0:	4b09      	ldr	r3, [pc, #36]	; (80048f8 <HAL_RCC_ClockConfig+0x1b0>)
 80048d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80048d4:	2000      	movs	r0, #0
 80048d6:	f7fe fc27 	bl	8003128 <HAL_InitTick>
  
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	0018      	movs	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	b004      	add	sp, #16
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40022000 	.word	0x40022000
 80048e8:	40021000 	.word	0x40021000
 80048ec:	00001388 	.word	0x00001388
 80048f0:	fffff8ff 	.word	0xfffff8ff
 80048f4:	08008614 	.word	0x08008614
 80048f8:	200000f8 	.word	0x200000f8

080048fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048fc:	b590      	push	{r4, r7, lr}
 80048fe:	b08f      	sub	sp, #60	; 0x3c
 8004900:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004902:	2314      	movs	r3, #20
 8004904:	18fb      	adds	r3, r7, r3
 8004906:	4a37      	ldr	r2, [pc, #220]	; (80049e4 <HAL_RCC_GetSysClockFreq+0xe8>)
 8004908:	ca13      	ldmia	r2!, {r0, r1, r4}
 800490a:	c313      	stmia	r3!, {r0, r1, r4}
 800490c:	6812      	ldr	r2, [r2, #0]
 800490e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004910:	1d3b      	adds	r3, r7, #4
 8004912:	4a35      	ldr	r2, [pc, #212]	; (80049e8 <HAL_RCC_GetSysClockFreq+0xec>)
 8004914:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004916:	c313      	stmia	r3!, {r0, r1, r4}
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004920:	2300      	movs	r3, #0
 8004922:	62bb      	str	r3, [r7, #40]	; 0x28
 8004924:	2300      	movs	r3, #0
 8004926:	637b      	str	r3, [r7, #52]	; 0x34
 8004928:	2300      	movs	r3, #0
 800492a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004930:	4b2e      	ldr	r3, [pc, #184]	; (80049ec <HAL_RCC_GetSysClockFreq+0xf0>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004938:	220c      	movs	r2, #12
 800493a:	4013      	ands	r3, r2
 800493c:	2b08      	cmp	r3, #8
 800493e:	d006      	beq.n	800494e <HAL_RCC_GetSysClockFreq+0x52>
 8004940:	2b0c      	cmp	r3, #12
 8004942:	d043      	beq.n	80049cc <HAL_RCC_GetSysClockFreq+0xd0>
 8004944:	2b04      	cmp	r3, #4
 8004946:	d144      	bne.n	80049d2 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004948:	4b29      	ldr	r3, [pc, #164]	; (80049f0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800494a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800494c:	e044      	b.n	80049d8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800494e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004950:	0c9b      	lsrs	r3, r3, #18
 8004952:	220f      	movs	r2, #15
 8004954:	4013      	ands	r3, r2
 8004956:	2214      	movs	r2, #20
 8004958:	18ba      	adds	r2, r7, r2
 800495a:	5cd3      	ldrb	r3, [r2, r3]
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800495e:	4b23      	ldr	r3, [pc, #140]	; (80049ec <HAL_RCC_GetSysClockFreq+0xf0>)
 8004960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004962:	220f      	movs	r2, #15
 8004964:	4013      	ands	r3, r2
 8004966:	1d3a      	adds	r2, r7, #4
 8004968:	5cd3      	ldrb	r3, [r2, r3]
 800496a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800496c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800496e:	23c0      	movs	r3, #192	; 0xc0
 8004970:	025b      	lsls	r3, r3, #9
 8004972:	401a      	ands	r2, r3
 8004974:	2380      	movs	r3, #128	; 0x80
 8004976:	025b      	lsls	r3, r3, #9
 8004978:	429a      	cmp	r2, r3
 800497a:	d109      	bne.n	8004990 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800497c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800497e:	481c      	ldr	r0, [pc, #112]	; (80049f0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004980:	f7fb fbc2 	bl	8000108 <__udivsi3>
 8004984:	0003      	movs	r3, r0
 8004986:	001a      	movs	r2, r3
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	4353      	muls	r3, r2
 800498c:	637b      	str	r3, [r7, #52]	; 0x34
 800498e:	e01a      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004992:	23c0      	movs	r3, #192	; 0xc0
 8004994:	025b      	lsls	r3, r3, #9
 8004996:	401a      	ands	r2, r3
 8004998:	23c0      	movs	r3, #192	; 0xc0
 800499a:	025b      	lsls	r3, r3, #9
 800499c:	429a      	cmp	r2, r3
 800499e:	d109      	bne.n	80049b4 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80049a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049a2:	4814      	ldr	r0, [pc, #80]	; (80049f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049a4:	f7fb fbb0 	bl	8000108 <__udivsi3>
 80049a8:	0003      	movs	r3, r0
 80049aa:	001a      	movs	r2, r3
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	4353      	muls	r3, r2
 80049b0:	637b      	str	r3, [r7, #52]	; 0x34
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80049b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049b6:	480e      	ldr	r0, [pc, #56]	; (80049f0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80049b8:	f7fb fba6 	bl	8000108 <__udivsi3>
 80049bc:	0003      	movs	r3, r0
 80049be:	001a      	movs	r2, r3
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	4353      	muls	r3, r2
 80049c4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80049c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80049ca:	e005      	b.n	80049d8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80049cc:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80049d0:	e002      	b.n	80049d8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049d2:	4b07      	ldr	r3, [pc, #28]	; (80049f0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80049d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80049d6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80049d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80049da:	0018      	movs	r0, r3
 80049dc:	46bd      	mov	sp, r7
 80049de:	b00f      	add	sp, #60	; 0x3c
 80049e0:	bd90      	pop	{r4, r7, pc}
 80049e2:	46c0      	nop			; (mov r8, r8)
 80049e4:	0800850c 	.word	0x0800850c
 80049e8:	0800851c 	.word	0x0800851c
 80049ec:	40021000 	.word	0x40021000
 80049f0:	007a1200 	.word	0x007a1200
 80049f4:	02dc6c00 	.word	0x02dc6c00

080049f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049fc:	4b02      	ldr	r3, [pc, #8]	; (8004a08 <HAL_RCC_GetHCLKFreq+0x10>)
 80049fe:	681b      	ldr	r3, [r3, #0]
}
 8004a00:	0018      	movs	r0, r3
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	200000f8 	.word	0x200000f8

08004a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004a10:	f7ff fff2 	bl	80049f8 <HAL_RCC_GetHCLKFreq>
 8004a14:	0001      	movs	r1, r0
 8004a16:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	0a1b      	lsrs	r3, r3, #8
 8004a1c:	2207      	movs	r2, #7
 8004a1e:	4013      	ands	r3, r2
 8004a20:	4a04      	ldr	r2, [pc, #16]	; (8004a34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a22:	5cd3      	ldrb	r3, [r2, r3]
 8004a24:	40d9      	lsrs	r1, r3
 8004a26:	000b      	movs	r3, r1
}    
 8004a28:	0018      	movs	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	46c0      	nop			; (mov r8, r8)
 8004a30:	40021000 	.word	0x40021000
 8004a34:	08008624 	.word	0x08008624

08004a38 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2207      	movs	r2, #7
 8004a46:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a48:	4b0e      	ldr	r3, [pc, #56]	; (8004a84 <HAL_RCC_GetClockConfig+0x4c>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2203      	movs	r2, #3
 8004a4e:	401a      	ands	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004a54:	4b0b      	ldr	r3, [pc, #44]	; (8004a84 <HAL_RCC_GetClockConfig+0x4c>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	22f0      	movs	r2, #240	; 0xf0
 8004a5a:	401a      	ands	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8004a60:	4b08      	ldr	r3, [pc, #32]	; (8004a84 <HAL_RCC_GetClockConfig+0x4c>)
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	23e0      	movs	r3, #224	; 0xe0
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	401a      	ands	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8004a6e:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <HAL_RCC_GetClockConfig+0x50>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2201      	movs	r2, #1
 8004a74:	401a      	ands	r2, r3
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	601a      	str	r2, [r3, #0]
}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	b002      	add	sp, #8
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	40021000 	.word	0x40021000
 8004a88:	40022000 	.word	0x40022000

08004a8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	2380      	movs	r3, #128	; 0x80
 8004aa2:	025b      	lsls	r3, r3, #9
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	d100      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004aa8:	e08e      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004aaa:	2017      	movs	r0, #23
 8004aac:	183b      	adds	r3, r7, r0
 8004aae:	2200      	movs	r2, #0
 8004ab0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ab2:	4b6e      	ldr	r3, [pc, #440]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ab4:	69da      	ldr	r2, [r3, #28]
 8004ab6:	2380      	movs	r3, #128	; 0x80
 8004ab8:	055b      	lsls	r3, r3, #21
 8004aba:	4013      	ands	r3, r2
 8004abc:	d110      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004abe:	4b6b      	ldr	r3, [pc, #428]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ac0:	69da      	ldr	r2, [r3, #28]
 8004ac2:	4b6a      	ldr	r3, [pc, #424]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ac4:	2180      	movs	r1, #128	; 0x80
 8004ac6:	0549      	lsls	r1, r1, #21
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	61da      	str	r2, [r3, #28]
 8004acc:	4b67      	ldr	r3, [pc, #412]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ace:	69da      	ldr	r2, [r3, #28]
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	055b      	lsls	r3, r3, #21
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	60bb      	str	r3, [r7, #8]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ada:	183b      	adds	r3, r7, r0
 8004adc:	2201      	movs	r2, #1
 8004ade:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae0:	4b63      	ldr	r3, [pc, #396]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	2380      	movs	r3, #128	; 0x80
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d11a      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aec:	4b60      	ldr	r3, [pc, #384]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	4b5f      	ldr	r3, [pc, #380]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004af2:	2180      	movs	r1, #128	; 0x80
 8004af4:	0049      	lsls	r1, r1, #1
 8004af6:	430a      	orrs	r2, r1
 8004af8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004afa:	f7fe fbe7 	bl	80032cc <HAL_GetTick>
 8004afe:	0003      	movs	r3, r0
 8004b00:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b02:	e008      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b04:	f7fe fbe2 	bl	80032cc <HAL_GetTick>
 8004b08:	0002      	movs	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b64      	cmp	r3, #100	; 0x64
 8004b10:	d901      	bls.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e0a6      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b16:	4b56      	ldr	r3, [pc, #344]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	2380      	movs	r3, #128	; 0x80
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	4013      	ands	r3, r2
 8004b20:	d0f0      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b22:	4b52      	ldr	r3, [pc, #328]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b24:	6a1a      	ldr	r2, [r3, #32]
 8004b26:	23c0      	movs	r3, #192	; 0xc0
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d034      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	23c0      	movs	r3, #192	; 0xc0
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d02c      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b44:	4b49      	ldr	r3, [pc, #292]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	4a4a      	ldr	r2, [pc, #296]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b4e:	4b47      	ldr	r3, [pc, #284]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b50:	6a1a      	ldr	r2, [r3, #32]
 8004b52:	4b46      	ldr	r3, [pc, #280]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b54:	2180      	movs	r1, #128	; 0x80
 8004b56:	0249      	lsls	r1, r1, #9
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b5c:	4b43      	ldr	r3, [pc, #268]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b5e:	6a1a      	ldr	r2, [r3, #32]
 8004b60:	4b42      	ldr	r3, [pc, #264]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b62:	4945      	ldr	r1, [pc, #276]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004b64:	400a      	ands	r2, r1
 8004b66:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b68:	4b40      	ldr	r3, [pc, #256]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2201      	movs	r2, #1
 8004b72:	4013      	ands	r3, r2
 8004b74:	d013      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b76:	f7fe fba9 	bl	80032cc <HAL_GetTick>
 8004b7a:	0003      	movs	r3, r0
 8004b7c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b7e:	e009      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b80:	f7fe fba4 	bl	80032cc <HAL_GetTick>
 8004b84:	0002      	movs	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	4a3c      	ldr	r2, [pc, #240]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e067      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b94:	4b35      	ldr	r3, [pc, #212]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	2202      	movs	r2, #2
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d0f0      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b9e:	4b33      	ldr	r3, [pc, #204]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	4a34      	ldr	r2, [pc, #208]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	0019      	movs	r1, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	4b2f      	ldr	r3, [pc, #188]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004bb2:	2317      	movs	r3, #23
 8004bb4:	18fb      	adds	r3, r7, r3
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d105      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bbc:	4b2b      	ldr	r3, [pc, #172]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bbe:	69da      	ldr	r2, [r3, #28]
 8004bc0:	4b2a      	ldr	r3, [pc, #168]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bc2:	492f      	ldr	r1, [pc, #188]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004bc4:	400a      	ands	r2, r1
 8004bc6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d009      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bd2:	4b26      	ldr	r3, [pc, #152]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd6:	2203      	movs	r2, #3
 8004bd8:	4393      	bics	r3, r2
 8004bda:	0019      	movs	r1, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	4b22      	ldr	r3, [pc, #136]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004be2:	430a      	orrs	r2, r1
 8004be4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2202      	movs	r2, #2
 8004bec:	4013      	ands	r3, r2
 8004bee:	d009      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bf0:	4b1e      	ldr	r3, [pc, #120]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf4:	4a23      	ldr	r2, [pc, #140]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	0019      	movs	r1, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	4b1b      	ldr	r3, [pc, #108]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c00:	430a      	orrs	r2, r1
 8004c02:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	d009      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c0e:	4b17      	ldr	r3, [pc, #92]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	2210      	movs	r2, #16
 8004c14:	4393      	bics	r3, r2
 8004c16:	0019      	movs	r1, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691a      	ldr	r2, [r3, #16]
 8004c1c:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	2380      	movs	r3, #128	; 0x80
 8004c28:	029b      	lsls	r3, r3, #10
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	d009      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c2e:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	2280      	movs	r2, #128	; 0x80
 8004c34:	4393      	bics	r3, r2
 8004c36:	0019      	movs	r1, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	699a      	ldr	r2, [r3, #24]
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	2380      	movs	r3, #128	; 0x80
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d009      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c4e:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	2240      	movs	r2, #64	; 0x40
 8004c54:	4393      	bics	r3, r2
 8004c56:	0019      	movs	r1, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	695a      	ldr	r2, [r3, #20]
 8004c5c:	4b03      	ldr	r3, [pc, #12]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	0018      	movs	r0, r3
 8004c66:	46bd      	mov	sp, r7
 8004c68:	b006      	add	sp, #24
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	40007000 	.word	0x40007000
 8004c74:	fffffcff 	.word	0xfffffcff
 8004c78:	fffeffff 	.word	0xfffeffff
 8004c7c:	00001388 	.word	0x00001388
 8004c80:	efffffff 	.word	0xefffffff
 8004c84:	fffcffff 	.word	0xfffcffff

08004c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e01e      	b.n	8004cd8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	223d      	movs	r2, #61	; 0x3d
 8004c9e:	5c9b      	ldrb	r3, [r3, r2]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d107      	bne.n	8004cb6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	223c      	movs	r2, #60	; 0x3c
 8004caa:	2100      	movs	r1, #0
 8004cac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f7fe f969 	bl	8002f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	223d      	movs	r2, #61	; 0x3d
 8004cba:	2102      	movs	r1, #2
 8004cbc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	0019      	movs	r1, r3
 8004cc8:	0010      	movs	r0, r2
 8004cca:	f000 fafb 	bl	80052c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	223d      	movs	r2, #61	; 0x3d
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	0018      	movs	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	b002      	add	sp, #8
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2207      	movs	r2, #7
 8004d00:	4013      	ands	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b06      	cmp	r3, #6
 8004d08:	d007      	beq.n	8004d1a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2101      	movs	r1, #1
 8004d16:	430a      	orrs	r2, r1
 8004d18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	b004      	add	sp, #16
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e01e      	b.n	8004d74 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	223d      	movs	r2, #61	; 0x3d
 8004d3a:	5c9b      	ldrb	r3, [r3, r2]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d107      	bne.n	8004d52 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	223c      	movs	r2, #60	; 0x3c
 8004d46:	2100      	movs	r1, #0
 8004d48:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f7fe f8fd 	bl	8002f4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	223d      	movs	r2, #61	; 0x3d
 8004d56:	2102      	movs	r1, #2
 8004d58:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	3304      	adds	r3, #4
 8004d62:	0019      	movs	r1, r3
 8004d64:	0010      	movs	r0, r2
 8004d66:	f000 faad 	bl	80052c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	223d      	movs	r2, #61	; 0x3d
 8004d6e:	2101      	movs	r1, #1
 8004d70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	0018      	movs	r0, r3
 8004d76:	46bd      	mov	sp, r7
 8004d78:	b002      	add	sp, #8
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6839      	ldr	r1, [r7, #0]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	0018      	movs	r0, r3
 8004d90:	f000 fd14 	bl	80057bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1a      	ldr	r2, [pc, #104]	; (8004e04 <HAL_TIM_PWM_Start+0x88>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00e      	beq.n	8004dbc <HAL_TIM_PWM_Start+0x40>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a19      	ldr	r2, [pc, #100]	; (8004e08 <HAL_TIM_PWM_Start+0x8c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d009      	beq.n	8004dbc <HAL_TIM_PWM_Start+0x40>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a17      	ldr	r2, [pc, #92]	; (8004e0c <HAL_TIM_PWM_Start+0x90>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d004      	beq.n	8004dbc <HAL_TIM_PWM_Start+0x40>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a16      	ldr	r2, [pc, #88]	; (8004e10 <HAL_TIM_PWM_Start+0x94>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d101      	bne.n	8004dc0 <HAL_TIM_PWM_Start+0x44>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e000      	b.n	8004dc2 <HAL_TIM_PWM_Start+0x46>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d008      	beq.n	8004dd8 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2180      	movs	r1, #128	; 0x80
 8004dd2:	0209      	lsls	r1, r1, #8
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	2207      	movs	r2, #7
 8004de0:	4013      	ands	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b06      	cmp	r3, #6
 8004de8:	d007      	beq.n	8004dfa <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2101      	movs	r1, #1
 8004df6:	430a      	orrs	r2, r1
 8004df8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	b004      	add	sp, #16
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40012c00 	.word	0x40012c00
 8004e08:	40014000 	.word	0x40014000
 8004e0c:	40014400 	.word	0x40014400
 8004e10:	40014800 	.word	0x40014800

08004e14 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6839      	ldr	r1, [r7, #0]
 8004e24:	2200      	movs	r2, #0
 8004e26:	0018      	movs	r0, r3
 8004e28:	f000 fcc8 	bl	80057bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a23      	ldr	r2, [pc, #140]	; (8004ec0 <HAL_TIM_PWM_Stop+0xac>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00e      	beq.n	8004e54 <HAL_TIM_PWM_Stop+0x40>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a22      	ldr	r2, [pc, #136]	; (8004ec4 <HAL_TIM_PWM_Stop+0xb0>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d009      	beq.n	8004e54 <HAL_TIM_PWM_Stop+0x40>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a20      	ldr	r2, [pc, #128]	; (8004ec8 <HAL_TIM_PWM_Stop+0xb4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d004      	beq.n	8004e54 <HAL_TIM_PWM_Stop+0x40>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a1f      	ldr	r2, [pc, #124]	; (8004ecc <HAL_TIM_PWM_Stop+0xb8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d101      	bne.n	8004e58 <HAL_TIM_PWM_Stop+0x44>
 8004e54:	2301      	movs	r3, #1
 8004e56:	e000      	b.n	8004e5a <HAL_TIM_PWM_Stop+0x46>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d013      	beq.n	8004e86 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	4a1a      	ldr	r2, [pc, #104]	; (8004ed0 <HAL_TIM_PWM_Stop+0xbc>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	d10d      	bne.n	8004e86 <HAL_TIM_PWM_Stop+0x72>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	4a18      	ldr	r2, [pc, #96]	; (8004ed4 <HAL_TIM_PWM_Stop+0xc0>)
 8004e72:	4013      	ands	r3, r2
 8004e74:	d107      	bne.n	8004e86 <HAL_TIM_PWM_Stop+0x72>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4915      	ldr	r1, [pc, #84]	; (8004ed8 <HAL_TIM_PWM_Stop+0xc4>)
 8004e82:	400a      	ands	r2, r1
 8004e84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	4a10      	ldr	r2, [pc, #64]	; (8004ed0 <HAL_TIM_PWM_Stop+0xbc>)
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d10d      	bne.n	8004eae <HAL_TIM_PWM_Stop+0x9a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	4a0e      	ldr	r2, [pc, #56]	; (8004ed4 <HAL_TIM_PWM_Stop+0xc0>)
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	d107      	bne.n	8004eae <HAL_TIM_PWM_Stop+0x9a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	438a      	bics	r2, r1
 8004eac:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	223d      	movs	r2, #61	; 0x3d
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	0018      	movs	r0, r3
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	b002      	add	sp, #8
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40012c00 	.word	0x40012c00
 8004ec4:	40014000 	.word	0x40014000
 8004ec8:	40014400 	.word	0x40014400
 8004ecc:	40014800 	.word	0x40014800
 8004ed0:	00001111 	.word	0x00001111
 8004ed4:	00000444 	.word	0x00000444
 8004ed8:	ffff7fff 	.word	0xffff7fff

08004edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	2202      	movs	r2, #2
 8004eec:	4013      	ands	r3, r2
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d124      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	2202      	movs	r2, #2
 8004efa:	4013      	ands	r3, r2
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d11d      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2203      	movs	r2, #3
 8004f06:	4252      	negs	r2, r2
 8004f08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	2203      	movs	r2, #3
 8004f18:	4013      	ands	r3, r2
 8004f1a:	d004      	beq.n	8004f26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	0018      	movs	r0, r3
 8004f20:	f000 f9b8 	bl	8005294 <HAL_TIM_IC_CaptureCallback>
 8004f24:	e007      	b.n	8004f36 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	0018      	movs	r0, r3
 8004f2a:	f000 f9ab 	bl	8005284 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	0018      	movs	r0, r3
 8004f32:	f000 f9b7 	bl	80052a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	2204      	movs	r2, #4
 8004f44:	4013      	ands	r3, r2
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d125      	bne.n	8004f96 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	2204      	movs	r2, #4
 8004f52:	4013      	ands	r3, r2
 8004f54:	2b04      	cmp	r3, #4
 8004f56:	d11e      	bne.n	8004f96 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2205      	movs	r2, #5
 8004f5e:	4252      	negs	r2, r2
 8004f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2202      	movs	r2, #2
 8004f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699a      	ldr	r2, [r3, #24]
 8004f6e:	23c0      	movs	r3, #192	; 0xc0
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4013      	ands	r3, r2
 8004f74:	d004      	beq.n	8004f80 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f000 f98b 	bl	8005294 <HAL_TIM_IC_CaptureCallback>
 8004f7e:	e007      	b.n	8004f90 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	0018      	movs	r0, r3
 8004f84:	f000 f97e 	bl	8005284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f000 f98a 	bl	80052a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	2208      	movs	r2, #8
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d124      	bne.n	8004fee <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	2208      	movs	r2, #8
 8004fac:	4013      	ands	r3, r2
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	d11d      	bne.n	8004fee <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2209      	movs	r2, #9
 8004fb8:	4252      	negs	r2, r2
 8004fba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	2203      	movs	r2, #3
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d004      	beq.n	8004fd8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	f000 f95f 	bl	8005294 <HAL_TIM_IC_CaptureCallback>
 8004fd6:	e007      	b.n	8004fe8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	0018      	movs	r0, r3
 8004fdc:	f000 f952 	bl	8005284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f000 f95e 	bl	80052a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	2210      	movs	r2, #16
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	2b10      	cmp	r3, #16
 8004ffa:	d125      	bne.n	8005048 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	2210      	movs	r2, #16
 8005004:	4013      	ands	r3, r2
 8005006:	2b10      	cmp	r3, #16
 8005008:	d11e      	bne.n	8005048 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2211      	movs	r2, #17
 8005010:	4252      	negs	r2, r2
 8005012:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2208      	movs	r2, #8
 8005018:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69da      	ldr	r2, [r3, #28]
 8005020:	23c0      	movs	r3, #192	; 0xc0
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4013      	ands	r3, r2
 8005026:	d004      	beq.n	8005032 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	0018      	movs	r0, r3
 800502c:	f000 f932 	bl	8005294 <HAL_TIM_IC_CaptureCallback>
 8005030:	e007      	b.n	8005042 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	0018      	movs	r0, r3
 8005036:	f000 f925 	bl	8005284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	0018      	movs	r0, r3
 800503e:	f000 f931 	bl	80052a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2201      	movs	r2, #1
 8005050:	4013      	ands	r3, r2
 8005052:	2b01      	cmp	r3, #1
 8005054:	d10f      	bne.n	8005076 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	4013      	ands	r3, r2
 8005060:	2b01      	cmp	r3, #1
 8005062:	d108      	bne.n	8005076 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2202      	movs	r2, #2
 800506a:	4252      	negs	r2, r2
 800506c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	0018      	movs	r0, r3
 8005072:	f7fd fed9 	bl	8002e28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	2280      	movs	r2, #128	; 0x80
 800507e:	4013      	ands	r3, r2
 8005080:	2b80      	cmp	r3, #128	; 0x80
 8005082:	d10f      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	2280      	movs	r2, #128	; 0x80
 800508c:	4013      	ands	r3, r2
 800508e:	2b80      	cmp	r3, #128	; 0x80
 8005090:	d108      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2281      	movs	r2, #129	; 0x81
 8005098:	4252      	negs	r2, r2
 800509a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	0018      	movs	r0, r3
 80050a0:	f000 fc16 	bl	80058d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	2240      	movs	r2, #64	; 0x40
 80050ac:	4013      	ands	r3, r2
 80050ae:	2b40      	cmp	r3, #64	; 0x40
 80050b0:	d10f      	bne.n	80050d2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	2240      	movs	r2, #64	; 0x40
 80050ba:	4013      	ands	r3, r2
 80050bc:	2b40      	cmp	r3, #64	; 0x40
 80050be:	d108      	bne.n	80050d2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2241      	movs	r2, #65	; 0x41
 80050c6:	4252      	negs	r2, r2
 80050c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	0018      	movs	r0, r3
 80050ce:	f000 f8f1 	bl	80052b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	2220      	movs	r2, #32
 80050da:	4013      	ands	r3, r2
 80050dc:	2b20      	cmp	r3, #32
 80050de:	d10f      	bne.n	8005100 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	2220      	movs	r2, #32
 80050e8:	4013      	ands	r3, r2
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	d108      	bne.n	8005100 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2221      	movs	r2, #33	; 0x21
 80050f4:	4252      	negs	r2, r2
 80050f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	0018      	movs	r0, r3
 80050fc:	f000 fbe0 	bl	80058c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005100:	46c0      	nop			; (mov r8, r8)
 8005102:	46bd      	mov	sp, r7
 8005104:	b002      	add	sp, #8
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	223c      	movs	r2, #60	; 0x3c
 8005118:	5c9b      	ldrb	r3, [r3, r2]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d101      	bne.n	8005122 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800511e:	2302      	movs	r3, #2
 8005120:	e0a9      	b.n	8005276 <HAL_TIM_PWM_ConfigChannel+0x16e>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	223c      	movs	r2, #60	; 0x3c
 8005126:	2101      	movs	r1, #1
 8005128:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	223d      	movs	r2, #61	; 0x3d
 800512e:	2102      	movs	r1, #2
 8005130:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b04      	cmp	r3, #4
 8005136:	d02e      	beq.n	8005196 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b04      	cmp	r3, #4
 800513c:	d803      	bhi.n	8005146 <HAL_TIM_PWM_ConfigChannel+0x3e>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d007      	beq.n	8005154 <HAL_TIM_PWM_ConfigChannel+0x4c>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8005144:	e08e      	b.n	8005264 <HAL_TIM_PWM_ConfigChannel+0x15c>
  switch (Channel)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b08      	cmp	r3, #8
 800514a:	d047      	beq.n	80051dc <HAL_TIM_PWM_ConfigChannel+0xd4>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b0c      	cmp	r3, #12
 8005150:	d065      	beq.n	800521e <HAL_TIM_PWM_ConfigChannel+0x116>
      break;
 8005152:	e087      	b.n	8005264 <HAL_TIM_PWM_ConfigChannel+0x15c>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	0011      	movs	r1, r2
 800515c:	0018      	movs	r0, r3
 800515e:	f000 f931 	bl	80053c4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	699a      	ldr	r2, [r3, #24]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2108      	movs	r1, #8
 800516e:	430a      	orrs	r2, r1
 8005170:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	699a      	ldr	r2, [r3, #24]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2104      	movs	r1, #4
 800517e:	438a      	bics	r2, r1
 8005180:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6999      	ldr	r1, [r3, #24]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	619a      	str	r2, [r3, #24]
      break;
 8005194:	e066      	b.n	8005264 <HAL_TIM_PWM_ConfigChannel+0x15c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	0011      	movs	r1, r2
 800519e:	0018      	movs	r0, r3
 80051a0:	f000 f998 	bl	80054d4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699a      	ldr	r2, [r3, #24]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2180      	movs	r1, #128	; 0x80
 80051b0:	0109      	lsls	r1, r1, #4
 80051b2:	430a      	orrs	r2, r1
 80051b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	699a      	ldr	r2, [r3, #24]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	492f      	ldr	r1, [pc, #188]	; (8005280 <HAL_TIM_PWM_ConfigChannel+0x178>)
 80051c2:	400a      	ands	r2, r1
 80051c4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6999      	ldr	r1, [r3, #24]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	021a      	lsls	r2, r3, #8
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	619a      	str	r2, [r3, #24]
      break;
 80051da:	e043      	b.n	8005264 <HAL_TIM_PWM_ConfigChannel+0x15c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	0011      	movs	r1, r2
 80051e4:	0018      	movs	r0, r3
 80051e6:	f000 f9f9 	bl	80055dc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69da      	ldr	r2, [r3, #28]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2108      	movs	r1, #8
 80051f6:	430a      	orrs	r2, r1
 80051f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69da      	ldr	r2, [r3, #28]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2104      	movs	r1, #4
 8005206:	438a      	bics	r2, r1
 8005208:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69d9      	ldr	r1, [r3, #28]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	61da      	str	r2, [r3, #28]
      break;
 800521c:	e022      	b.n	8005264 <HAL_TIM_PWM_ConfigChannel+0x15c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	0011      	movs	r1, r2
 8005226:	0018      	movs	r0, r3
 8005228:	f000 fa5e 	bl	80056e8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	69da      	ldr	r2, [r3, #28]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2180      	movs	r1, #128	; 0x80
 8005238:	0109      	lsls	r1, r1, #4
 800523a:	430a      	orrs	r2, r1
 800523c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69da      	ldr	r2, [r3, #28]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	490d      	ldr	r1, [pc, #52]	; (8005280 <HAL_TIM_PWM_ConfigChannel+0x178>)
 800524a:	400a      	ands	r2, r1
 800524c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69d9      	ldr	r1, [r3, #28]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	021a      	lsls	r2, r3, #8
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	61da      	str	r2, [r3, #28]
      break;
 8005262:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	223d      	movs	r2, #61	; 0x3d
 8005268:	2101      	movs	r1, #1
 800526a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	223c      	movs	r2, #60	; 0x3c
 8005270:	2100      	movs	r1, #0
 8005272:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	0018      	movs	r0, r3
 8005278:	46bd      	mov	sp, r7
 800527a:	b004      	add	sp, #16
 800527c:	bd80      	pop	{r7, pc}
 800527e:	46c0      	nop			; (mov r8, r8)
 8005280:	fffffbff 	.word	0xfffffbff

08005284 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800528c:	46c0      	nop			; (mov r8, r8)
 800528e:	46bd      	mov	sp, r7
 8005290:	b002      	add	sp, #8
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800529c:	46c0      	nop			; (mov r8, r8)
 800529e:	46bd      	mov	sp, r7
 80052a0:	b002      	add	sp, #8
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052ac:	46c0      	nop			; (mov r8, r8)
 80052ae:	46bd      	mov	sp, r7
 80052b0:	b002      	add	sp, #8
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052bc:	46c0      	nop			; (mov r8, r8)
 80052be:	46bd      	mov	sp, r7
 80052c0:	b002      	add	sp, #8
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a34      	ldr	r2, [pc, #208]	; (80053a8 <TIM_Base_SetConfig+0xe4>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d008      	beq.n	80052ee <TIM_Base_SetConfig+0x2a>
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	2380      	movs	r3, #128	; 0x80
 80052e0:	05db      	lsls	r3, r3, #23
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d003      	beq.n	80052ee <TIM_Base_SetConfig+0x2a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a30      	ldr	r2, [pc, #192]	; (80053ac <TIM_Base_SetConfig+0xe8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d108      	bne.n	8005300 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2270      	movs	r2, #112	; 0x70
 80052f2:	4393      	bics	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a29      	ldr	r2, [pc, #164]	; (80053a8 <TIM_Base_SetConfig+0xe4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d018      	beq.n	800533a <TIM_Base_SetConfig+0x76>
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	2380      	movs	r3, #128	; 0x80
 800530c:	05db      	lsls	r3, r3, #23
 800530e:	429a      	cmp	r2, r3
 8005310:	d013      	beq.n	800533a <TIM_Base_SetConfig+0x76>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a25      	ldr	r2, [pc, #148]	; (80053ac <TIM_Base_SetConfig+0xe8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00f      	beq.n	800533a <TIM_Base_SetConfig+0x76>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a24      	ldr	r2, [pc, #144]	; (80053b0 <TIM_Base_SetConfig+0xec>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00b      	beq.n	800533a <TIM_Base_SetConfig+0x76>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a23      	ldr	r2, [pc, #140]	; (80053b4 <TIM_Base_SetConfig+0xf0>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d007      	beq.n	800533a <TIM_Base_SetConfig+0x76>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a22      	ldr	r2, [pc, #136]	; (80053b8 <TIM_Base_SetConfig+0xf4>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d003      	beq.n	800533a <TIM_Base_SetConfig+0x76>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a21      	ldr	r2, [pc, #132]	; (80053bc <TIM_Base_SetConfig+0xf8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d108      	bne.n	800534c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4a20      	ldr	r2, [pc, #128]	; (80053c0 <TIM_Base_SetConfig+0xfc>)
 800533e:	4013      	ands	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4313      	orrs	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2280      	movs	r2, #128	; 0x80
 8005350:	4393      	bics	r3, r2
 8005352:	001a      	movs	r2, r3
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	689a      	ldr	r2, [r3, #8]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a0c      	ldr	r2, [pc, #48]	; (80053a8 <TIM_Base_SetConfig+0xe4>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00b      	beq.n	8005392 <TIM_Base_SetConfig+0xce>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a0d      	ldr	r2, [pc, #52]	; (80053b4 <TIM_Base_SetConfig+0xf0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d007      	beq.n	8005392 <TIM_Base_SetConfig+0xce>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a0c      	ldr	r2, [pc, #48]	; (80053b8 <TIM_Base_SetConfig+0xf4>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d003      	beq.n	8005392 <TIM_Base_SetConfig+0xce>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a0b      	ldr	r2, [pc, #44]	; (80053bc <TIM_Base_SetConfig+0xf8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d103      	bne.n	800539a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	691a      	ldr	r2, [r3, #16]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	615a      	str	r2, [r3, #20]
}
 80053a0:	46c0      	nop			; (mov r8, r8)
 80053a2:	46bd      	mov	sp, r7
 80053a4:	b004      	add	sp, #16
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40012c00 	.word	0x40012c00
 80053ac:	40000400 	.word	0x40000400
 80053b0:	40002000 	.word	0x40002000
 80053b4:	40014000 	.word	0x40014000
 80053b8:	40014400 	.word	0x40014400
 80053bc:	40014800 	.word	0x40014800
 80053c0:	fffffcff 	.word	0xfffffcff

080053c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	2201      	movs	r2, #1
 80053d4:	4393      	bics	r3, r2
 80053d6:	001a      	movs	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2270      	movs	r2, #112	; 0x70
 80053f2:	4393      	bics	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2203      	movs	r2, #3
 80053fa:	4393      	bics	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4313      	orrs	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	2202      	movs	r2, #2
 800540c:	4393      	bics	r3, r2
 800540e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a27      	ldr	r2, [pc, #156]	; (80054bc <TIM_OC1_SetConfig+0xf8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00b      	beq.n	800543a <TIM_OC1_SetConfig+0x76>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a26      	ldr	r2, [pc, #152]	; (80054c0 <TIM_OC1_SetConfig+0xfc>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d007      	beq.n	800543a <TIM_OC1_SetConfig+0x76>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a25      	ldr	r2, [pc, #148]	; (80054c4 <TIM_OC1_SetConfig+0x100>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d003      	beq.n	800543a <TIM_OC1_SetConfig+0x76>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a24      	ldr	r2, [pc, #144]	; (80054c8 <TIM_OC1_SetConfig+0x104>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d10c      	bne.n	8005454 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2208      	movs	r2, #8
 800543e:	4393      	bics	r3, r2
 8005440:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2204      	movs	r2, #4
 8005450:	4393      	bics	r3, r2
 8005452:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a19      	ldr	r2, [pc, #100]	; (80054bc <TIM_OC1_SetConfig+0xf8>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00b      	beq.n	8005474 <TIM_OC1_SetConfig+0xb0>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a18      	ldr	r2, [pc, #96]	; (80054c0 <TIM_OC1_SetConfig+0xfc>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d007      	beq.n	8005474 <TIM_OC1_SetConfig+0xb0>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a17      	ldr	r2, [pc, #92]	; (80054c4 <TIM_OC1_SetConfig+0x100>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d003      	beq.n	8005474 <TIM_OC1_SetConfig+0xb0>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a16      	ldr	r2, [pc, #88]	; (80054c8 <TIM_OC1_SetConfig+0x104>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d111      	bne.n	8005498 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	4a15      	ldr	r2, [pc, #84]	; (80054cc <TIM_OC1_SetConfig+0x108>)
 8005478:	4013      	ands	r3, r2
 800547a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	4a14      	ldr	r2, [pc, #80]	; (80054d0 <TIM_OC1_SetConfig+0x10c>)
 8005480:	4013      	ands	r3, r2
 8005482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4313      	orrs	r3, r2
 800548c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	621a      	str	r2, [r3, #32]
}
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	46bd      	mov	sp, r7
 80054b6:	b006      	add	sp, #24
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	40012c00 	.word	0x40012c00
 80054c0:	40014000 	.word	0x40014000
 80054c4:	40014400 	.word	0x40014400
 80054c8:	40014800 	.word	0x40014800
 80054cc:	fffffeff 	.word	0xfffffeff
 80054d0:	fffffdff 	.word	0xfffffdff

080054d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	2210      	movs	r2, #16
 80054e4:	4393      	bics	r3, r2
 80054e6:	001a      	movs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4a2e      	ldr	r2, [pc, #184]	; (80055bc <TIM_OC2_SetConfig+0xe8>)
 8005502:	4013      	ands	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4a2d      	ldr	r2, [pc, #180]	; (80055c0 <TIM_OC2_SetConfig+0xec>)
 800550a:	4013      	ands	r3, r2
 800550c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2220      	movs	r2, #32
 800551e:	4393      	bics	r3, r2
 8005520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a24      	ldr	r2, [pc, #144]	; (80055c4 <TIM_OC2_SetConfig+0xf0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d10d      	bne.n	8005552 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2280      	movs	r2, #128	; 0x80
 800553a:	4393      	bics	r3, r2
 800553c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2240      	movs	r2, #64	; 0x40
 800554e:	4393      	bics	r3, r2
 8005550:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a1b      	ldr	r2, [pc, #108]	; (80055c4 <TIM_OC2_SetConfig+0xf0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d00b      	beq.n	8005572 <TIM_OC2_SetConfig+0x9e>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a1a      	ldr	r2, [pc, #104]	; (80055c8 <TIM_OC2_SetConfig+0xf4>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d007      	beq.n	8005572 <TIM_OC2_SetConfig+0x9e>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a19      	ldr	r2, [pc, #100]	; (80055cc <TIM_OC2_SetConfig+0xf8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d003      	beq.n	8005572 <TIM_OC2_SetConfig+0x9e>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a18      	ldr	r2, [pc, #96]	; (80055d0 <TIM_OC2_SetConfig+0xfc>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d113      	bne.n	800559a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	4a17      	ldr	r2, [pc, #92]	; (80055d4 <TIM_OC2_SetConfig+0x100>)
 8005576:	4013      	ands	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	4a16      	ldr	r2, [pc, #88]	; (80055d8 <TIM_OC2_SetConfig+0x104>)
 800557e:	4013      	ands	r3, r2
 8005580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	621a      	str	r2, [r3, #32]
}
 80055b4:	46c0      	nop			; (mov r8, r8)
 80055b6:	46bd      	mov	sp, r7
 80055b8:	b006      	add	sp, #24
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	ffff8fff 	.word	0xffff8fff
 80055c0:	fffffcff 	.word	0xfffffcff
 80055c4:	40012c00 	.word	0x40012c00
 80055c8:	40014000 	.word	0x40014000
 80055cc:	40014400 	.word	0x40014400
 80055d0:	40014800 	.word	0x40014800
 80055d4:	fffffbff 	.word	0xfffffbff
 80055d8:	fffff7ff 	.word	0xfffff7ff

080055dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	4a35      	ldr	r2, [pc, #212]	; (80056c0 <TIM_OC3_SetConfig+0xe4>)
 80055ec:	401a      	ands	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2270      	movs	r2, #112	; 0x70
 8005608:	4393      	bics	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2203      	movs	r2, #3
 8005610:	4393      	bics	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	4a28      	ldr	r2, [pc, #160]	; (80056c4 <TIM_OC3_SetConfig+0xe8>)
 8005622:	4013      	ands	r3, r2
 8005624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	021b      	lsls	r3, r3, #8
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	4313      	orrs	r3, r2
 8005630:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a24      	ldr	r2, [pc, #144]	; (80056c8 <TIM_OC3_SetConfig+0xec>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d10d      	bne.n	8005656 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	4a23      	ldr	r2, [pc, #140]	; (80056cc <TIM_OC3_SetConfig+0xf0>)
 800563e:	4013      	ands	r3, r2
 8005640:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	021b      	lsls	r3, r3, #8
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	4313      	orrs	r3, r2
 800564c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	4a1f      	ldr	r2, [pc, #124]	; (80056d0 <TIM_OC3_SetConfig+0xf4>)
 8005652:	4013      	ands	r3, r2
 8005654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a1b      	ldr	r2, [pc, #108]	; (80056c8 <TIM_OC3_SetConfig+0xec>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d00b      	beq.n	8005676 <TIM_OC3_SetConfig+0x9a>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a1c      	ldr	r2, [pc, #112]	; (80056d4 <TIM_OC3_SetConfig+0xf8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d007      	beq.n	8005676 <TIM_OC3_SetConfig+0x9a>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a1b      	ldr	r2, [pc, #108]	; (80056d8 <TIM_OC3_SetConfig+0xfc>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d003      	beq.n	8005676 <TIM_OC3_SetConfig+0x9a>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a1a      	ldr	r2, [pc, #104]	; (80056dc <TIM_OC3_SetConfig+0x100>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d113      	bne.n	800569e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	4a19      	ldr	r2, [pc, #100]	; (80056e0 <TIM_OC3_SetConfig+0x104>)
 800567a:	4013      	ands	r3, r2
 800567c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	4a18      	ldr	r2, [pc, #96]	; (80056e4 <TIM_OC3_SetConfig+0x108>)
 8005682:	4013      	ands	r3, r2
 8005684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	4313      	orrs	r3, r2
 800569c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	621a      	str	r2, [r3, #32]
}
 80056b8:	46c0      	nop			; (mov r8, r8)
 80056ba:	46bd      	mov	sp, r7
 80056bc:	b006      	add	sp, #24
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	fffffeff 	.word	0xfffffeff
 80056c4:	fffffdff 	.word	0xfffffdff
 80056c8:	40012c00 	.word	0x40012c00
 80056cc:	fffff7ff 	.word	0xfffff7ff
 80056d0:	fffffbff 	.word	0xfffffbff
 80056d4:	40014000 	.word	0x40014000
 80056d8:	40014400 	.word	0x40014400
 80056dc:	40014800 	.word	0x40014800
 80056e0:	ffffefff 	.word	0xffffefff
 80056e4:	ffffdfff 	.word	0xffffdfff

080056e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	4a28      	ldr	r2, [pc, #160]	; (8005798 <TIM_OC4_SetConfig+0xb0>)
 80056f8:	401a      	ands	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4a22      	ldr	r2, [pc, #136]	; (800579c <TIM_OC4_SetConfig+0xb4>)
 8005714:	4013      	ands	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4a21      	ldr	r2, [pc, #132]	; (80057a0 <TIM_OC4_SetConfig+0xb8>)
 800571c:	4013      	ands	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	4313      	orrs	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <TIM_OC4_SetConfig+0xbc>)
 8005730:	4013      	ands	r3, r2
 8005732:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	031b      	lsls	r3, r3, #12
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	4313      	orrs	r3, r2
 800573e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a19      	ldr	r2, [pc, #100]	; (80057a8 <TIM_OC4_SetConfig+0xc0>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d00b      	beq.n	8005760 <TIM_OC4_SetConfig+0x78>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a18      	ldr	r2, [pc, #96]	; (80057ac <TIM_OC4_SetConfig+0xc4>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d007      	beq.n	8005760 <TIM_OC4_SetConfig+0x78>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a17      	ldr	r2, [pc, #92]	; (80057b0 <TIM_OC4_SetConfig+0xc8>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d003      	beq.n	8005760 <TIM_OC4_SetConfig+0x78>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a16      	ldr	r2, [pc, #88]	; (80057b4 <TIM_OC4_SetConfig+0xcc>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d109      	bne.n	8005774 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	4a15      	ldr	r2, [pc, #84]	; (80057b8 <TIM_OC4_SetConfig+0xd0>)
 8005764:	4013      	ands	r3, r2
 8005766:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	019b      	lsls	r3, r3, #6
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	621a      	str	r2, [r3, #32]
}
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	46bd      	mov	sp, r7
 8005792:	b006      	add	sp, #24
 8005794:	bd80      	pop	{r7, pc}
 8005796:	46c0      	nop			; (mov r8, r8)
 8005798:	ffffefff 	.word	0xffffefff
 800579c:	ffff8fff 	.word	0xffff8fff
 80057a0:	fffffcff 	.word	0xfffffcff
 80057a4:	ffffdfff 	.word	0xffffdfff
 80057a8:	40012c00 	.word	0x40012c00
 80057ac:	40014000 	.word	0x40014000
 80057b0:	40014400 	.word	0x40014400
 80057b4:	40014800 	.word	0x40014800
 80057b8:	ffffbfff 	.word	0xffffbfff

080057bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	221f      	movs	r2, #31
 80057cc:	4013      	ands	r3, r2
 80057ce:	2201      	movs	r2, #1
 80057d0:	409a      	lsls	r2, r3
 80057d2:	0013      	movs	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	43d2      	mvns	r2, r2
 80057de:	401a      	ands	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6a1a      	ldr	r2, [r3, #32]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	211f      	movs	r1, #31
 80057ec:	400b      	ands	r3, r1
 80057ee:	6879      	ldr	r1, [r7, #4]
 80057f0:	4099      	lsls	r1, r3
 80057f2:	000b      	movs	r3, r1
 80057f4:	431a      	orrs	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	621a      	str	r2, [r3, #32]
}
 80057fa:	46c0      	nop			; (mov r8, r8)
 80057fc:	46bd      	mov	sp, r7
 80057fe:	b006      	add	sp, #24
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	223c      	movs	r2, #60	; 0x3c
 8005812:	5c9b      	ldrb	r3, [r3, r2]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d101      	bne.n	800581c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005818:	2302      	movs	r3, #2
 800581a:	e047      	b.n	80058ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	223c      	movs	r2, #60	; 0x3c
 8005820:	2101      	movs	r1, #1
 8005822:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	223d      	movs	r2, #61	; 0x3d
 8005828:	2102      	movs	r1, #2
 800582a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2270      	movs	r2, #112	; 0x70
 8005840:	4393      	bics	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a16      	ldr	r2, [pc, #88]	; (80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00f      	beq.n	8005880 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	2380      	movs	r3, #128	; 0x80
 8005866:	05db      	lsls	r3, r3, #23
 8005868:	429a      	cmp	r2, r3
 800586a:	d009      	beq.n	8005880 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a11      	ldr	r2, [pc, #68]	; (80058b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d004      	beq.n	8005880 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a10      	ldr	r2, [pc, #64]	; (80058bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d10c      	bne.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2280      	movs	r2, #128	; 0x80
 8005884:	4393      	bics	r3, r2
 8005886:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	4313      	orrs	r3, r2
 8005890:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	223d      	movs	r2, #61	; 0x3d
 800589e:	2101      	movs	r1, #1
 80058a0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	223c      	movs	r2, #60	; 0x3c
 80058a6:	2100      	movs	r1, #0
 80058a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	0018      	movs	r0, r3
 80058ae:	46bd      	mov	sp, r7
 80058b0:	b004      	add	sp, #16
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	40012c00 	.word	0x40012c00
 80058b8:	40000400 	.word	0x40000400
 80058bc:	40014000 	.word	0x40014000

080058c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058c8:	46c0      	nop			; (mov r8, r8)
 80058ca:	46bd      	mov	sp, r7
 80058cc:	b002      	add	sp, #8
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058d8:	46c0      	nop			; (mov r8, r8)
 80058da:	46bd      	mov	sp, r7
 80058dc:	b002      	add	sp, #8
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e044      	b.n	800597c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d107      	bne.n	800590a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2270      	movs	r2, #112	; 0x70
 80058fe:	2100      	movs	r1, #0
 8005900:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	0018      	movs	r0, r3
 8005906:	f7fd fbc3 	bl	8003090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2224      	movs	r2, #36	; 0x24
 800590e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2101      	movs	r1, #1
 800591c:	438a      	bics	r2, r1
 800591e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	0018      	movs	r0, r3
 8005924:	f000 f830 	bl	8005988 <UART_SetConfig>
 8005928:	0003      	movs	r3, r0
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e024      	b.n	800597c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	0018      	movs	r0, r3
 800593e:	f000 f9f1 	bl	8005d24 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	490d      	ldr	r1, [pc, #52]	; (8005984 <HAL_UART_Init+0xa4>)
 800594e:	400a      	ands	r2, r1
 8005950:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	212a      	movs	r1, #42	; 0x2a
 800595e:	438a      	bics	r2, r1
 8005960:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2101      	movs	r1, #1
 800596e:	430a      	orrs	r2, r1
 8005970:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	0018      	movs	r0, r3
 8005976:	f000 fa89 	bl	8005e8c <UART_CheckIdleState>
 800597a:	0003      	movs	r3, r0
}
 800597c:	0018      	movs	r0, r3
 800597e:	46bd      	mov	sp, r7
 8005980:	b002      	add	sp, #8
 8005982:	bd80      	pop	{r7, pc}
 8005984:	ffffb7ff 	.word	0xffffb7ff

08005988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b088      	sub	sp, #32
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005990:	2300      	movs	r3, #0
 8005992:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005994:	2317      	movs	r3, #23
 8005996:	18fb      	adds	r3, r7, r3
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689a      	ldr	r2, [r3, #8]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	431a      	orrs	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4ac6      	ldr	r2, [pc, #792]	; (8005cd4 <UART_SetConfig+0x34c>)
 80059bc:	4013      	ands	r3, r2
 80059be:	0019      	movs	r1, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	4ac1      	ldr	r2, [pc, #772]	; (8005cd8 <UART_SetConfig+0x350>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	0019      	movs	r1, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	4ab8      	ldr	r2, [pc, #736]	; (8005cdc <UART_SetConfig+0x354>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	0019      	movs	r1, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4ab4      	ldr	r2, [pc, #720]	; (8005ce0 <UART_SetConfig+0x358>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d126      	bne.n	8005a60 <UART_SetConfig+0xd8>
 8005a12:	4bb4      	ldr	r3, [pc, #720]	; (8005ce4 <UART_SetConfig+0x35c>)
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	2203      	movs	r2, #3
 8005a18:	4013      	ands	r3, r2
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d010      	beq.n	8005a40 <UART_SetConfig+0xb8>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d004      	beq.n	8005a2c <UART_SetConfig+0xa4>
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d011      	beq.n	8005a4a <UART_SetConfig+0xc2>
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d005      	beq.n	8005a36 <UART_SetConfig+0xae>
 8005a2a:	e013      	b.n	8005a54 <UART_SetConfig+0xcc>
 8005a2c:	231f      	movs	r3, #31
 8005a2e:	18fb      	adds	r3, r7, r3
 8005a30:	2200      	movs	r2, #0
 8005a32:	701a      	strb	r2, [r3, #0]
 8005a34:	e064      	b.n	8005b00 <UART_SetConfig+0x178>
 8005a36:	231f      	movs	r3, #31
 8005a38:	18fb      	adds	r3, r7, r3
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	701a      	strb	r2, [r3, #0]
 8005a3e:	e05f      	b.n	8005b00 <UART_SetConfig+0x178>
 8005a40:	231f      	movs	r3, #31
 8005a42:	18fb      	adds	r3, r7, r3
 8005a44:	2204      	movs	r2, #4
 8005a46:	701a      	strb	r2, [r3, #0]
 8005a48:	e05a      	b.n	8005b00 <UART_SetConfig+0x178>
 8005a4a:	231f      	movs	r3, #31
 8005a4c:	18fb      	adds	r3, r7, r3
 8005a4e:	2208      	movs	r2, #8
 8005a50:	701a      	strb	r2, [r3, #0]
 8005a52:	e055      	b.n	8005b00 <UART_SetConfig+0x178>
 8005a54:	231f      	movs	r3, #31
 8005a56:	18fb      	adds	r3, r7, r3
 8005a58:	2210      	movs	r2, #16
 8005a5a:	701a      	strb	r2, [r3, #0]
 8005a5c:	46c0      	nop			; (mov r8, r8)
 8005a5e:	e04f      	b.n	8005b00 <UART_SetConfig+0x178>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4aa0      	ldr	r2, [pc, #640]	; (8005ce8 <UART_SetConfig+0x360>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d132      	bne.n	8005ad0 <UART_SetConfig+0x148>
 8005a6a:	4b9e      	ldr	r3, [pc, #632]	; (8005ce4 <UART_SetConfig+0x35c>)
 8005a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a6e:	23c0      	movs	r3, #192	; 0xc0
 8005a70:	029b      	lsls	r3, r3, #10
 8005a72:	4013      	ands	r3, r2
 8005a74:	2280      	movs	r2, #128	; 0x80
 8005a76:	0252      	lsls	r2, r2, #9
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d019      	beq.n	8005ab0 <UART_SetConfig+0x128>
 8005a7c:	2280      	movs	r2, #128	; 0x80
 8005a7e:	0252      	lsls	r2, r2, #9
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d802      	bhi.n	8005a8a <UART_SetConfig+0x102>
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d009      	beq.n	8005a9c <UART_SetConfig+0x114>
 8005a88:	e01c      	b.n	8005ac4 <UART_SetConfig+0x13c>
 8005a8a:	2280      	movs	r2, #128	; 0x80
 8005a8c:	0292      	lsls	r2, r2, #10
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d013      	beq.n	8005aba <UART_SetConfig+0x132>
 8005a92:	22c0      	movs	r2, #192	; 0xc0
 8005a94:	0292      	lsls	r2, r2, #10
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d005      	beq.n	8005aa6 <UART_SetConfig+0x11e>
 8005a9a:	e013      	b.n	8005ac4 <UART_SetConfig+0x13c>
 8005a9c:	231f      	movs	r3, #31
 8005a9e:	18fb      	adds	r3, r7, r3
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	701a      	strb	r2, [r3, #0]
 8005aa4:	e02c      	b.n	8005b00 <UART_SetConfig+0x178>
 8005aa6:	231f      	movs	r3, #31
 8005aa8:	18fb      	adds	r3, r7, r3
 8005aaa:	2202      	movs	r2, #2
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	e027      	b.n	8005b00 <UART_SetConfig+0x178>
 8005ab0:	231f      	movs	r3, #31
 8005ab2:	18fb      	adds	r3, r7, r3
 8005ab4:	2204      	movs	r2, #4
 8005ab6:	701a      	strb	r2, [r3, #0]
 8005ab8:	e022      	b.n	8005b00 <UART_SetConfig+0x178>
 8005aba:	231f      	movs	r3, #31
 8005abc:	18fb      	adds	r3, r7, r3
 8005abe:	2208      	movs	r2, #8
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	e01d      	b.n	8005b00 <UART_SetConfig+0x178>
 8005ac4:	231f      	movs	r3, #31
 8005ac6:	18fb      	adds	r3, r7, r3
 8005ac8:	2210      	movs	r2, #16
 8005aca:	701a      	strb	r2, [r3, #0]
 8005acc:	46c0      	nop			; (mov r8, r8)
 8005ace:	e017      	b.n	8005b00 <UART_SetConfig+0x178>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a85      	ldr	r2, [pc, #532]	; (8005cec <UART_SetConfig+0x364>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d104      	bne.n	8005ae4 <UART_SetConfig+0x15c>
 8005ada:	231f      	movs	r3, #31
 8005adc:	18fb      	adds	r3, r7, r3
 8005ade:	2200      	movs	r2, #0
 8005ae0:	701a      	strb	r2, [r3, #0]
 8005ae2:	e00d      	b.n	8005b00 <UART_SetConfig+0x178>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a81      	ldr	r2, [pc, #516]	; (8005cf0 <UART_SetConfig+0x368>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d104      	bne.n	8005af8 <UART_SetConfig+0x170>
 8005aee:	231f      	movs	r3, #31
 8005af0:	18fb      	adds	r3, r7, r3
 8005af2:	2200      	movs	r2, #0
 8005af4:	701a      	strb	r2, [r3, #0]
 8005af6:	e003      	b.n	8005b00 <UART_SetConfig+0x178>
 8005af8:	231f      	movs	r3, #31
 8005afa:	18fb      	adds	r3, r7, r3
 8005afc:	2210      	movs	r2, #16
 8005afe:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	69da      	ldr	r2, [r3, #28]
 8005b04:	2380      	movs	r3, #128	; 0x80
 8005b06:	021b      	lsls	r3, r3, #8
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d000      	beq.n	8005b0e <UART_SetConfig+0x186>
 8005b0c:	e07d      	b.n	8005c0a <UART_SetConfig+0x282>
  {
    switch (clocksource)
 8005b0e:	231f      	movs	r3, #31
 8005b10:	18fb      	adds	r3, r7, r3
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d01c      	beq.n	8005b52 <UART_SetConfig+0x1ca>
 8005b18:	dc02      	bgt.n	8005b20 <UART_SetConfig+0x198>
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d005      	beq.n	8005b2a <UART_SetConfig+0x1a2>
 8005b1e:	e04b      	b.n	8005bb8 <UART_SetConfig+0x230>
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d025      	beq.n	8005b70 <UART_SetConfig+0x1e8>
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d037      	beq.n	8005b98 <UART_SetConfig+0x210>
 8005b28:	e046      	b.n	8005bb8 <UART_SetConfig+0x230>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b2a:	f7fe ff6f 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 8005b2e:	0003      	movs	r3, r0
 8005b30:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	005a      	lsls	r2, r3, #1
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	085b      	lsrs	r3, r3, #1
 8005b3c:	18d2      	adds	r2, r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	0019      	movs	r1, r3
 8005b44:	0010      	movs	r0, r2
 8005b46:	f7fa fadf 	bl	8000108 <__udivsi3>
 8005b4a:	0003      	movs	r3, r0
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	61bb      	str	r3, [r7, #24]
        break;
 8005b50:	e037      	b.n	8005bc2 <UART_SetConfig+0x23a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	085b      	lsrs	r3, r3, #1
 8005b58:	4a66      	ldr	r2, [pc, #408]	; (8005cf4 <UART_SetConfig+0x36c>)
 8005b5a:	189a      	adds	r2, r3, r2
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	0019      	movs	r1, r3
 8005b62:	0010      	movs	r0, r2
 8005b64:	f7fa fad0 	bl	8000108 <__udivsi3>
 8005b68:	0003      	movs	r3, r0
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	61bb      	str	r3, [r7, #24]
        break;
 8005b6e:	e028      	b.n	8005bc2 <UART_SetConfig+0x23a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b70:	f7fe fec4 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 8005b74:	0003      	movs	r3, r0
 8005b76:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	005a      	lsls	r2, r3, #1
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	085b      	lsrs	r3, r3, #1
 8005b82:	18d2      	adds	r2, r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	0019      	movs	r1, r3
 8005b8a:	0010      	movs	r0, r2
 8005b8c:	f7fa fabc 	bl	8000108 <__udivsi3>
 8005b90:	0003      	movs	r3, r0
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	61bb      	str	r3, [r7, #24]
        break;
 8005b96:	e014      	b.n	8005bc2 <UART_SetConfig+0x23a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	085b      	lsrs	r3, r3, #1
 8005b9e:	2280      	movs	r2, #128	; 0x80
 8005ba0:	0252      	lsls	r2, r2, #9
 8005ba2:	189a      	adds	r2, r3, r2
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	0019      	movs	r1, r3
 8005baa:	0010      	movs	r0, r2
 8005bac:	f7fa faac 	bl	8000108 <__udivsi3>
 8005bb0:	0003      	movs	r3, r0
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	61bb      	str	r3, [r7, #24]
        break;
 8005bb6:	e004      	b.n	8005bc2 <UART_SetConfig+0x23a>
      default:
        ret = HAL_ERROR;
 8005bb8:	2317      	movs	r3, #23
 8005bba:	18fb      	adds	r3, r7, r3
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	701a      	strb	r2, [r3, #0]
        break;
 8005bc0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	2b0f      	cmp	r3, #15
 8005bc6:	d91b      	bls.n	8005c00 <UART_SetConfig+0x278>
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	4a4b      	ldr	r2, [pc, #300]	; (8005cf8 <UART_SetConfig+0x370>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d817      	bhi.n	8005c00 <UART_SetConfig+0x278>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	200a      	movs	r0, #10
 8005bd6:	183b      	adds	r3, r7, r0
 8005bd8:	210f      	movs	r1, #15
 8005bda:	438a      	bics	r2, r1
 8005bdc:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	085b      	lsrs	r3, r3, #1
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2207      	movs	r2, #7
 8005be6:	4013      	ands	r3, r2
 8005be8:	b299      	uxth	r1, r3
 8005bea:	183b      	adds	r3, r7, r0
 8005bec:	183a      	adds	r2, r7, r0
 8005bee:	8812      	ldrh	r2, [r2, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	183a      	adds	r2, r7, r0
 8005bfa:	8812      	ldrh	r2, [r2, #0]
 8005bfc:	60da      	str	r2, [r3, #12]
 8005bfe:	e083      	b.n	8005d08 <UART_SetConfig+0x380>
    }
    else
    {
      ret = HAL_ERROR;
 8005c00:	2317      	movs	r3, #23
 8005c02:	18fb      	adds	r3, r7, r3
 8005c04:	2201      	movs	r2, #1
 8005c06:	701a      	strb	r2, [r3, #0]
 8005c08:	e07e      	b.n	8005d08 <UART_SetConfig+0x380>
    }
  }
  else
  {
    switch (clocksource)
 8005c0a:	231f      	movs	r3, #31
 8005c0c:	18fb      	adds	r3, r7, r3
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d01b      	beq.n	8005c4c <UART_SetConfig+0x2c4>
 8005c14:	dc02      	bgt.n	8005c1c <UART_SetConfig+0x294>
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d005      	beq.n	8005c26 <UART_SetConfig+0x29e>
 8005c1a:	e049      	b.n	8005cb0 <UART_SetConfig+0x328>
 8005c1c:	2b04      	cmp	r3, #4
 8005c1e:	d024      	beq.n	8005c6a <UART_SetConfig+0x2e2>
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d035      	beq.n	8005c90 <UART_SetConfig+0x308>
 8005c24:	e044      	b.n	8005cb0 <UART_SetConfig+0x328>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c26:	f7fe fef1 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 8005c2a:	0003      	movs	r3, r0
 8005c2c:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	085a      	lsrs	r2, r3, #1
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	18d2      	adds	r2, r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	0019      	movs	r1, r3
 8005c3e:	0010      	movs	r0, r2
 8005c40:	f7fa fa62 	bl	8000108 <__udivsi3>
 8005c44:	0003      	movs	r3, r0
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	61bb      	str	r3, [r7, #24]
        break;
 8005c4a:	e036      	b.n	8005cba <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	085b      	lsrs	r3, r3, #1
 8005c52:	4a2a      	ldr	r2, [pc, #168]	; (8005cfc <UART_SetConfig+0x374>)
 8005c54:	189a      	adds	r2, r3, r2
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	0019      	movs	r1, r3
 8005c5c:	0010      	movs	r0, r2
 8005c5e:	f7fa fa53 	bl	8000108 <__udivsi3>
 8005c62:	0003      	movs	r3, r0
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	61bb      	str	r3, [r7, #24]
        break;
 8005c68:	e027      	b.n	8005cba <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c6a:	f7fe fe47 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 8005c6e:	0003      	movs	r3, r0
 8005c70:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	085a      	lsrs	r2, r3, #1
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	18d2      	adds	r2, r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	0019      	movs	r1, r3
 8005c82:	0010      	movs	r0, r2
 8005c84:	f7fa fa40 	bl	8000108 <__udivsi3>
 8005c88:	0003      	movs	r3, r0
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	61bb      	str	r3, [r7, #24]
        break;
 8005c8e:	e014      	b.n	8005cba <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	085b      	lsrs	r3, r3, #1
 8005c96:	2280      	movs	r2, #128	; 0x80
 8005c98:	0212      	lsls	r2, r2, #8
 8005c9a:	189a      	adds	r2, r3, r2
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	0019      	movs	r1, r3
 8005ca2:	0010      	movs	r0, r2
 8005ca4:	f7fa fa30 	bl	8000108 <__udivsi3>
 8005ca8:	0003      	movs	r3, r0
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	61bb      	str	r3, [r7, #24]
        break;
 8005cae:	e004      	b.n	8005cba <UART_SetConfig+0x332>
      default:
        ret = HAL_ERROR;
 8005cb0:	2317      	movs	r3, #23
 8005cb2:	18fb      	adds	r3, r7, r3
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	701a      	strb	r2, [r3, #0]
        break;
 8005cb8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	2b0f      	cmp	r3, #15
 8005cbe:	d91f      	bls.n	8005d00 <UART_SetConfig+0x378>
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	4a0d      	ldr	r2, [pc, #52]	; (8005cf8 <UART_SetConfig+0x370>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d81b      	bhi.n	8005d00 <UART_SetConfig+0x378>
    {
      huart->Instance->BRR = usartdiv;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	60da      	str	r2, [r3, #12]
 8005cd0:	e01a      	b.n	8005d08 <UART_SetConfig+0x380>
 8005cd2:	46c0      	nop			; (mov r8, r8)
 8005cd4:	efff69f3 	.word	0xefff69f3
 8005cd8:	ffffcfff 	.word	0xffffcfff
 8005cdc:	fffff4ff 	.word	0xfffff4ff
 8005ce0:	40013800 	.word	0x40013800
 8005ce4:	40021000 	.word	0x40021000
 8005ce8:	40004400 	.word	0x40004400
 8005cec:	40004800 	.word	0x40004800
 8005cf0:	40004c00 	.word	0x40004c00
 8005cf4:	00f42400 	.word	0x00f42400
 8005cf8:	0000ffff 	.word	0x0000ffff
 8005cfc:	007a1200 	.word	0x007a1200
    }
    else
    {
      ret = HAL_ERROR;
 8005d00:	2317      	movs	r3, #23
 8005d02:	18fb      	adds	r3, r7, r3
 8005d04:	2201      	movs	r2, #1
 8005d06:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005d14:	2317      	movs	r3, #23
 8005d16:	18fb      	adds	r3, r7, r3
 8005d18:	781b      	ldrb	r3, [r3, #0]
}
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	b008      	add	sp, #32
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	46c0      	nop			; (mov r8, r8)

08005d24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	2201      	movs	r2, #1
 8005d32:	4013      	ands	r3, r2
 8005d34:	d00b      	beq.n	8005d4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	4a4a      	ldr	r2, [pc, #296]	; (8005e68 <UART_AdvFeatureConfig+0x144>)
 8005d3e:	4013      	ands	r3, r2
 8005d40:	0019      	movs	r1, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	2202      	movs	r2, #2
 8005d54:	4013      	ands	r3, r2
 8005d56:	d00b      	beq.n	8005d70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	4a43      	ldr	r2, [pc, #268]	; (8005e6c <UART_AdvFeatureConfig+0x148>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	0019      	movs	r1, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	2204      	movs	r2, #4
 8005d76:	4013      	ands	r3, r2
 8005d78:	d00b      	beq.n	8005d92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	4a3b      	ldr	r2, [pc, #236]	; (8005e70 <UART_AdvFeatureConfig+0x14c>)
 8005d82:	4013      	ands	r3, r2
 8005d84:	0019      	movs	r1, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	2208      	movs	r2, #8
 8005d98:	4013      	ands	r3, r2
 8005d9a:	d00b      	beq.n	8005db4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	4a34      	ldr	r2, [pc, #208]	; (8005e74 <UART_AdvFeatureConfig+0x150>)
 8005da4:	4013      	ands	r3, r2
 8005da6:	0019      	movs	r1, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	2210      	movs	r2, #16
 8005dba:	4013      	ands	r3, r2
 8005dbc:	d00b      	beq.n	8005dd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	4a2c      	ldr	r2, [pc, #176]	; (8005e78 <UART_AdvFeatureConfig+0x154>)
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	0019      	movs	r1, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	2220      	movs	r2, #32
 8005ddc:	4013      	ands	r3, r2
 8005dde:	d00b      	beq.n	8005df8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	4a25      	ldr	r2, [pc, #148]	; (8005e7c <UART_AdvFeatureConfig+0x158>)
 8005de8:	4013      	ands	r3, r2
 8005dea:	0019      	movs	r1, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	2240      	movs	r2, #64	; 0x40
 8005dfe:	4013      	ands	r3, r2
 8005e00:	d01d      	beq.n	8005e3e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	4a1d      	ldr	r2, [pc, #116]	; (8005e80 <UART_AdvFeatureConfig+0x15c>)
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	0019      	movs	r1, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e1e:	2380      	movs	r3, #128	; 0x80
 8005e20:	035b      	lsls	r3, r3, #13
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d10b      	bne.n	8005e3e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	4a15      	ldr	r2, [pc, #84]	; (8005e84 <UART_AdvFeatureConfig+0x160>)
 8005e2e:	4013      	ands	r3, r2
 8005e30:	0019      	movs	r1, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	2280      	movs	r2, #128	; 0x80
 8005e44:	4013      	ands	r3, r2
 8005e46:	d00b      	beq.n	8005e60 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	4a0e      	ldr	r2, [pc, #56]	; (8005e88 <UART_AdvFeatureConfig+0x164>)
 8005e50:	4013      	ands	r3, r2
 8005e52:	0019      	movs	r1, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	605a      	str	r2, [r3, #4]
  }
}
 8005e60:	46c0      	nop			; (mov r8, r8)
 8005e62:	46bd      	mov	sp, r7
 8005e64:	b002      	add	sp, #8
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	fffdffff 	.word	0xfffdffff
 8005e6c:	fffeffff 	.word	0xfffeffff
 8005e70:	fffbffff 	.word	0xfffbffff
 8005e74:	ffff7fff 	.word	0xffff7fff
 8005e78:	ffffefff 	.word	0xffffefff
 8005e7c:	ffffdfff 	.word	0xffffdfff
 8005e80:	ffefffff 	.word	0xffefffff
 8005e84:	ff9fffff 	.word	0xff9fffff
 8005e88:	fff7ffff 	.word	0xfff7ffff

08005e8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af02      	add	r7, sp, #8
 8005e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005e9a:	f7fd fa17 	bl	80032cc <HAL_GetTick>
 8005e9e:	0003      	movs	r3, r0
 8005ea0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2208      	movs	r2, #8
 8005eaa:	4013      	ands	r3, r2
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	d10d      	bne.n	8005ecc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	2380      	movs	r3, #128	; 0x80
 8005eb4:	0399      	lsls	r1, r3, #14
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	4b16      	ldr	r3, [pc, #88]	; (8005f14 <UART_CheckIdleState+0x88>)
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	0013      	movs	r3, r2
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f000 f82a 	bl	8005f18 <UART_WaitOnFlagUntilTimeout>
 8005ec4:	1e03      	subs	r3, r0, #0
 8005ec6:	d001      	beq.n	8005ecc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e01f      	b.n	8005f0c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2204      	movs	r2, #4
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d10d      	bne.n	8005ef6 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	2380      	movs	r3, #128	; 0x80
 8005ede:	03d9      	lsls	r1, r3, #15
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	4b0c      	ldr	r3, [pc, #48]	; (8005f14 <UART_CheckIdleState+0x88>)
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	0013      	movs	r3, r2
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f000 f815 	bl	8005f18 <UART_WaitOnFlagUntilTimeout>
 8005eee:	1e03      	subs	r3, r0, #0
 8005ef0:	d001      	beq.n	8005ef6 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e00a      	b.n	8005f0c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2270      	movs	r2, #112	; 0x70
 8005f06:	2100      	movs	r1, #0
 8005f08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	b004      	add	sp, #16
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	01ffffff 	.word	0x01ffffff

08005f18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	603b      	str	r3, [r7, #0]
 8005f24:	1dfb      	adds	r3, r7, #7
 8005f26:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f28:	e05d      	b.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	d05a      	beq.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f30:	f7fd f9cc 	bl	80032cc <HAL_GetTick>
 8005f34:	0002      	movs	r2, r0
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	69ba      	ldr	r2, [r7, #24]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d302      	bcc.n	8005f46 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d11b      	bne.n	8005f7e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	492f      	ldr	r1, [pc, #188]	; (8006010 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005f52:	400a      	ands	r2, r1
 8005f54:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2101      	movs	r1, #1
 8005f62:	438a      	bics	r2, r1
 8005f64:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2270      	movs	r2, #112	; 0x70
 8005f76:	2100      	movs	r1, #0
 8005f78:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e043      	b.n	8006006 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2204      	movs	r2, #4
 8005f86:	4013      	ands	r3, r2
 8005f88:	d02d      	beq.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	69da      	ldr	r2, [r3, #28]
 8005f90:	2380      	movs	r3, #128	; 0x80
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	401a      	ands	r2, r3
 8005f96:	2380      	movs	r3, #128	; 0x80
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d123      	bne.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2280      	movs	r2, #128	; 0x80
 8005fa4:	0112      	lsls	r2, r2, #4
 8005fa6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4917      	ldr	r1, [pc, #92]	; (8006010 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005fb4:	400a      	ands	r2, r1
 8005fb6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689a      	ldr	r2, [r3, #8]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	438a      	bics	r2, r1
 8005fc6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2270      	movs	r2, #112	; 0x70
 8005fde:	2100      	movs	r1, #0
 8005fe0:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e00f      	b.n	8006006 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	425a      	negs	r2, r3
 8005ff6:	4153      	adcs	r3, r2
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	001a      	movs	r2, r3
 8005ffc:	1dfb      	adds	r3, r7, #7
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	429a      	cmp	r2, r3
 8006002:	d092      	beq.n	8005f2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	0018      	movs	r0, r3
 8006008:	46bd      	mov	sp, r7
 800600a:	b004      	add	sp, #16
 800600c:	bd80      	pop	{r7, pc}
 800600e:	46c0      	nop			; (mov r8, r8)
 8006010:	fffffe5f 	.word	0xfffffe5f

08006014 <osKernelInitialize>:
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	f3ef 8305 	mrs	r3, IPSR
 800601e:	60bb      	str	r3, [r7, #8]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d109      	bne.n	800603a <osKernelInitialize+0x26>
 8006026:	f3ef 8310 	mrs	r3, PRIMASK
 800602a:	607b      	str	r3, [r7, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d007      	beq.n	8006042 <osKernelInitialize+0x2e>
 8006032:	4b0d      	ldr	r3, [pc, #52]	; (8006068 <osKernelInitialize+0x54>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b02      	cmp	r3, #2
 8006038:	d103      	bne.n	8006042 <osKernelInitialize+0x2e>
 800603a:	2306      	movs	r3, #6
 800603c:	425b      	negs	r3, r3
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	e00c      	b.n	800605c <osKernelInitialize+0x48>
 8006042:	4b09      	ldr	r3, [pc, #36]	; (8006068 <osKernelInitialize+0x54>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d105      	bne.n	8006056 <osKernelInitialize+0x42>
 800604a:	4b07      	ldr	r3, [pc, #28]	; (8006068 <osKernelInitialize+0x54>)
 800604c:	2201      	movs	r2, #1
 800604e:	601a      	str	r2, [r3, #0]
 8006050:	2300      	movs	r3, #0
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	e002      	b.n	800605c <osKernelInitialize+0x48>
 8006056:	2301      	movs	r3, #1
 8006058:	425b      	negs	r3, r3
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	0018      	movs	r0, r3
 8006060:	46bd      	mov	sp, r7
 8006062:	b004      	add	sp, #16
 8006064:	bd80      	pop	{r7, pc}
 8006066:	46c0      	nop			; (mov r8, r8)
 8006068:	2000013c 	.word	0x2000013c

0800606c <osKernelStart>:
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	f3ef 8305 	mrs	r3, IPSR
 8006076:	60bb      	str	r3, [r7, #8]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d109      	bne.n	8006092 <osKernelStart+0x26>
 800607e:	f3ef 8310 	mrs	r3, PRIMASK
 8006082:	607b      	str	r3, [r7, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d007      	beq.n	800609a <osKernelStart+0x2e>
 800608a:	4b0e      	ldr	r3, [pc, #56]	; (80060c4 <osKernelStart+0x58>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b02      	cmp	r3, #2
 8006090:	d103      	bne.n	800609a <osKernelStart+0x2e>
 8006092:	2306      	movs	r3, #6
 8006094:	425b      	negs	r3, r3
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	e00e      	b.n	80060b8 <osKernelStart+0x4c>
 800609a:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <osKernelStart+0x58>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d107      	bne.n	80060b2 <osKernelStart+0x46>
 80060a2:	4b08      	ldr	r3, [pc, #32]	; (80060c4 <osKernelStart+0x58>)
 80060a4:	2202      	movs	r2, #2
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	f000 ff7e 	bl	8006fa8 <vTaskStartScheduler>
 80060ac:	2300      	movs	r3, #0
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	e002      	b.n	80060b8 <osKernelStart+0x4c>
 80060b2:	2301      	movs	r3, #1
 80060b4:	425b      	negs	r3, r3
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	0018      	movs	r0, r3
 80060bc:	46bd      	mov	sp, r7
 80060be:	b004      	add	sp, #16
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	46c0      	nop			; (mov r8, r8)
 80060c4:	2000013c 	.word	0x2000013c

080060c8 <osThreadNew>:
 80060c8:	b5b0      	push	{r4, r5, r7, lr}
 80060ca:	b090      	sub	sp, #64	; 0x40
 80060cc:	af04      	add	r7, sp, #16
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	2300      	movs	r3, #0
 80060d6:	613b      	str	r3, [r7, #16]
 80060d8:	f3ef 8305 	mrs	r3, IPSR
 80060dc:	61fb      	str	r3, [r7, #28]
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d000      	beq.n	80060e6 <osThreadNew+0x1e>
 80060e4:	e090      	b.n	8006208 <osThreadNew+0x140>
 80060e6:	f3ef 8310 	mrs	r3, PRIMASK
 80060ea:	61bb      	str	r3, [r7, #24]
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d004      	beq.n	80060fc <osThreadNew+0x34>
 80060f2:	4b48      	ldr	r3, [pc, #288]	; (8006214 <osThreadNew+0x14c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d100      	bne.n	80060fc <osThreadNew+0x34>
 80060fa:	e085      	b.n	8006208 <osThreadNew+0x140>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d100      	bne.n	8006104 <osThreadNew+0x3c>
 8006102:	e081      	b.n	8006208 <osThreadNew+0x140>
 8006104:	2380      	movs	r3, #128	; 0x80
 8006106:	62bb      	str	r3, [r7, #40]	; 0x28
 8006108:	2318      	movs	r3, #24
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
 800610c:	2117      	movs	r1, #23
 800610e:	187b      	adds	r3, r7, r1
 8006110:	2200      	movs	r2, #0
 8006112:	701a      	strb	r2, [r3, #0]
 8006114:	187b      	adds	r3, r7, r1
 8006116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006118:	2301      	movs	r3, #1
 800611a:	425b      	negs	r3, r3
 800611c:	623b      	str	r3, [r7, #32]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d044      	beq.n	80061ae <osThreadNew+0xe6>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <osThreadNew+0x6a>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d002      	beq.n	8006140 <osThreadNew+0x78>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	2b00      	cmp	r3, #0
 8006144:	d007      	beq.n	8006156 <osThreadNew+0x8e>
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	2b38      	cmp	r3, #56	; 0x38
 800614a:	d804      	bhi.n	8006156 <osThreadNew+0x8e>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	4013      	ands	r3, r2
 8006154:	d001      	beq.n	800615a <osThreadNew+0x92>
 8006156:	2300      	movs	r3, #0
 8006158:	e057      	b.n	800620a <osThreadNew+0x142>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <osThreadNew+0xa2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	089b      	lsrs	r3, r3, #2
 8006168:	62bb      	str	r3, [r7, #40]	; 0x28
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00e      	beq.n	8006190 <osThreadNew+0xc8>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	2b5b      	cmp	r3, #91	; 0x5b
 8006178:	d90a      	bls.n	8006190 <osThreadNew+0xc8>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d006      	beq.n	8006190 <osThreadNew+0xc8>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <osThreadNew+0xc8>
 800618a:	2301      	movs	r3, #1
 800618c:	623b      	str	r3, [r7, #32]
 800618e:	e010      	b.n	80061b2 <osThreadNew+0xea>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10c      	bne.n	80061b2 <osThreadNew+0xea>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d108      	bne.n	80061b2 <osThreadNew+0xea>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d104      	bne.n	80061b2 <osThreadNew+0xea>
 80061a8:	2300      	movs	r3, #0
 80061aa:	623b      	str	r3, [r7, #32]
 80061ac:	e001      	b.n	80061b2 <osThreadNew+0xea>
 80061ae:	2300      	movs	r3, #0
 80061b0:	623b      	str	r3, [r7, #32]
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d112      	bne.n	80061de <osThreadNew+0x116>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	691a      	ldr	r2, [r3, #16]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	68bd      	ldr	r5, [r7, #8]
 80061c2:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80061c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	9302      	str	r3, [sp, #8]
 80061ca:	9201      	str	r2, [sp, #4]
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	002b      	movs	r3, r5
 80061d2:	0022      	movs	r2, r4
 80061d4:	f000 fd49 	bl	8006c6a <xTaskCreateStatic>
 80061d8:	0003      	movs	r3, r0
 80061da:	613b      	str	r3, [r7, #16]
 80061dc:	e014      	b.n	8006208 <osThreadNew+0x140>
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d111      	bne.n	8006208 <osThreadNew+0x140>
 80061e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68bc      	ldr	r4, [r7, #8]
 80061ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	2310      	movs	r3, #16
 80061f0:	18fb      	adds	r3, r7, r3
 80061f2:	9301      	str	r3, [sp, #4]
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	0023      	movs	r3, r4
 80061fa:	f000 fd79 	bl	8006cf0 <xTaskCreate>
 80061fe:	0003      	movs	r3, r0
 8006200:	2b01      	cmp	r3, #1
 8006202:	d001      	beq.n	8006208 <osThreadNew+0x140>
 8006204:	2300      	movs	r3, #0
 8006206:	613b      	str	r3, [r7, #16]
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	0018      	movs	r0, r3
 800620c:	46bd      	mov	sp, r7
 800620e:	b00c      	add	sp, #48	; 0x30
 8006210:	bdb0      	pop	{r4, r5, r7, pc}
 8006212:	46c0      	nop			; (mov r8, r8)
 8006214:	2000013c 	.word	0x2000013c

08006218 <osDelay>:
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	f3ef 8305 	mrs	r3, IPSR
 8006224:	613b      	str	r3, [r7, #16]
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d109      	bne.n	8006240 <osDelay+0x28>
 800622c:	f3ef 8310 	mrs	r3, PRIMASK
 8006230:	60fb      	str	r3, [r7, #12]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d007      	beq.n	8006248 <osDelay+0x30>
 8006238:	4b0a      	ldr	r3, [pc, #40]	; (8006264 <osDelay+0x4c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b02      	cmp	r3, #2
 800623e:	d103      	bne.n	8006248 <osDelay+0x30>
 8006240:	2306      	movs	r3, #6
 8006242:	425b      	negs	r3, r3
 8006244:	617b      	str	r3, [r7, #20]
 8006246:	e008      	b.n	800625a <osDelay+0x42>
 8006248:	2300      	movs	r3, #0
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <osDelay+0x42>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	0018      	movs	r0, r3
 8006256:	f000 fe81 	bl	8006f5c <vTaskDelay>
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	0018      	movs	r0, r3
 800625e:	46bd      	mov	sp, r7
 8006260:	b006      	add	sp, #24
 8006262:	bd80      	pop	{r7, pc}
 8006264:	2000013c 	.word	0x2000013c

08006268 <vApplicationGetIdleTaskMemory>:
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4a06      	ldr	r2, [pc, #24]	; (8006290 <vApplicationGetIdleTaskMemory+0x28>)
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	4a05      	ldr	r2, [pc, #20]	; (8006294 <vApplicationGetIdleTaskMemory+0x2c>)
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2280      	movs	r2, #128	; 0x80
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	46c0      	nop			; (mov r8, r8)
 8006288:	46bd      	mov	sp, r7
 800628a:	b004      	add	sp, #16
 800628c:	bd80      	pop	{r7, pc}
 800628e:	46c0      	nop			; (mov r8, r8)
 8006290:	20000140 	.word	0x20000140
 8006294:	2000019c 	.word	0x2000019c

08006298 <vApplicationGetTimerTaskMemory>:
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4a06      	ldr	r2, [pc, #24]	; (80062c0 <vApplicationGetTimerTaskMemory+0x28>)
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	4a05      	ldr	r2, [pc, #20]	; (80062c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2280      	movs	r2, #128	; 0x80
 80062b4:	0052      	lsls	r2, r2, #1
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	46c0      	nop			; (mov r8, r8)
 80062ba:	46bd      	mov	sp, r7
 80062bc:	b004      	add	sp, #16
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	2000039c 	.word	0x2000039c
 80062c4:	200003f8 	.word	0x200003f8

080062c8 <vListInitialise>:
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3308      	adds	r3, #8
 80062d4:	001a      	movs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	605a      	str	r2, [r3, #4]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	4252      	negs	r2, r2
 80062e0:	609a      	str	r2, [r3, #8]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3308      	adds	r3, #8
 80062e6:	001a      	movs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	60da      	str	r2, [r3, #12]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3308      	adds	r3, #8
 80062f0:	001a      	movs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	611a      	str	r2, [r3, #16]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	46c0      	nop			; (mov r8, r8)
 80062fe:	46bd      	mov	sp, r7
 8006300:	b002      	add	sp, #8
 8006302:	bd80      	pop	{r7, pc}

08006304 <vListInitialiseItem>:
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	611a      	str	r2, [r3, #16]
 8006312:	46c0      	nop			; (mov r8, r8)
 8006314:	46bd      	mov	sp, r7
 8006316:	b002      	add	sp, #8
 8006318:	bd80      	pop	{r7, pc}

0800631a <vListInsertEnd>:
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	6039      	str	r1, [r7, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	605a      	str	r2, [r3, #4]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	609a      	str	r2, [r3, #8]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	605a      	str	r2, [r3, #4]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	609a      	str	r2, [r3, #8]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	611a      	str	r2, [r3, #16]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	601a      	str	r2, [r3, #0]
 8006356:	46c0      	nop			; (mov r8, r8)
 8006358:	46bd      	mov	sp, r7
 800635a:	b004      	add	sp, #16
 800635c:	bd80      	pop	{r7, pc}

0800635e <vListInsert>:
 800635e:	b580      	push	{r7, lr}
 8006360:	b084      	sub	sp, #16
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	6039      	str	r1, [r7, #0]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	60bb      	str	r3, [r7, #8]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	3301      	adds	r3, #1
 8006372:	d103      	bne.n	800637c <vListInsert+0x1e>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	60fb      	str	r3, [r7, #12]
 800637a:	e00c      	b.n	8006396 <vListInsert+0x38>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3308      	adds	r3, #8
 8006380:	60fb      	str	r3, [r7, #12]
 8006382:	e002      	b.n	800638a <vListInsert+0x2c>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	60fb      	str	r3, [r7, #12]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	429a      	cmp	r2, r3
 8006394:	d2f6      	bcs.n	8006384 <vListInsert+0x26>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	605a      	str	r2, [r3, #4]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	609a      	str	r2, [r3, #8]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	609a      	str	r2, [r3, #8]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	605a      	str	r2, [r3, #4]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	611a      	str	r2, [r3, #16]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	1c5a      	adds	r2, r3, #1
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	46c0      	nop			; (mov r8, r8)
 80063c4:	46bd      	mov	sp, r7
 80063c6:	b004      	add	sp, #16
 80063c8:	bd80      	pop	{r7, pc}

080063ca <uxListRemove>:
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6892      	ldr	r2, [r2, #8]
 80063e0:	609a      	str	r2, [r3, #8]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6852      	ldr	r2, [r2, #4]
 80063ea:	605a      	str	r2, [r3, #4]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d103      	bne.n	80063fe <uxListRemove+0x34>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	605a      	str	r2, [r3, #4]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	611a      	str	r2, [r3, #16]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	1e5a      	subs	r2, r3, #1
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	0018      	movs	r0, r3
 8006414:	46bd      	mov	sp, r7
 8006416:	b004      	add	sp, #16
 8006418:	bd80      	pop	{r7, pc}

0800641a <xQueueGenericReset>:
 800641a:	b580      	push	{r7, lr}
 800641c:	b084      	sub	sp, #16
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
 8006422:	6039      	str	r1, [r7, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	60fb      	str	r3, [r7, #12]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <xQueueGenericReset+0x18>
 800642e:	b672      	cpsid	i
 8006430:	e7fe      	b.n	8006430 <xQueueGenericReset+0x16>
 8006432:	f001 fdcd 	bl	8007fd0 <vPortEnterCritical>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	434b      	muls	r3, r1
 8006444:	18d2      	adds	r2, r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	605a      	str	r2, [r3, #4]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	639a      	str	r2, [r3, #56]	; 0x38
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	609a      	str	r2, [r3, #8]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006460:	1e59      	subs	r1, r3, #1
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	434b      	muls	r3, r1
 8006468:	18d2      	adds	r2, r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	60da      	str	r2, [r3, #12]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2244      	movs	r2, #68	; 0x44
 8006472:	21ff      	movs	r1, #255	; 0xff
 8006474:	5499      	strb	r1, [r3, r2]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2245      	movs	r2, #69	; 0x45
 800647a:	21ff      	movs	r1, #255	; 0xff
 800647c:	5499      	strb	r1, [r3, r2]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10d      	bne.n	80064a0 <xQueueGenericReset+0x86>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d013      	beq.n	80064b4 <xQueueGenericReset+0x9a>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	3310      	adds	r3, #16
 8006490:	0018      	movs	r0, r3
 8006492:	f000 ffcd 	bl	8007430 <xTaskRemoveFromEventList>
 8006496:	1e03      	subs	r3, r0, #0
 8006498:	d00c      	beq.n	80064b4 <xQueueGenericReset+0x9a>
 800649a:	f001 fd89 	bl	8007fb0 <vPortYield>
 800649e:	e009      	b.n	80064b4 <xQueueGenericReset+0x9a>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	3310      	adds	r3, #16
 80064a4:	0018      	movs	r0, r3
 80064a6:	f7ff ff0f 	bl	80062c8 <vListInitialise>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	3324      	adds	r3, #36	; 0x24
 80064ae:	0018      	movs	r0, r3
 80064b0:	f7ff ff0a 	bl	80062c8 <vListInitialise>
 80064b4:	f001 fd9e 	bl	8007ff4 <vPortExitCritical>
 80064b8:	2301      	movs	r3, #1
 80064ba:	0018      	movs	r0, r3
 80064bc:	46bd      	mov	sp, r7
 80064be:	b004      	add	sp, #16
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <xQueueGenericCreateStatic>:
 80064c2:	b590      	push	{r4, r7, lr}
 80064c4:	b089      	sub	sp, #36	; 0x24
 80064c6:	af02      	add	r7, sp, #8
 80064c8:	60f8      	str	r0, [r7, #12]
 80064ca:	60b9      	str	r1, [r7, #8]
 80064cc:	607a      	str	r2, [r7, #4]
 80064ce:	603b      	str	r3, [r7, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <xQueueGenericCreateStatic+0x18>
 80064d6:	b672      	cpsid	i
 80064d8:	e7fe      	b.n	80064d8 <xQueueGenericCreateStatic+0x16>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <xQueueGenericCreateStatic+0x22>
 80064e0:	b672      	cpsid	i
 80064e2:	e7fe      	b.n	80064e2 <xQueueGenericCreateStatic+0x20>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <xQueueGenericCreateStatic+0x2e>
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <xQueueGenericCreateStatic+0x32>
 80064f0:	2301      	movs	r3, #1
 80064f2:	e000      	b.n	80064f6 <xQueueGenericCreateStatic+0x34>
 80064f4:	2300      	movs	r3, #0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <xQueueGenericCreateStatic+0x3c>
 80064fa:	b672      	cpsid	i
 80064fc:	e7fe      	b.n	80064fc <xQueueGenericCreateStatic+0x3a>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d102      	bne.n	800650a <xQueueGenericCreateStatic+0x48>
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <xQueueGenericCreateStatic+0x4c>
 800650a:	2301      	movs	r3, #1
 800650c:	e000      	b.n	8006510 <xQueueGenericCreateStatic+0x4e>
 800650e:	2300      	movs	r3, #0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <xQueueGenericCreateStatic+0x56>
 8006514:	b672      	cpsid	i
 8006516:	e7fe      	b.n	8006516 <xQueueGenericCreateStatic+0x54>
 8006518:	2350      	movs	r3, #80	; 0x50
 800651a:	613b      	str	r3, [r7, #16]
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	2b50      	cmp	r3, #80	; 0x50
 8006520:	d001      	beq.n	8006526 <xQueueGenericCreateStatic+0x64>
 8006522:	b672      	cpsid	i
 8006524:	e7fe      	b.n	8006524 <xQueueGenericCreateStatic+0x62>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	617b      	str	r3, [r7, #20]
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00e      	beq.n	800654e <xQueueGenericCreateStatic+0x8c>
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2246      	movs	r2, #70	; 0x46
 8006534:	2101      	movs	r1, #1
 8006536:	5499      	strb	r1, [r3, r2]
 8006538:	2328      	movs	r3, #40	; 0x28
 800653a:	18fb      	adds	r3, r7, r3
 800653c:	781c      	ldrb	r4, [r3, #0]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	68b9      	ldr	r1, [r7, #8]
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	0023      	movs	r3, r4
 800654a:	f000 f805 	bl	8006558 <prvInitialiseNewQueue>
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	0018      	movs	r0, r3
 8006552:	46bd      	mov	sp, r7
 8006554:	b007      	add	sp, #28
 8006556:	bd90      	pop	{r4, r7, pc}

08006558 <prvInitialiseNewQueue>:
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	001a      	movs	r2, r3
 8006566:	1cfb      	adds	r3, r7, #3
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d103      	bne.n	8006578 <prvInitialiseNewQueue+0x20>
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	e002      	b.n	800657e <prvInitialiseNewQueue+0x26>
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	63da      	str	r2, [r3, #60]	; 0x3c
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	641a      	str	r2, [r3, #64]	; 0x40
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	2101      	movs	r1, #1
 800658e:	0018      	movs	r0, r3
 8006590:	f7ff ff43 	bl	800641a <xQueueGenericReset>
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	1cfa      	adds	r2, r7, #3
 8006598:	214c      	movs	r1, #76	; 0x4c
 800659a:	7812      	ldrb	r2, [r2, #0]
 800659c:	545a      	strb	r2, [r3, r1]
 800659e:	46c0      	nop			; (mov r8, r8)
 80065a0:	46bd      	mov	sp, r7
 80065a2:	b004      	add	sp, #16
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <xQueueGenericSend>:
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b08a      	sub	sp, #40	; 0x28
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	60f8      	str	r0, [r7, #12]
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	607a      	str	r2, [r7, #4]
 80065b2:	603b      	str	r3, [r7, #0]
 80065b4:	2300      	movs	r3, #0
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	623b      	str	r3, [r7, #32]
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <xQueueGenericSend+0x20>
 80065c2:	b672      	cpsid	i
 80065c4:	e7fe      	b.n	80065c4 <xQueueGenericSend+0x1e>
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d103      	bne.n	80065d4 <xQueueGenericSend+0x2e>
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <xQueueGenericSend+0x32>
 80065d4:	2301      	movs	r3, #1
 80065d6:	e000      	b.n	80065da <xQueueGenericSend+0x34>
 80065d8:	2300      	movs	r3, #0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <xQueueGenericSend+0x3c>
 80065de:	b672      	cpsid	i
 80065e0:	e7fe      	b.n	80065e0 <xQueueGenericSend+0x3a>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d103      	bne.n	80065f0 <xQueueGenericSend+0x4a>
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d101      	bne.n	80065f4 <xQueueGenericSend+0x4e>
 80065f0:	2301      	movs	r3, #1
 80065f2:	e000      	b.n	80065f6 <xQueueGenericSend+0x50>
 80065f4:	2300      	movs	r3, #0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <xQueueGenericSend+0x58>
 80065fa:	b672      	cpsid	i
 80065fc:	e7fe      	b.n	80065fc <xQueueGenericSend+0x56>
 80065fe:	f001 f8af 	bl	8007760 <xTaskGetSchedulerState>
 8006602:	1e03      	subs	r3, r0, #0
 8006604:	d102      	bne.n	800660c <xQueueGenericSend+0x66>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <xQueueGenericSend+0x6a>
 800660c:	2301      	movs	r3, #1
 800660e:	e000      	b.n	8006612 <xQueueGenericSend+0x6c>
 8006610:	2300      	movs	r3, #0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <xQueueGenericSend+0x74>
 8006616:	b672      	cpsid	i
 8006618:	e7fe      	b.n	8006618 <xQueueGenericSend+0x72>
 800661a:	f001 fcd9 	bl	8007fd0 <vPortEnterCritical>
 800661e:	6a3b      	ldr	r3, [r7, #32]
 8006620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006626:	429a      	cmp	r2, r3
 8006628:	d302      	bcc.n	8006630 <xQueueGenericSend+0x8a>
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b02      	cmp	r3, #2
 800662e:	d11e      	bne.n	800666e <xQueueGenericSend+0xc8>
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	68b9      	ldr	r1, [r7, #8]
 8006634:	6a3b      	ldr	r3, [r7, #32]
 8006636:	0018      	movs	r0, r3
 8006638:	f000 f99f 	bl	800697a <prvCopyDataToQueue>
 800663c:	0003      	movs	r3, r0
 800663e:	61fb      	str	r3, [r7, #28]
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	2b00      	cmp	r3, #0
 8006646:	d009      	beq.n	800665c <xQueueGenericSend+0xb6>
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	3324      	adds	r3, #36	; 0x24
 800664c:	0018      	movs	r0, r3
 800664e:	f000 feef 	bl	8007430 <xTaskRemoveFromEventList>
 8006652:	1e03      	subs	r3, r0, #0
 8006654:	d007      	beq.n	8006666 <xQueueGenericSend+0xc0>
 8006656:	f001 fcab 	bl	8007fb0 <vPortYield>
 800665a:	e004      	b.n	8006666 <xQueueGenericSend+0xc0>
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <xQueueGenericSend+0xc0>
 8006662:	f001 fca5 	bl	8007fb0 <vPortYield>
 8006666:	f001 fcc5 	bl	8007ff4 <vPortExitCritical>
 800666a:	2301      	movs	r3, #1
 800666c:	e05b      	b.n	8006726 <xQueueGenericSend+0x180>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d103      	bne.n	800667c <xQueueGenericSend+0xd6>
 8006674:	f001 fcbe 	bl	8007ff4 <vPortExitCritical>
 8006678:	2300      	movs	r3, #0
 800667a:	e054      	b.n	8006726 <xQueueGenericSend+0x180>
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	2b00      	cmp	r3, #0
 8006680:	d106      	bne.n	8006690 <xQueueGenericSend+0xea>
 8006682:	2314      	movs	r3, #20
 8006684:	18fb      	adds	r3, r7, r3
 8006686:	0018      	movs	r0, r3
 8006688:	f000 ff2e 	bl	80074e8 <vTaskInternalSetTimeOutState>
 800668c:	2301      	movs	r3, #1
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
 8006690:	f001 fcb0 	bl	8007ff4 <vPortExitCritical>
 8006694:	f000 fcdc 	bl	8007050 <vTaskSuspendAll>
 8006698:	f001 fc9a 	bl	8007fd0 <vPortEnterCritical>
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	2244      	movs	r2, #68	; 0x44
 80066a0:	5c9b      	ldrb	r3, [r3, r2]
 80066a2:	b25b      	sxtb	r3, r3
 80066a4:	3301      	adds	r3, #1
 80066a6:	d103      	bne.n	80066b0 <xQueueGenericSend+0x10a>
 80066a8:	6a3b      	ldr	r3, [r7, #32]
 80066aa:	2244      	movs	r2, #68	; 0x44
 80066ac:	2100      	movs	r1, #0
 80066ae:	5499      	strb	r1, [r3, r2]
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	2245      	movs	r2, #69	; 0x45
 80066b4:	5c9b      	ldrb	r3, [r3, r2]
 80066b6:	b25b      	sxtb	r3, r3
 80066b8:	3301      	adds	r3, #1
 80066ba:	d103      	bne.n	80066c4 <xQueueGenericSend+0x11e>
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	2245      	movs	r2, #69	; 0x45
 80066c0:	2100      	movs	r1, #0
 80066c2:	5499      	strb	r1, [r3, r2]
 80066c4:	f001 fc96 	bl	8007ff4 <vPortExitCritical>
 80066c8:	1d3a      	adds	r2, r7, #4
 80066ca:	2314      	movs	r3, #20
 80066cc:	18fb      	adds	r3, r7, r3
 80066ce:	0011      	movs	r1, r2
 80066d0:	0018      	movs	r0, r3
 80066d2:	f000 ff1d 	bl	8007510 <xTaskCheckForTimeOut>
 80066d6:	1e03      	subs	r3, r0, #0
 80066d8:	d11e      	bne.n	8006718 <xQueueGenericSend+0x172>
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	0018      	movs	r0, r3
 80066de:	f000 fa51 	bl	8006b84 <prvIsQueueFull>
 80066e2:	1e03      	subs	r3, r0, #0
 80066e4:	d011      	beq.n	800670a <xQueueGenericSend+0x164>
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	3310      	adds	r3, #16
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	0011      	movs	r1, r2
 80066ee:	0018      	movs	r0, r3
 80066f0:	f000 fe5a 	bl	80073a8 <vTaskPlaceOnEventList>
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	0018      	movs	r0, r3
 80066f8:	f000 f9d0 	bl	8006a9c <prvUnlockQueue>
 80066fc:	f000 fcb4 	bl	8007068 <xTaskResumeAll>
 8006700:	1e03      	subs	r3, r0, #0
 8006702:	d18a      	bne.n	800661a <xQueueGenericSend+0x74>
 8006704:	f001 fc54 	bl	8007fb0 <vPortYield>
 8006708:	e787      	b.n	800661a <xQueueGenericSend+0x74>
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	0018      	movs	r0, r3
 800670e:	f000 f9c5 	bl	8006a9c <prvUnlockQueue>
 8006712:	f000 fca9 	bl	8007068 <xTaskResumeAll>
 8006716:	e780      	b.n	800661a <xQueueGenericSend+0x74>
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	0018      	movs	r0, r3
 800671c:	f000 f9be 	bl	8006a9c <prvUnlockQueue>
 8006720:	f000 fca2 	bl	8007068 <xTaskResumeAll>
 8006724:	2300      	movs	r3, #0
 8006726:	0018      	movs	r0, r3
 8006728:	46bd      	mov	sp, r7
 800672a:	b00a      	add	sp, #40	; 0x28
 800672c:	bd80      	pop	{r7, pc}

0800672e <xQueueGenericSendFromISR>:
 800672e:	b590      	push	{r4, r7, lr}
 8006730:	b089      	sub	sp, #36	; 0x24
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	607a      	str	r2, [r7, #4]
 800673a:	603b      	str	r3, [r7, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	61bb      	str	r3, [r7, #24]
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <xQueueGenericSendFromISR+0x1c>
 8006746:	b672      	cpsid	i
 8006748:	e7fe      	b.n	8006748 <xQueueGenericSendFromISR+0x1a>
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d103      	bne.n	8006758 <xQueueGenericSendFromISR+0x2a>
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <xQueueGenericSendFromISR+0x2e>
 8006758:	2301      	movs	r3, #1
 800675a:	e000      	b.n	800675e <xQueueGenericSendFromISR+0x30>
 800675c:	2300      	movs	r3, #0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <xQueueGenericSendFromISR+0x38>
 8006762:	b672      	cpsid	i
 8006764:	e7fe      	b.n	8006764 <xQueueGenericSendFromISR+0x36>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2b02      	cmp	r3, #2
 800676a:	d103      	bne.n	8006774 <xQueueGenericSendFromISR+0x46>
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006770:	2b01      	cmp	r3, #1
 8006772:	d101      	bne.n	8006778 <xQueueGenericSendFromISR+0x4a>
 8006774:	2301      	movs	r3, #1
 8006776:	e000      	b.n	800677a <xQueueGenericSendFromISR+0x4c>
 8006778:	2300      	movs	r3, #0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <xQueueGenericSendFromISR+0x54>
 800677e:	b672      	cpsid	i
 8006780:	e7fe      	b.n	8006780 <xQueueGenericSendFromISR+0x52>
 8006782:	f001 fc4f 	bl	8008024 <ulSetInterruptMaskFromISR>
 8006786:	0003      	movs	r3, r0
 8006788:	617b      	str	r3, [r7, #20]
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006792:	429a      	cmp	r2, r3
 8006794:	d302      	bcc.n	800679c <xQueueGenericSendFromISR+0x6e>
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b02      	cmp	r3, #2
 800679a:	d12e      	bne.n	80067fa <xQueueGenericSendFromISR+0xcc>
 800679c:	2413      	movs	r4, #19
 800679e:	193b      	adds	r3, r7, r4
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	2145      	movs	r1, #69	; 0x45
 80067a4:	5c52      	ldrb	r2, [r2, r1]
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	68b9      	ldr	r1, [r7, #8]
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	0018      	movs	r0, r3
 80067b0:	f000 f8e3 	bl	800697a <prvCopyDataToQueue>
 80067b4:	193b      	adds	r3, r7, r4
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	b25b      	sxtb	r3, r3
 80067ba:	3301      	adds	r3, #1
 80067bc:	d111      	bne.n	80067e2 <xQueueGenericSendFromISR+0xb4>
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d016      	beq.n	80067f4 <xQueueGenericSendFromISR+0xc6>
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	3324      	adds	r3, #36	; 0x24
 80067ca:	0018      	movs	r0, r3
 80067cc:	f000 fe30 	bl	8007430 <xTaskRemoveFromEventList>
 80067d0:	1e03      	subs	r3, r0, #0
 80067d2:	d00f      	beq.n	80067f4 <xQueueGenericSendFromISR+0xc6>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00c      	beq.n	80067f4 <xQueueGenericSendFromISR+0xc6>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	e008      	b.n	80067f4 <xQueueGenericSendFromISR+0xc6>
 80067e2:	2313      	movs	r3, #19
 80067e4:	18fb      	adds	r3, r7, r3
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	3301      	adds	r3, #1
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	b259      	sxtb	r1, r3
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	2245      	movs	r2, #69	; 0x45
 80067f2:	5499      	strb	r1, [r3, r2]
 80067f4:	2301      	movs	r3, #1
 80067f6:	61fb      	str	r3, [r7, #28]
 80067f8:	e001      	b.n	80067fe <xQueueGenericSendFromISR+0xd0>
 80067fa:	2300      	movs	r3, #0
 80067fc:	61fb      	str	r3, [r7, #28]
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	0018      	movs	r0, r3
 8006802:	f001 fc15 	bl	8008030 <vClearInterruptMaskFromISR>
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	0018      	movs	r0, r3
 800680a:	46bd      	mov	sp, r7
 800680c:	b009      	add	sp, #36	; 0x24
 800680e:	bd90      	pop	{r4, r7, pc}

08006810 <xQueueReceive>:
 8006810:	b580      	push	{r7, lr}
 8006812:	b08a      	sub	sp, #40	; 0x28
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
 800681c:	2300      	movs	r3, #0
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	623b      	str	r3, [r7, #32]
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d101      	bne.n	800682e <xQueueReceive+0x1e>
 800682a:	b672      	cpsid	i
 800682c:	e7fe      	b.n	800682c <xQueueReceive+0x1c>
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d103      	bne.n	800683c <xQueueReceive+0x2c>
 8006834:	6a3b      	ldr	r3, [r7, #32]
 8006836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006838:	2b00      	cmp	r3, #0
 800683a:	d101      	bne.n	8006840 <xQueueReceive+0x30>
 800683c:	2301      	movs	r3, #1
 800683e:	e000      	b.n	8006842 <xQueueReceive+0x32>
 8006840:	2300      	movs	r3, #0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <xQueueReceive+0x3a>
 8006846:	b672      	cpsid	i
 8006848:	e7fe      	b.n	8006848 <xQueueReceive+0x38>
 800684a:	f000 ff89 	bl	8007760 <xTaskGetSchedulerState>
 800684e:	1e03      	subs	r3, r0, #0
 8006850:	d102      	bne.n	8006858 <xQueueReceive+0x48>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <xQueueReceive+0x4c>
 8006858:	2301      	movs	r3, #1
 800685a:	e000      	b.n	800685e <xQueueReceive+0x4e>
 800685c:	2300      	movs	r3, #0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <xQueueReceive+0x56>
 8006862:	b672      	cpsid	i
 8006864:	e7fe      	b.n	8006864 <xQueueReceive+0x54>
 8006866:	f001 fbb3 	bl	8007fd0 <vPortEnterCritical>
 800686a:	6a3b      	ldr	r3, [r7, #32]
 800686c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686e:	61fb      	str	r3, [r7, #28]
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d01a      	beq.n	80068ac <xQueueReceive+0x9c>
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	6a3b      	ldr	r3, [r7, #32]
 800687a:	0011      	movs	r1, r2
 800687c:	0018      	movs	r0, r3
 800687e:	f000 f8e7 	bl	8006a50 <prvCopyDataFromQueue>
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	1e5a      	subs	r2, r3, #1
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	639a      	str	r2, [r3, #56]	; 0x38
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d008      	beq.n	80068a4 <xQueueReceive+0x94>
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	3310      	adds	r3, #16
 8006896:	0018      	movs	r0, r3
 8006898:	f000 fdca 	bl	8007430 <xTaskRemoveFromEventList>
 800689c:	1e03      	subs	r3, r0, #0
 800689e:	d001      	beq.n	80068a4 <xQueueReceive+0x94>
 80068a0:	f001 fb86 	bl	8007fb0 <vPortYield>
 80068a4:	f001 fba6 	bl	8007ff4 <vPortExitCritical>
 80068a8:	2301      	movs	r3, #1
 80068aa:	e062      	b.n	8006972 <xQueueReceive+0x162>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d103      	bne.n	80068ba <xQueueReceive+0xaa>
 80068b2:	f001 fb9f 	bl	8007ff4 <vPortExitCritical>
 80068b6:	2300      	movs	r3, #0
 80068b8:	e05b      	b.n	8006972 <xQueueReceive+0x162>
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d106      	bne.n	80068ce <xQueueReceive+0xbe>
 80068c0:	2314      	movs	r3, #20
 80068c2:	18fb      	adds	r3, r7, r3
 80068c4:	0018      	movs	r0, r3
 80068c6:	f000 fe0f 	bl	80074e8 <vTaskInternalSetTimeOutState>
 80068ca:	2301      	movs	r3, #1
 80068cc:	627b      	str	r3, [r7, #36]	; 0x24
 80068ce:	f001 fb91 	bl	8007ff4 <vPortExitCritical>
 80068d2:	f000 fbbd 	bl	8007050 <vTaskSuspendAll>
 80068d6:	f001 fb7b 	bl	8007fd0 <vPortEnterCritical>
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	2244      	movs	r2, #68	; 0x44
 80068de:	5c9b      	ldrb	r3, [r3, r2]
 80068e0:	b25b      	sxtb	r3, r3
 80068e2:	3301      	adds	r3, #1
 80068e4:	d103      	bne.n	80068ee <xQueueReceive+0xde>
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	2244      	movs	r2, #68	; 0x44
 80068ea:	2100      	movs	r1, #0
 80068ec:	5499      	strb	r1, [r3, r2]
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	2245      	movs	r2, #69	; 0x45
 80068f2:	5c9b      	ldrb	r3, [r3, r2]
 80068f4:	b25b      	sxtb	r3, r3
 80068f6:	3301      	adds	r3, #1
 80068f8:	d103      	bne.n	8006902 <xQueueReceive+0xf2>
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	2245      	movs	r2, #69	; 0x45
 80068fe:	2100      	movs	r1, #0
 8006900:	5499      	strb	r1, [r3, r2]
 8006902:	f001 fb77 	bl	8007ff4 <vPortExitCritical>
 8006906:	1d3a      	adds	r2, r7, #4
 8006908:	2314      	movs	r3, #20
 800690a:	18fb      	adds	r3, r7, r3
 800690c:	0011      	movs	r1, r2
 800690e:	0018      	movs	r0, r3
 8006910:	f000 fdfe 	bl	8007510 <xTaskCheckForTimeOut>
 8006914:	1e03      	subs	r3, r0, #0
 8006916:	d11e      	bne.n	8006956 <xQueueReceive+0x146>
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	0018      	movs	r0, r3
 800691c:	f000 f91c 	bl	8006b58 <prvIsQueueEmpty>
 8006920:	1e03      	subs	r3, r0, #0
 8006922:	d011      	beq.n	8006948 <xQueueReceive+0x138>
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	3324      	adds	r3, #36	; 0x24
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	0011      	movs	r1, r2
 800692c:	0018      	movs	r0, r3
 800692e:	f000 fd3b 	bl	80073a8 <vTaskPlaceOnEventList>
 8006932:	6a3b      	ldr	r3, [r7, #32]
 8006934:	0018      	movs	r0, r3
 8006936:	f000 f8b1 	bl	8006a9c <prvUnlockQueue>
 800693a:	f000 fb95 	bl	8007068 <xTaskResumeAll>
 800693e:	1e03      	subs	r3, r0, #0
 8006940:	d191      	bne.n	8006866 <xQueueReceive+0x56>
 8006942:	f001 fb35 	bl	8007fb0 <vPortYield>
 8006946:	e78e      	b.n	8006866 <xQueueReceive+0x56>
 8006948:	6a3b      	ldr	r3, [r7, #32]
 800694a:	0018      	movs	r0, r3
 800694c:	f000 f8a6 	bl	8006a9c <prvUnlockQueue>
 8006950:	f000 fb8a 	bl	8007068 <xTaskResumeAll>
 8006954:	e787      	b.n	8006866 <xQueueReceive+0x56>
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	0018      	movs	r0, r3
 800695a:	f000 f89f 	bl	8006a9c <prvUnlockQueue>
 800695e:	f000 fb83 	bl	8007068 <xTaskResumeAll>
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	0018      	movs	r0, r3
 8006966:	f000 f8f7 	bl	8006b58 <prvIsQueueEmpty>
 800696a:	1e03      	subs	r3, r0, #0
 800696c:	d100      	bne.n	8006970 <xQueueReceive+0x160>
 800696e:	e77a      	b.n	8006866 <xQueueReceive+0x56>
 8006970:	2300      	movs	r3, #0
 8006972:	0018      	movs	r0, r3
 8006974:	46bd      	mov	sp, r7
 8006976:	b00a      	add	sp, #40	; 0x28
 8006978:	bd80      	pop	{r7, pc}

0800697a <prvCopyDataToQueue>:
 800697a:	b580      	push	{r7, lr}
 800697c:	b086      	sub	sp, #24
 800697e:	af00      	add	r7, sp, #0
 8006980:	60f8      	str	r0, [r7, #12]
 8006982:	60b9      	str	r1, [r7, #8]
 8006984:	607a      	str	r2, [r7, #4]
 8006986:	2300      	movs	r3, #0
 8006988:	617b      	str	r3, [r7, #20]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698e:	613b      	str	r3, [r7, #16]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10e      	bne.n	80069b6 <prvCopyDataToQueue+0x3c>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d14e      	bne.n	8006a3e <prvCopyDataToQueue+0xc4>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	0018      	movs	r0, r3
 80069a6:	f000 fef7 	bl	8007798 <xTaskPriorityDisinherit>
 80069aa:	0003      	movs	r3, r0
 80069ac:	617b      	str	r3, [r7, #20]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	605a      	str	r2, [r3, #4]
 80069b4:	e043      	b.n	8006a3e <prvCopyDataToQueue+0xc4>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d119      	bne.n	80069f0 <prvCopyDataToQueue+0x76>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6898      	ldr	r0, [r3, #8]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	0019      	movs	r1, r3
 80069c8:	f001 fd64 	bl	8008494 <memcpy>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d4:	18d2      	adds	r2, r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	609a      	str	r2, [r3, #8]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	689a      	ldr	r2, [r3, #8]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d32b      	bcc.n	8006a3e <prvCopyDataToQueue+0xc4>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	609a      	str	r2, [r3, #8]
 80069ee:	e026      	b.n	8006a3e <prvCopyDataToQueue+0xc4>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	68d8      	ldr	r0, [r3, #12]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	0019      	movs	r1, r3
 80069fc:	f001 fd4a 	bl	8008494 <memcpy>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	68da      	ldr	r2, [r3, #12]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a08:	425b      	negs	r3, r3
 8006a0a:	18d2      	adds	r2, r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	60da      	str	r2, [r3, #12]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	68da      	ldr	r2, [r3, #12]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d207      	bcs.n	8006a2c <prvCopyDataToQueue+0xb2>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a24:	425b      	negs	r3, r3
 8006a26:	18d2      	adds	r2, r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	60da      	str	r2, [r3, #12]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d105      	bne.n	8006a3e <prvCopyDataToQueue+0xc4>
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <prvCopyDataToQueue+0xc4>
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	613b      	str	r3, [r7, #16]
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	1c5a      	adds	r2, r3, #1
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	639a      	str	r2, [r3, #56]	; 0x38
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	0018      	movs	r0, r3
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	b006      	add	sp, #24
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <prvCopyDataFromQueue>:
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d018      	beq.n	8006a94 <prvCopyDataFromQueue+0x44>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68da      	ldr	r2, [r3, #12]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	18d2      	adds	r2, r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	60da      	str	r2, [r3, #12]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68da      	ldr	r2, [r3, #12]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d303      	bcc.n	8006a84 <prvCopyDataFromQueue+0x34>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	60da      	str	r2, [r3, #12]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68d9      	ldr	r1, [r3, #12]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	0018      	movs	r0, r3
 8006a90:	f001 fd00 	bl	8008494 <memcpy>
 8006a94:	46c0      	nop			; (mov r8, r8)
 8006a96:	46bd      	mov	sp, r7
 8006a98:	b002      	add	sp, #8
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <prvUnlockQueue>:
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	f001 fa94 	bl	8007fd0 <vPortEnterCritical>
 8006aa8:	230f      	movs	r3, #15
 8006aaa:	18fb      	adds	r3, r7, r3
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	2145      	movs	r1, #69	; 0x45
 8006ab0:	5c52      	ldrb	r2, [r2, r1]
 8006ab2:	701a      	strb	r2, [r3, #0]
 8006ab4:	e013      	b.n	8006ade <prvUnlockQueue+0x42>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d016      	beq.n	8006aec <prvUnlockQueue+0x50>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	3324      	adds	r3, #36	; 0x24
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	f000 fcb4 	bl	8007430 <xTaskRemoveFromEventList>
 8006ac8:	1e03      	subs	r3, r0, #0
 8006aca:	d001      	beq.n	8006ad0 <prvUnlockQueue+0x34>
 8006acc:	f000 fd70 	bl	80075b0 <vTaskMissedYield>
 8006ad0:	210f      	movs	r1, #15
 8006ad2:	187b      	adds	r3, r7, r1
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	187b      	adds	r3, r7, r1
 8006adc:	701a      	strb	r2, [r3, #0]
 8006ade:	230f      	movs	r3, #15
 8006ae0:	18fb      	adds	r3, r7, r3
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	b25b      	sxtb	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	dce5      	bgt.n	8006ab6 <prvUnlockQueue+0x1a>
 8006aea:	e000      	b.n	8006aee <prvUnlockQueue+0x52>
 8006aec:	46c0      	nop			; (mov r8, r8)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2245      	movs	r2, #69	; 0x45
 8006af2:	21ff      	movs	r1, #255	; 0xff
 8006af4:	5499      	strb	r1, [r3, r2]
 8006af6:	f001 fa7d 	bl	8007ff4 <vPortExitCritical>
 8006afa:	f001 fa69 	bl	8007fd0 <vPortEnterCritical>
 8006afe:	230e      	movs	r3, #14
 8006b00:	18fb      	adds	r3, r7, r3
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	2144      	movs	r1, #68	; 0x44
 8006b06:	5c52      	ldrb	r2, [r2, r1]
 8006b08:	701a      	strb	r2, [r3, #0]
 8006b0a:	e013      	b.n	8006b34 <prvUnlockQueue+0x98>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d016      	beq.n	8006b42 <prvUnlockQueue+0xa6>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	3310      	adds	r3, #16
 8006b18:	0018      	movs	r0, r3
 8006b1a:	f000 fc89 	bl	8007430 <xTaskRemoveFromEventList>
 8006b1e:	1e03      	subs	r3, r0, #0
 8006b20:	d001      	beq.n	8006b26 <prvUnlockQueue+0x8a>
 8006b22:	f000 fd45 	bl	80075b0 <vTaskMissedYield>
 8006b26:	210e      	movs	r1, #14
 8006b28:	187b      	adds	r3, r7, r1
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	b2da      	uxtb	r2, r3
 8006b30:	187b      	adds	r3, r7, r1
 8006b32:	701a      	strb	r2, [r3, #0]
 8006b34:	230e      	movs	r3, #14
 8006b36:	18fb      	adds	r3, r7, r3
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	b25b      	sxtb	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	dce5      	bgt.n	8006b0c <prvUnlockQueue+0x70>
 8006b40:	e000      	b.n	8006b44 <prvUnlockQueue+0xa8>
 8006b42:	46c0      	nop			; (mov r8, r8)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2244      	movs	r2, #68	; 0x44
 8006b48:	21ff      	movs	r1, #255	; 0xff
 8006b4a:	5499      	strb	r1, [r3, r2]
 8006b4c:	f001 fa52 	bl	8007ff4 <vPortExitCritical>
 8006b50:	46c0      	nop			; (mov r8, r8)
 8006b52:	46bd      	mov	sp, r7
 8006b54:	b004      	add	sp, #16
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <prvIsQueueEmpty>:
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	f001 fa36 	bl	8007fd0 <vPortEnterCritical>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d102      	bne.n	8006b72 <prvIsQueueEmpty+0x1a>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	e001      	b.n	8006b76 <prvIsQueueEmpty+0x1e>
 8006b72:	2300      	movs	r3, #0
 8006b74:	60fb      	str	r3, [r7, #12]
 8006b76:	f001 fa3d 	bl	8007ff4 <vPortExitCritical>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	0018      	movs	r0, r3
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	b004      	add	sp, #16
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <prvIsQueueFull>:
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	f001 fa20 	bl	8007fd0 <vPortEnterCritical>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d102      	bne.n	8006ba2 <prvIsQueueFull+0x1e>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	e001      	b.n	8006ba6 <prvIsQueueFull+0x22>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60fb      	str	r3, [r7, #12]
 8006ba6:	f001 fa25 	bl	8007ff4 <vPortExitCritical>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	0018      	movs	r0, r3
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	b004      	add	sp, #16
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <vQueueAddToRegistry>:
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60fb      	str	r3, [r7, #12]
 8006bc2:	e015      	b.n	8006bf0 <vQueueAddToRegistry+0x3c>
 8006bc4:	4b0e      	ldr	r3, [pc, #56]	; (8006c00 <vQueueAddToRegistry+0x4c>)
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	00d2      	lsls	r2, r2, #3
 8006bca:	58d3      	ldr	r3, [r2, r3]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10c      	bne.n	8006bea <vQueueAddToRegistry+0x36>
 8006bd0:	4b0b      	ldr	r3, [pc, #44]	; (8006c00 <vQueueAddToRegistry+0x4c>)
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	00d2      	lsls	r2, r2, #3
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	50d1      	str	r1, [r2, r3]
 8006bda:	4a09      	ldr	r2, [pc, #36]	; (8006c00 <vQueueAddToRegistry+0x4c>)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	18d3      	adds	r3, r2, r3
 8006be2:	3304      	adds	r3, #4
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	e005      	b.n	8006bf6 <vQueueAddToRegistry+0x42>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3301      	adds	r3, #1
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2b07      	cmp	r3, #7
 8006bf4:	d9e6      	bls.n	8006bc4 <vQueueAddToRegistry+0x10>
 8006bf6:	46c0      	nop			; (mov r8, r8)
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	b004      	add	sp, #16
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	46c0      	nop			; (mov r8, r8)
 8006c00:	20003484 	.word	0x20003484

08006c04 <vQueueWaitForMessageRestricted>:
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	617b      	str	r3, [r7, #20]
 8006c14:	f001 f9dc 	bl	8007fd0 <vPortEnterCritical>
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	2244      	movs	r2, #68	; 0x44
 8006c1c:	5c9b      	ldrb	r3, [r3, r2]
 8006c1e:	b25b      	sxtb	r3, r3
 8006c20:	3301      	adds	r3, #1
 8006c22:	d103      	bne.n	8006c2c <vQueueWaitForMessageRestricted+0x28>
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	2244      	movs	r2, #68	; 0x44
 8006c28:	2100      	movs	r1, #0
 8006c2a:	5499      	strb	r1, [r3, r2]
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	2245      	movs	r2, #69	; 0x45
 8006c30:	5c9b      	ldrb	r3, [r3, r2]
 8006c32:	b25b      	sxtb	r3, r3
 8006c34:	3301      	adds	r3, #1
 8006c36:	d103      	bne.n	8006c40 <vQueueWaitForMessageRestricted+0x3c>
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	2245      	movs	r2, #69	; 0x45
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	5499      	strb	r1, [r3, r2]
 8006c40:	f001 f9d8 	bl	8007ff4 <vPortExitCritical>
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d106      	bne.n	8006c5a <vQueueWaitForMessageRestricted+0x56>
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	3324      	adds	r3, #36	; 0x24
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	68b9      	ldr	r1, [r7, #8]
 8006c54:	0018      	movs	r0, r3
 8006c56:	f000 fbc5 	bl	80073e4 <vTaskPlaceOnEventListRestricted>
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	f7ff ff1d 	bl	8006a9c <prvUnlockQueue>
 8006c62:	46c0      	nop			; (mov r8, r8)
 8006c64:	46bd      	mov	sp, r7
 8006c66:	b006      	add	sp, #24
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <xTaskCreateStatic>:
 8006c6a:	b590      	push	{r4, r7, lr}
 8006c6c:	b08d      	sub	sp, #52	; 0x34
 8006c6e:	af04      	add	r7, sp, #16
 8006c70:	60f8      	str	r0, [r7, #12]
 8006c72:	60b9      	str	r1, [r7, #8]
 8006c74:	607a      	str	r2, [r7, #4]
 8006c76:	603b      	str	r3, [r7, #0]
 8006c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <xTaskCreateStatic+0x18>
 8006c7e:	b672      	cpsid	i
 8006c80:	e7fe      	b.n	8006c80 <xTaskCreateStatic+0x16>
 8006c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <xTaskCreateStatic+0x22>
 8006c88:	b672      	cpsid	i
 8006c8a:	e7fe      	b.n	8006c8a <xTaskCreateStatic+0x20>
 8006c8c:	235c      	movs	r3, #92	; 0x5c
 8006c8e:	617b      	str	r3, [r7, #20]
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	2b5c      	cmp	r3, #92	; 0x5c
 8006c94:	d001      	beq.n	8006c9a <xTaskCreateStatic+0x30>
 8006c96:	b672      	cpsid	i
 8006c98:	e7fe      	b.n	8006c98 <xTaskCreateStatic+0x2e>
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d020      	beq.n	8006ce2 <xTaskCreateStatic+0x78>
 8006ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d01d      	beq.n	8006ce2 <xTaskCreateStatic+0x78>
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	61fb      	str	r3, [r7, #28]
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cae:	631a      	str	r2, [r3, #48]	; 0x30
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	2259      	movs	r2, #89	; 0x59
 8006cb4:	2102      	movs	r1, #2
 8006cb6:	5499      	strb	r1, [r3, r2]
 8006cb8:	683c      	ldr	r4, [r7, #0]
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	68b9      	ldr	r1, [r7, #8]
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	9303      	str	r3, [sp, #12]
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	9302      	str	r3, [sp, #8]
 8006cc8:	2318      	movs	r3, #24
 8006cca:	18fb      	adds	r3, r7, r3
 8006ccc:	9301      	str	r3, [sp, #4]
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	0023      	movs	r3, r4
 8006cd4:	f000 f858 	bl	8006d88 <prvInitialiseNewTask>
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	0018      	movs	r0, r3
 8006cdc:	f000 f8d6 	bl	8006e8c <prvAddNewTaskToReadyList>
 8006ce0:	e001      	b.n	8006ce6 <xTaskCreateStatic+0x7c>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	61bb      	str	r3, [r7, #24]
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	0018      	movs	r0, r3
 8006cea:	46bd      	mov	sp, r7
 8006cec:	b009      	add	sp, #36	; 0x24
 8006cee:	bd90      	pop	{r4, r7, pc}

08006cf0 <xTaskCreate>:
 8006cf0:	b590      	push	{r4, r7, lr}
 8006cf2:	b08d      	sub	sp, #52	; 0x34
 8006cf4:	af04      	add	r7, sp, #16
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	603b      	str	r3, [r7, #0]
 8006cfc:	1dbb      	adds	r3, r7, #6
 8006cfe:	801a      	strh	r2, [r3, #0]
 8006d00:	1dbb      	adds	r3, r7, #6
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	0018      	movs	r0, r3
 8006d08:	f001 f9fa 	bl	8008100 <pvPortMalloc>
 8006d0c:	0003      	movs	r3, r0
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d010      	beq.n	8006d38 <xTaskCreate+0x48>
 8006d16:	205c      	movs	r0, #92	; 0x5c
 8006d18:	f001 f9f2 	bl	8008100 <pvPortMalloc>
 8006d1c:	0003      	movs	r3, r0
 8006d1e:	61fb      	str	r3, [r7, #28]
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <xTaskCreate+0x3e>
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	631a      	str	r2, [r3, #48]	; 0x30
 8006d2c:	e006      	b.n	8006d3c <xTaskCreate+0x4c>
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	0018      	movs	r0, r3
 8006d32:	f001 fa8b 	bl	800824c <vPortFree>
 8006d36:	e001      	b.n	8006d3c <xTaskCreate+0x4c>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	61fb      	str	r3, [r7, #28]
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d01a      	beq.n	8006d78 <xTaskCreate+0x88>
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	2259      	movs	r2, #89	; 0x59
 8006d46:	2100      	movs	r1, #0
 8006d48:	5499      	strb	r1, [r3, r2]
 8006d4a:	1dbb      	adds	r3, r7, #6
 8006d4c:	881a      	ldrh	r2, [r3, #0]
 8006d4e:	683c      	ldr	r4, [r7, #0]
 8006d50:	68b9      	ldr	r1, [r7, #8]
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	2300      	movs	r3, #0
 8006d56:	9303      	str	r3, [sp, #12]
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	9302      	str	r3, [sp, #8]
 8006d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d5e:	9301      	str	r3, [sp, #4]
 8006d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	0023      	movs	r3, r4
 8006d66:	f000 f80f 	bl	8006d88 <prvInitialiseNewTask>
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	f000 f88d 	bl	8006e8c <prvAddNewTaskToReadyList>
 8006d72:	2301      	movs	r3, #1
 8006d74:	61bb      	str	r3, [r7, #24]
 8006d76:	e002      	b.n	8006d7e <xTaskCreate+0x8e>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	425b      	negs	r3, r3
 8006d7c:	61bb      	str	r3, [r7, #24]
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	0018      	movs	r0, r3
 8006d82:	46bd      	mov	sp, r7
 8006d84:	b009      	add	sp, #36	; 0x24
 8006d86:	bd90      	pop	{r4, r7, pc}

08006d88 <prvInitialiseNewTask>:
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
 8006d94:	603b      	str	r3, [r7, #0]
 8006d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	001a      	movs	r2, r3
 8006da0:	21a5      	movs	r1, #165	; 0xa5
 8006da2:	f001 fb80 	bl	80084a6 <memset>
 8006da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4936      	ldr	r1, [pc, #216]	; (8006e88 <prvInitialiseNewTask+0x100>)
 8006dae:	468c      	mov	ip, r1
 8006db0:	4463      	add	r3, ip
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	18d3      	adds	r3, r2, r3
 8006db6:	613b      	str	r3, [r7, #16]
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	2207      	movs	r2, #7
 8006dbc:	4393      	bics	r3, r2
 8006dbe:	613b      	str	r3, [r7, #16]
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2207      	movs	r2, #7
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	d001      	beq.n	8006dcc <prvInitialiseNewTask+0x44>
 8006dc8:	b672      	cpsid	i
 8006dca:	e7fe      	b.n	8006dca <prvInitialiseNewTask+0x42>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	617b      	str	r3, [r7, #20]
 8006dd0:	e013      	b.n	8006dfa <prvInitialiseNewTask+0x72>
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	18d3      	adds	r3, r2, r3
 8006dd8:	7818      	ldrb	r0, [r3, #0]
 8006dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ddc:	2134      	movs	r1, #52	; 0x34
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	18d3      	adds	r3, r2, r3
 8006de2:	185b      	adds	r3, r3, r1
 8006de4:	1c02      	adds	r2, r0, #0
 8006de6:	701a      	strb	r2, [r3, #0]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	18d3      	adds	r3, r2, r3
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d006      	beq.n	8006e02 <prvInitialiseNewTask+0x7a>
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	3301      	adds	r3, #1
 8006df8:	617b      	str	r3, [r7, #20]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2b0f      	cmp	r3, #15
 8006dfe:	d9e8      	bls.n	8006dd2 <prvInitialiseNewTask+0x4a>
 8006e00:	e000      	b.n	8006e04 <prvInitialiseNewTask+0x7c>
 8006e02:	46c0      	nop			; (mov r8, r8)
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	2243      	movs	r2, #67	; 0x43
 8006e08:	2100      	movs	r1, #0
 8006e0a:	5499      	strb	r1, [r3, r2]
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	2b37      	cmp	r3, #55	; 0x37
 8006e10:	d901      	bls.n	8006e16 <prvInitialiseNewTask+0x8e>
 8006e12:	2337      	movs	r3, #55	; 0x37
 8006e14:	623b      	str	r3, [r7, #32]
 8006e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e18:	6a3a      	ldr	r2, [r7, #32]
 8006e1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8006e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1e:	6a3a      	ldr	r2, [r7, #32]
 8006e20:	64da      	str	r2, [r3, #76]	; 0x4c
 8006e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e24:	2200      	movs	r2, #0
 8006e26:	651a      	str	r2, [r3, #80]	; 0x50
 8006e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	0018      	movs	r0, r3
 8006e2e:	f7ff fa69 	bl	8006304 <vListInitialiseItem>
 8006e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e34:	3318      	adds	r3, #24
 8006e36:	0018      	movs	r0, r3
 8006e38:	f7ff fa64 	bl	8006304 <vListInitialiseItem>
 8006e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e40:	611a      	str	r2, [r3, #16]
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	2238      	movs	r2, #56	; 0x38
 8006e46:	1ad2      	subs	r2, r2, r3
 8006e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4a:	619a      	str	r2, [r3, #24]
 8006e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e50:	625a      	str	r2, [r3, #36]	; 0x24
 8006e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e54:	2200      	movs	r2, #0
 8006e56:	655a      	str	r2, [r3, #84]	; 0x54
 8006e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5a:	2258      	movs	r2, #88	; 0x58
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	5499      	strb	r1, [r3, r2]
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	68f9      	ldr	r1, [r7, #12]
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	0018      	movs	r0, r3
 8006e68:	f001 f81c 	bl	8007ea4 <pxPortInitialiseStack>
 8006e6c:	0002      	movs	r2, r0
 8006e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d002      	beq.n	8006e7e <prvInitialiseNewTask+0xf6>
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	46c0      	nop			; (mov r8, r8)
 8006e80:	46bd      	mov	sp, r7
 8006e82:	b006      	add	sp, #24
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	46c0      	nop			; (mov r8, r8)
 8006e88:	3fffffff 	.word	0x3fffffff

08006e8c <prvAddNewTaskToReadyList>:
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	f001 f89c 	bl	8007fd0 <vPortEnterCritical>
 8006e98:	4b2a      	ldr	r3, [pc, #168]	; (8006f44 <prvAddNewTaskToReadyList+0xb8>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	4b29      	ldr	r3, [pc, #164]	; (8006f44 <prvAddNewTaskToReadyList+0xb8>)
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	4b29      	ldr	r3, [pc, #164]	; (8006f48 <prvAddNewTaskToReadyList+0xbc>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d109      	bne.n	8006ebe <prvAddNewTaskToReadyList+0x32>
 8006eaa:	4b27      	ldr	r3, [pc, #156]	; (8006f48 <prvAddNewTaskToReadyList+0xbc>)
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	4b24      	ldr	r3, [pc, #144]	; (8006f44 <prvAddNewTaskToReadyList+0xb8>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d110      	bne.n	8006eda <prvAddNewTaskToReadyList+0x4e>
 8006eb8:	f000 fb94 	bl	80075e4 <prvInitialiseTaskLists>
 8006ebc:	e00d      	b.n	8006eda <prvAddNewTaskToReadyList+0x4e>
 8006ebe:	4b23      	ldr	r3, [pc, #140]	; (8006f4c <prvAddNewTaskToReadyList+0xc0>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d109      	bne.n	8006eda <prvAddNewTaskToReadyList+0x4e>
 8006ec6:	4b20      	ldr	r3, [pc, #128]	; (8006f48 <prvAddNewTaskToReadyList+0xbc>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d802      	bhi.n	8006eda <prvAddNewTaskToReadyList+0x4e>
 8006ed4:	4b1c      	ldr	r3, [pc, #112]	; (8006f48 <prvAddNewTaskToReadyList+0xbc>)
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	601a      	str	r2, [r3, #0]
 8006eda:	4b1d      	ldr	r3, [pc, #116]	; (8006f50 <prvAddNewTaskToReadyList+0xc4>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	4b1b      	ldr	r3, [pc, #108]	; (8006f50 <prvAddNewTaskToReadyList+0xc4>)
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	4b1a      	ldr	r3, [pc, #104]	; (8006f50 <prvAddNewTaskToReadyList+0xc4>)
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	645a      	str	r2, [r3, #68]	; 0x44
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef0:	4b18      	ldr	r3, [pc, #96]	; (8006f54 <prvAddNewTaskToReadyList+0xc8>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d903      	bls.n	8006f00 <prvAddNewTaskToReadyList+0x74>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efc:	4b15      	ldr	r3, [pc, #84]	; (8006f54 <prvAddNewTaskToReadyList+0xc8>)
 8006efe:	601a      	str	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f04:	0013      	movs	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	189b      	adds	r3, r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4a12      	ldr	r2, [pc, #72]	; (8006f58 <prvAddNewTaskToReadyList+0xcc>)
 8006f0e:	189a      	adds	r2, r3, r2
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3304      	adds	r3, #4
 8006f14:	0019      	movs	r1, r3
 8006f16:	0010      	movs	r0, r2
 8006f18:	f7ff f9ff 	bl	800631a <vListInsertEnd>
 8006f1c:	f001 f86a 	bl	8007ff4 <vPortExitCritical>
 8006f20:	4b0a      	ldr	r3, [pc, #40]	; (8006f4c <prvAddNewTaskToReadyList+0xc0>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d008      	beq.n	8006f3a <prvAddNewTaskToReadyList+0xae>
 8006f28:	4b07      	ldr	r3, [pc, #28]	; (8006f48 <prvAddNewTaskToReadyList+0xbc>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d201      	bcs.n	8006f3a <prvAddNewTaskToReadyList+0xae>
 8006f36:	f001 f83b 	bl	8007fb0 <vPortYield>
 8006f3a:	46c0      	nop			; (mov r8, r8)
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	b002      	add	sp, #8
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	46c0      	nop			; (mov r8, r8)
 8006f44:	20000ccc 	.word	0x20000ccc
 8006f48:	200007f8 	.word	0x200007f8
 8006f4c:	20000cd8 	.word	0x20000cd8
 8006f50:	20000ce8 	.word	0x20000ce8
 8006f54:	20000cd4 	.word	0x20000cd4
 8006f58:	200007fc 	.word	0x200007fc

08006f5c <vTaskDelay>:
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	2300      	movs	r3, #0
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d010      	beq.n	8006f90 <vTaskDelay+0x34>
 8006f6e:	4b0d      	ldr	r3, [pc, #52]	; (8006fa4 <vTaskDelay+0x48>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <vTaskDelay+0x1e>
 8006f76:	b672      	cpsid	i
 8006f78:	e7fe      	b.n	8006f78 <vTaskDelay+0x1c>
 8006f7a:	f000 f869 	bl	8007050 <vTaskSuspendAll>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2100      	movs	r1, #0
 8006f82:	0018      	movs	r0, r3
 8006f84:	f000 fc64 	bl	8007850 <prvAddCurrentTaskToDelayedList>
 8006f88:	f000 f86e 	bl	8007068 <xTaskResumeAll>
 8006f8c:	0003      	movs	r3, r0
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <vTaskDelay+0x3e>
 8006f96:	f001 f80b 	bl	8007fb0 <vPortYield>
 8006f9a:	46c0      	nop			; (mov r8, r8)
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	b004      	add	sp, #16
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	46c0      	nop			; (mov r8, r8)
 8006fa4:	20000cf4 	.word	0x20000cf4

08006fa8 <vTaskStartScheduler>:
 8006fa8:	b590      	push	{r4, r7, lr}
 8006faa:	b089      	sub	sp, #36	; 0x24
 8006fac:	af04      	add	r7, sp, #16
 8006fae:	2300      	movs	r3, #0
 8006fb0:	60bb      	str	r3, [r7, #8]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	607b      	str	r3, [r7, #4]
 8006fb6:	003a      	movs	r2, r7
 8006fb8:	1d39      	adds	r1, r7, #4
 8006fba:	2308      	movs	r3, #8
 8006fbc:	18fb      	adds	r3, r7, r3
 8006fbe:	0018      	movs	r0, r3
 8006fc0:	f7ff f952 	bl	8006268 <vApplicationGetIdleTaskMemory>
 8006fc4:	683c      	ldr	r4, [r7, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	491b      	ldr	r1, [pc, #108]	; (8007038 <vTaskStartScheduler+0x90>)
 8006fcc:	481b      	ldr	r0, [pc, #108]	; (800703c <vTaskStartScheduler+0x94>)
 8006fce:	9202      	str	r2, [sp, #8]
 8006fd0:	9301      	str	r3, [sp, #4]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	0022      	movs	r2, r4
 8006fda:	f7ff fe46 	bl	8006c6a <xTaskCreateStatic>
 8006fde:	0002      	movs	r2, r0
 8006fe0:	4b17      	ldr	r3, [pc, #92]	; (8007040 <vTaskStartScheduler+0x98>)
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	4b16      	ldr	r3, [pc, #88]	; (8007040 <vTaskStartScheduler+0x98>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <vTaskStartScheduler+0x4a>
 8006fec:	2301      	movs	r3, #1
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	e001      	b.n	8006ff6 <vTaskStartScheduler+0x4e>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d103      	bne.n	8007004 <vTaskStartScheduler+0x5c>
 8006ffc:	f000 fc7c 	bl	80078f8 <xTimerCreateTimerTask>
 8007000:	0003      	movs	r3, r0
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d10d      	bne.n	8007026 <vTaskStartScheduler+0x7e>
 800700a:	b672      	cpsid	i
 800700c:	4b0d      	ldr	r3, [pc, #52]	; (8007044 <vTaskStartScheduler+0x9c>)
 800700e:	2201      	movs	r2, #1
 8007010:	4252      	negs	r2, r2
 8007012:	601a      	str	r2, [r3, #0]
 8007014:	4b0c      	ldr	r3, [pc, #48]	; (8007048 <vTaskStartScheduler+0xa0>)
 8007016:	2201      	movs	r2, #1
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	4b0c      	ldr	r3, [pc, #48]	; (800704c <vTaskStartScheduler+0xa4>)
 800701c:	2200      	movs	r2, #0
 800701e:	601a      	str	r2, [r3, #0]
 8007020:	f000 ffa2 	bl	8007f68 <xPortStartScheduler>
 8007024:	e004      	b.n	8007030 <vTaskStartScheduler+0x88>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3301      	adds	r3, #1
 800702a:	d101      	bne.n	8007030 <vTaskStartScheduler+0x88>
 800702c:	b672      	cpsid	i
 800702e:	e7fe      	b.n	800702e <vTaskStartScheduler+0x86>
 8007030:	46c0      	nop			; (mov r8, r8)
 8007032:	46bd      	mov	sp, r7
 8007034:	b005      	add	sp, #20
 8007036:	bd90      	pop	{r4, r7, pc}
 8007038:	0800852c 	.word	0x0800852c
 800703c:	080075c5 	.word	0x080075c5
 8007040:	20000cf0 	.word	0x20000cf0
 8007044:	20000cec 	.word	0x20000cec
 8007048:	20000cd8 	.word	0x20000cd8
 800704c:	20000cd0 	.word	0x20000cd0

08007050 <vTaskSuspendAll>:
 8007050:	b580      	push	{r7, lr}
 8007052:	af00      	add	r7, sp, #0
 8007054:	4b03      	ldr	r3, [pc, #12]	; (8007064 <vTaskSuspendAll+0x14>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	4b02      	ldr	r3, [pc, #8]	; (8007064 <vTaskSuspendAll+0x14>)
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	46c0      	nop			; (mov r8, r8)
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	20000cf4 	.word	0x20000cf4

08007068 <xTaskResumeAll>:
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	2300      	movs	r3, #0
 8007070:	60fb      	str	r3, [r7, #12]
 8007072:	2300      	movs	r3, #0
 8007074:	60bb      	str	r3, [r7, #8]
 8007076:	4b3a      	ldr	r3, [pc, #232]	; (8007160 <xTaskResumeAll+0xf8>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <xTaskResumeAll+0x1a>
 800707e:	b672      	cpsid	i
 8007080:	e7fe      	b.n	8007080 <xTaskResumeAll+0x18>
 8007082:	f000 ffa5 	bl	8007fd0 <vPortEnterCritical>
 8007086:	4b36      	ldr	r3, [pc, #216]	; (8007160 <xTaskResumeAll+0xf8>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	1e5a      	subs	r2, r3, #1
 800708c:	4b34      	ldr	r3, [pc, #208]	; (8007160 <xTaskResumeAll+0xf8>)
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	4b33      	ldr	r3, [pc, #204]	; (8007160 <xTaskResumeAll+0xf8>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d15b      	bne.n	8007150 <xTaskResumeAll+0xe8>
 8007098:	4b32      	ldr	r3, [pc, #200]	; (8007164 <xTaskResumeAll+0xfc>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d057      	beq.n	8007150 <xTaskResumeAll+0xe8>
 80070a0:	e02f      	b.n	8007102 <xTaskResumeAll+0x9a>
 80070a2:	4b31      	ldr	r3, [pc, #196]	; (8007168 <xTaskResumeAll+0x100>)
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	60fb      	str	r3, [r7, #12]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3318      	adds	r3, #24
 80070ae:	0018      	movs	r0, r3
 80070b0:	f7ff f98b 	bl	80063ca <uxListRemove>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	3304      	adds	r3, #4
 80070b8:	0018      	movs	r0, r3
 80070ba:	f7ff f986 	bl	80063ca <uxListRemove>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c2:	4b2a      	ldr	r3, [pc, #168]	; (800716c <xTaskResumeAll+0x104>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d903      	bls.n	80070d2 <xTaskResumeAll+0x6a>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ce:	4b27      	ldr	r3, [pc, #156]	; (800716c <xTaskResumeAll+0x104>)
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d6:	0013      	movs	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	189b      	adds	r3, r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4a24      	ldr	r2, [pc, #144]	; (8007170 <xTaskResumeAll+0x108>)
 80070e0:	189a      	adds	r2, r3, r2
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	3304      	adds	r3, #4
 80070e6:	0019      	movs	r1, r3
 80070e8:	0010      	movs	r0, r2
 80070ea:	f7ff f916 	bl	800631a <vListInsertEnd>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f2:	4b20      	ldr	r3, [pc, #128]	; (8007174 <xTaskResumeAll+0x10c>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d302      	bcc.n	8007102 <xTaskResumeAll+0x9a>
 80070fc:	4b1e      	ldr	r3, [pc, #120]	; (8007178 <xTaskResumeAll+0x110>)
 80070fe:	2201      	movs	r2, #1
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	4b19      	ldr	r3, [pc, #100]	; (8007168 <xTaskResumeAll+0x100>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1cb      	bne.n	80070a2 <xTaskResumeAll+0x3a>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d001      	beq.n	8007114 <xTaskResumeAll+0xac>
 8007110:	f000 fb02 	bl	8007718 <prvResetNextTaskUnblockTime>
 8007114:	4b19      	ldr	r3, [pc, #100]	; (800717c <xTaskResumeAll+0x114>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	607b      	str	r3, [r7, #4]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00f      	beq.n	8007140 <xTaskResumeAll+0xd8>
 8007120:	f000 f83c 	bl	800719c <xTaskIncrementTick>
 8007124:	1e03      	subs	r3, r0, #0
 8007126:	d002      	beq.n	800712e <xTaskResumeAll+0xc6>
 8007128:	4b13      	ldr	r3, [pc, #76]	; (8007178 <xTaskResumeAll+0x110>)
 800712a:	2201      	movs	r2, #1
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	3b01      	subs	r3, #1
 8007132:	607b      	str	r3, [r7, #4]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1f2      	bne.n	8007120 <xTaskResumeAll+0xb8>
 800713a:	4b10      	ldr	r3, [pc, #64]	; (800717c <xTaskResumeAll+0x114>)
 800713c:	2200      	movs	r2, #0
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	4b0d      	ldr	r3, [pc, #52]	; (8007178 <xTaskResumeAll+0x110>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d003      	beq.n	8007150 <xTaskResumeAll+0xe8>
 8007148:	2301      	movs	r3, #1
 800714a:	60bb      	str	r3, [r7, #8]
 800714c:	f000 ff30 	bl	8007fb0 <vPortYield>
 8007150:	f000 ff50 	bl	8007ff4 <vPortExitCritical>
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	0018      	movs	r0, r3
 8007158:	46bd      	mov	sp, r7
 800715a:	b004      	add	sp, #16
 800715c:	bd80      	pop	{r7, pc}
 800715e:	46c0      	nop			; (mov r8, r8)
 8007160:	20000cf4 	.word	0x20000cf4
 8007164:	20000ccc 	.word	0x20000ccc
 8007168:	20000c8c 	.word	0x20000c8c
 800716c:	20000cd4 	.word	0x20000cd4
 8007170:	200007fc 	.word	0x200007fc
 8007174:	200007f8 	.word	0x200007f8
 8007178:	20000ce0 	.word	0x20000ce0
 800717c:	20000cdc 	.word	0x20000cdc

08007180 <xTaskGetTickCount>:
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	4b04      	ldr	r3, [pc, #16]	; (8007198 <xTaskGetTickCount+0x18>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	607b      	str	r3, [r7, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	0018      	movs	r0, r3
 8007190:	46bd      	mov	sp, r7
 8007192:	b002      	add	sp, #8
 8007194:	bd80      	pop	{r7, pc}
 8007196:	46c0      	nop			; (mov r8, r8)
 8007198:	20000cd0 	.word	0x20000cd0

0800719c <xTaskIncrementTick>:
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	2300      	movs	r3, #0
 80071a4:	617b      	str	r3, [r7, #20]
 80071a6:	4b4c      	ldr	r3, [pc, #304]	; (80072d8 <xTaskIncrementTick+0x13c>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d000      	beq.n	80071b0 <xTaskIncrementTick+0x14>
 80071ae:	e083      	b.n	80072b8 <xTaskIncrementTick+0x11c>
 80071b0:	4b4a      	ldr	r3, [pc, #296]	; (80072dc <xTaskIncrementTick+0x140>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3301      	adds	r3, #1
 80071b6:	613b      	str	r3, [r7, #16]
 80071b8:	4b48      	ldr	r3, [pc, #288]	; (80072dc <xTaskIncrementTick+0x140>)
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d117      	bne.n	80071f4 <xTaskIncrementTick+0x58>
 80071c4:	4b46      	ldr	r3, [pc, #280]	; (80072e0 <xTaskIncrementTick+0x144>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d001      	beq.n	80071d2 <xTaskIncrementTick+0x36>
 80071ce:	b672      	cpsid	i
 80071d0:	e7fe      	b.n	80071d0 <xTaskIncrementTick+0x34>
 80071d2:	4b43      	ldr	r3, [pc, #268]	; (80072e0 <xTaskIncrementTick+0x144>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	60fb      	str	r3, [r7, #12]
 80071d8:	4b42      	ldr	r3, [pc, #264]	; (80072e4 <xTaskIncrementTick+0x148>)
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	4b40      	ldr	r3, [pc, #256]	; (80072e0 <xTaskIncrementTick+0x144>)
 80071de:	601a      	str	r2, [r3, #0]
 80071e0:	4b40      	ldr	r3, [pc, #256]	; (80072e4 <xTaskIncrementTick+0x148>)
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	4b40      	ldr	r3, [pc, #256]	; (80072e8 <xTaskIncrementTick+0x14c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	1c5a      	adds	r2, r3, #1
 80071ec:	4b3e      	ldr	r3, [pc, #248]	; (80072e8 <xTaskIncrementTick+0x14c>)
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	f000 fa92 	bl	8007718 <prvResetNextTaskUnblockTime>
 80071f4:	4b3d      	ldr	r3, [pc, #244]	; (80072ec <xTaskIncrementTick+0x150>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d34e      	bcc.n	800729c <xTaskIncrementTick+0x100>
 80071fe:	4b38      	ldr	r3, [pc, #224]	; (80072e0 <xTaskIncrementTick+0x144>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d101      	bne.n	800720c <xTaskIncrementTick+0x70>
 8007208:	2301      	movs	r3, #1
 800720a:	e000      	b.n	800720e <xTaskIncrementTick+0x72>
 800720c:	2300      	movs	r3, #0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d004      	beq.n	800721c <xTaskIncrementTick+0x80>
 8007212:	4b36      	ldr	r3, [pc, #216]	; (80072ec <xTaskIncrementTick+0x150>)
 8007214:	2201      	movs	r2, #1
 8007216:	4252      	negs	r2, r2
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	e03f      	b.n	800729c <xTaskIncrementTick+0x100>
 800721c:	4b30      	ldr	r3, [pc, #192]	; (80072e0 <xTaskIncrementTick+0x144>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	60bb      	str	r3, [r7, #8]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	607b      	str	r3, [r7, #4]
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	429a      	cmp	r2, r3
 8007232:	d203      	bcs.n	800723c <xTaskIncrementTick+0xa0>
 8007234:	4b2d      	ldr	r3, [pc, #180]	; (80072ec <xTaskIncrementTick+0x150>)
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	e02f      	b.n	800729c <xTaskIncrementTick+0x100>
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	3304      	adds	r3, #4
 8007240:	0018      	movs	r0, r3
 8007242:	f7ff f8c2 	bl	80063ca <uxListRemove>
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724a:	2b00      	cmp	r3, #0
 800724c:	d004      	beq.n	8007258 <xTaskIncrementTick+0xbc>
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	3318      	adds	r3, #24
 8007252:	0018      	movs	r0, r3
 8007254:	f7ff f8b9 	bl	80063ca <uxListRemove>
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800725c:	4b24      	ldr	r3, [pc, #144]	; (80072f0 <xTaskIncrementTick+0x154>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	429a      	cmp	r2, r3
 8007262:	d903      	bls.n	800726c <xTaskIncrementTick+0xd0>
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007268:	4b21      	ldr	r3, [pc, #132]	; (80072f0 <xTaskIncrementTick+0x154>)
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007270:	0013      	movs	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	189b      	adds	r3, r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4a1e      	ldr	r2, [pc, #120]	; (80072f4 <xTaskIncrementTick+0x158>)
 800727a:	189a      	adds	r2, r3, r2
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	3304      	adds	r3, #4
 8007280:	0019      	movs	r1, r3
 8007282:	0010      	movs	r0, r2
 8007284:	f7ff f849 	bl	800631a <vListInsertEnd>
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800728c:	4b1a      	ldr	r3, [pc, #104]	; (80072f8 <xTaskIncrementTick+0x15c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007292:	429a      	cmp	r2, r3
 8007294:	d3b3      	bcc.n	80071fe <xTaskIncrementTick+0x62>
 8007296:	2301      	movs	r3, #1
 8007298:	617b      	str	r3, [r7, #20]
 800729a:	e7b0      	b.n	80071fe <xTaskIncrementTick+0x62>
 800729c:	4b16      	ldr	r3, [pc, #88]	; (80072f8 <xTaskIncrementTick+0x15c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a2:	4914      	ldr	r1, [pc, #80]	; (80072f4 <xTaskIncrementTick+0x158>)
 80072a4:	0013      	movs	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	189b      	adds	r3, r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	585b      	ldr	r3, [r3, r1]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d907      	bls.n	80072c2 <xTaskIncrementTick+0x126>
 80072b2:	2301      	movs	r3, #1
 80072b4:	617b      	str	r3, [r7, #20]
 80072b6:	e004      	b.n	80072c2 <xTaskIncrementTick+0x126>
 80072b8:	4b10      	ldr	r3, [pc, #64]	; (80072fc <xTaskIncrementTick+0x160>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	1c5a      	adds	r2, r3, #1
 80072be:	4b0f      	ldr	r3, [pc, #60]	; (80072fc <xTaskIncrementTick+0x160>)
 80072c0:	601a      	str	r2, [r3, #0]
 80072c2:	4b0f      	ldr	r3, [pc, #60]	; (8007300 <xTaskIncrementTick+0x164>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <xTaskIncrementTick+0x132>
 80072ca:	2301      	movs	r3, #1
 80072cc:	617b      	str	r3, [r7, #20]
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	0018      	movs	r0, r3
 80072d2:	46bd      	mov	sp, r7
 80072d4:	b006      	add	sp, #24
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	20000cf4 	.word	0x20000cf4
 80072dc:	20000cd0 	.word	0x20000cd0
 80072e0:	20000c84 	.word	0x20000c84
 80072e4:	20000c88 	.word	0x20000c88
 80072e8:	20000ce4 	.word	0x20000ce4
 80072ec:	20000cec 	.word	0x20000cec
 80072f0:	20000cd4 	.word	0x20000cd4
 80072f4:	200007fc 	.word	0x200007fc
 80072f8:	200007f8 	.word	0x200007f8
 80072fc:	20000cdc 	.word	0x20000cdc
 8007300:	20000ce0 	.word	0x20000ce0

08007304 <vTaskSwitchContext>:
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	4b22      	ldr	r3, [pc, #136]	; (8007394 <vTaskSwitchContext+0x90>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <vTaskSwitchContext+0x16>
 8007312:	4b21      	ldr	r3, [pc, #132]	; (8007398 <vTaskSwitchContext+0x94>)
 8007314:	2201      	movs	r2, #1
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	e037      	b.n	800738a <vTaskSwitchContext+0x86>
 800731a:	4b1f      	ldr	r3, [pc, #124]	; (8007398 <vTaskSwitchContext+0x94>)
 800731c:	2200      	movs	r2, #0
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	4b1e      	ldr	r3, [pc, #120]	; (800739c <vTaskSwitchContext+0x98>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	607b      	str	r3, [r7, #4]
 8007326:	e007      	b.n	8007338 <vTaskSwitchContext+0x34>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <vTaskSwitchContext+0x2e>
 800732e:	b672      	cpsid	i
 8007330:	e7fe      	b.n	8007330 <vTaskSwitchContext+0x2c>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3b01      	subs	r3, #1
 8007336:	607b      	str	r3, [r7, #4]
 8007338:	4919      	ldr	r1, [pc, #100]	; (80073a0 <vTaskSwitchContext+0x9c>)
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	0013      	movs	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	189b      	adds	r3, r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	585b      	ldr	r3, [r3, r1]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d0ee      	beq.n	8007328 <vTaskSwitchContext+0x24>
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	0013      	movs	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	189b      	adds	r3, r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4a12      	ldr	r2, [pc, #72]	; (80073a0 <vTaskSwitchContext+0x9c>)
 8007356:	189b      	adds	r3, r3, r2
 8007358:	603b      	str	r3, [r7, #0]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	605a      	str	r2, [r3, #4]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	3308      	adds	r3, #8
 800736c:	429a      	cmp	r2, r3
 800736e:	d104      	bne.n	800737a <vTaskSwitchContext+0x76>
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	605a      	str	r2, [r3, #4]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	68da      	ldr	r2, [r3, #12]
 8007380:	4b08      	ldr	r3, [pc, #32]	; (80073a4 <vTaskSwitchContext+0xa0>)
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	4b05      	ldr	r3, [pc, #20]	; (800739c <vTaskSwitchContext+0x98>)
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	46c0      	nop			; (mov r8, r8)
 800738c:	46bd      	mov	sp, r7
 800738e:	b002      	add	sp, #8
 8007390:	bd80      	pop	{r7, pc}
 8007392:	46c0      	nop			; (mov r8, r8)
 8007394:	20000cf4 	.word	0x20000cf4
 8007398:	20000ce0 	.word	0x20000ce0
 800739c:	20000cd4 	.word	0x20000cd4
 80073a0:	200007fc 	.word	0x200007fc
 80073a4:	200007f8 	.word	0x200007f8

080073a8 <vTaskPlaceOnEventList>:
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <vTaskPlaceOnEventList+0x14>
 80073b8:	b672      	cpsid	i
 80073ba:	e7fe      	b.n	80073ba <vTaskPlaceOnEventList+0x12>
 80073bc:	4b08      	ldr	r3, [pc, #32]	; (80073e0 <vTaskPlaceOnEventList+0x38>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3318      	adds	r3, #24
 80073c2:	001a      	movs	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	0011      	movs	r1, r2
 80073c8:	0018      	movs	r0, r3
 80073ca:	f7fe ffc8 	bl	800635e <vListInsert>
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	2101      	movs	r1, #1
 80073d2:	0018      	movs	r0, r3
 80073d4:	f000 fa3c 	bl	8007850 <prvAddCurrentTaskToDelayedList>
 80073d8:	46c0      	nop			; (mov r8, r8)
 80073da:	46bd      	mov	sp, r7
 80073dc:	b002      	add	sp, #8
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	200007f8 	.word	0x200007f8

080073e4 <vTaskPlaceOnEventListRestricted>:
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <vTaskPlaceOnEventListRestricted+0x16>
 80073f6:	b672      	cpsid	i
 80073f8:	e7fe      	b.n	80073f8 <vTaskPlaceOnEventListRestricted+0x14>
 80073fa:	4b0c      	ldr	r3, [pc, #48]	; (800742c <vTaskPlaceOnEventListRestricted+0x48>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3318      	adds	r3, #24
 8007400:	001a      	movs	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	0011      	movs	r1, r2
 8007406:	0018      	movs	r0, r3
 8007408:	f7fe ff87 	bl	800631a <vListInsertEnd>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d002      	beq.n	8007418 <vTaskPlaceOnEventListRestricted+0x34>
 8007412:	2301      	movs	r3, #1
 8007414:	425b      	negs	r3, r3
 8007416:	60bb      	str	r3, [r7, #8]
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	0011      	movs	r1, r2
 800741e:	0018      	movs	r0, r3
 8007420:	f000 fa16 	bl	8007850 <prvAddCurrentTaskToDelayedList>
 8007424:	46c0      	nop			; (mov r8, r8)
 8007426:	46bd      	mov	sp, r7
 8007428:	b004      	add	sp, #16
 800742a:	bd80      	pop	{r7, pc}
 800742c:	200007f8 	.word	0x200007f8

08007430 <xTaskRemoveFromEventList>:
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	60bb      	str	r3, [r7, #8]
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <xTaskRemoveFromEventList+0x1a>
 8007446:	b672      	cpsid	i
 8007448:	e7fe      	b.n	8007448 <xTaskRemoveFromEventList+0x18>
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	3318      	adds	r3, #24
 800744e:	0018      	movs	r0, r3
 8007450:	f7fe ffbb 	bl	80063ca <uxListRemove>
 8007454:	4b1e      	ldr	r3, [pc, #120]	; (80074d0 <xTaskRemoveFromEventList+0xa0>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d11d      	bne.n	8007498 <xTaskRemoveFromEventList+0x68>
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	3304      	adds	r3, #4
 8007460:	0018      	movs	r0, r3
 8007462:	f7fe ffb2 	bl	80063ca <uxListRemove>
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746a:	4b1a      	ldr	r3, [pc, #104]	; (80074d4 <xTaskRemoveFromEventList+0xa4>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d903      	bls.n	800747a <xTaskRemoveFromEventList+0x4a>
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007476:	4b17      	ldr	r3, [pc, #92]	; (80074d4 <xTaskRemoveFromEventList+0xa4>)
 8007478:	601a      	str	r2, [r3, #0]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747e:	0013      	movs	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	189b      	adds	r3, r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4a14      	ldr	r2, [pc, #80]	; (80074d8 <xTaskRemoveFromEventList+0xa8>)
 8007488:	189a      	adds	r2, r3, r2
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	3304      	adds	r3, #4
 800748e:	0019      	movs	r1, r3
 8007490:	0010      	movs	r0, r2
 8007492:	f7fe ff42 	bl	800631a <vListInsertEnd>
 8007496:	e007      	b.n	80074a8 <xTaskRemoveFromEventList+0x78>
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	3318      	adds	r3, #24
 800749c:	001a      	movs	r2, r3
 800749e:	4b0f      	ldr	r3, [pc, #60]	; (80074dc <xTaskRemoveFromEventList+0xac>)
 80074a0:	0011      	movs	r1, r2
 80074a2:	0018      	movs	r0, r3
 80074a4:	f7fe ff39 	bl	800631a <vListInsertEnd>
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ac:	4b0c      	ldr	r3, [pc, #48]	; (80074e0 <xTaskRemoveFromEventList+0xb0>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d905      	bls.n	80074c2 <xTaskRemoveFromEventList+0x92>
 80074b6:	2301      	movs	r3, #1
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	4b0a      	ldr	r3, [pc, #40]	; (80074e4 <xTaskRemoveFromEventList+0xb4>)
 80074bc:	2201      	movs	r2, #1
 80074be:	601a      	str	r2, [r3, #0]
 80074c0:	e001      	b.n	80074c6 <xTaskRemoveFromEventList+0x96>
 80074c2:	2300      	movs	r3, #0
 80074c4:	60fb      	str	r3, [r7, #12]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	0018      	movs	r0, r3
 80074ca:	46bd      	mov	sp, r7
 80074cc:	b004      	add	sp, #16
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	20000cf4 	.word	0x20000cf4
 80074d4:	20000cd4 	.word	0x20000cd4
 80074d8:	200007fc 	.word	0x200007fc
 80074dc:	20000c8c 	.word	0x20000c8c
 80074e0:	200007f8 	.word	0x200007f8
 80074e4:	20000ce0 	.word	0x20000ce0

080074e8 <vTaskInternalSetTimeOutState>:
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	4b05      	ldr	r3, [pc, #20]	; (8007508 <vTaskInternalSetTimeOutState+0x20>)
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	4b04      	ldr	r3, [pc, #16]	; (800750c <vTaskInternalSetTimeOutState+0x24>)
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	605a      	str	r2, [r3, #4]
 8007500:	46c0      	nop			; (mov r8, r8)
 8007502:	46bd      	mov	sp, r7
 8007504:	b002      	add	sp, #8
 8007506:	bd80      	pop	{r7, pc}
 8007508:	20000ce4 	.word	0x20000ce4
 800750c:	20000cd0 	.word	0x20000cd0

08007510 <xTaskCheckForTimeOut>:
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d101      	bne.n	8007524 <xTaskCheckForTimeOut+0x14>
 8007520:	b672      	cpsid	i
 8007522:	e7fe      	b.n	8007522 <xTaskCheckForTimeOut+0x12>
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <xTaskCheckForTimeOut+0x1e>
 800752a:	b672      	cpsid	i
 800752c:	e7fe      	b.n	800752c <xTaskCheckForTimeOut+0x1c>
 800752e:	f000 fd4f 	bl	8007fd0 <vPortEnterCritical>
 8007532:	4b1d      	ldr	r3, [pc, #116]	; (80075a8 <xTaskCheckForTimeOut+0x98>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	613b      	str	r3, [r7, #16]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	60fb      	str	r3, [r7, #12]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3301      	adds	r3, #1
 8007548:	d102      	bne.n	8007550 <xTaskCheckForTimeOut+0x40>
 800754a:	2300      	movs	r3, #0
 800754c:	617b      	str	r3, [r7, #20]
 800754e:	e024      	b.n	800759a <xTaskCheckForTimeOut+0x8a>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	4b15      	ldr	r3, [pc, #84]	; (80075ac <xTaskCheckForTimeOut+0x9c>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	429a      	cmp	r2, r3
 800755a:	d007      	beq.n	800756c <xTaskCheckForTimeOut+0x5c>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	429a      	cmp	r2, r3
 8007564:	d302      	bcc.n	800756c <xTaskCheckForTimeOut+0x5c>
 8007566:	2301      	movs	r3, #1
 8007568:	617b      	str	r3, [r7, #20]
 800756a:	e016      	b.n	800759a <xTaskCheckForTimeOut+0x8a>
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	429a      	cmp	r2, r3
 8007574:	d20c      	bcs.n	8007590 <xTaskCheckForTimeOut+0x80>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	1ad2      	subs	r2, r2, r3
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	0018      	movs	r0, r3
 8007586:	f7ff ffaf 	bl	80074e8 <vTaskInternalSetTimeOutState>
 800758a:	2300      	movs	r3, #0
 800758c:	617b      	str	r3, [r7, #20]
 800758e:	e004      	b.n	800759a <xTaskCheckForTimeOut+0x8a>
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2200      	movs	r2, #0
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	2301      	movs	r3, #1
 8007598:	617b      	str	r3, [r7, #20]
 800759a:	f000 fd2b 	bl	8007ff4 <vPortExitCritical>
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	0018      	movs	r0, r3
 80075a2:	46bd      	mov	sp, r7
 80075a4:	b006      	add	sp, #24
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	20000cd0 	.word	0x20000cd0
 80075ac:	20000ce4 	.word	0x20000ce4

080075b0 <vTaskMissedYield>:
 80075b0:	b580      	push	{r7, lr}
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	4b02      	ldr	r3, [pc, #8]	; (80075c0 <vTaskMissedYield+0x10>)
 80075b6:	2201      	movs	r2, #1
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	46c0      	nop			; (mov r8, r8)
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	20000ce0 	.word	0x20000ce0

080075c4 <prvIdleTask>:
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	f000 f84e 	bl	800766c <prvCheckTasksWaitingTermination>
 80075d0:	4b03      	ldr	r3, [pc, #12]	; (80075e0 <prvIdleTask+0x1c>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d9f9      	bls.n	80075cc <prvIdleTask+0x8>
 80075d8:	f000 fcea 	bl	8007fb0 <vPortYield>
 80075dc:	e7f6      	b.n	80075cc <prvIdleTask+0x8>
 80075de:	46c0      	nop			; (mov r8, r8)
 80075e0:	200007fc 	.word	0x200007fc

080075e4 <prvInitialiseTaskLists>:
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	2300      	movs	r3, #0
 80075ec:	607b      	str	r3, [r7, #4]
 80075ee:	e00c      	b.n	800760a <prvInitialiseTaskLists+0x26>
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	0013      	movs	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	189b      	adds	r3, r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4a14      	ldr	r2, [pc, #80]	; (800764c <prvInitialiseTaskLists+0x68>)
 80075fc:	189b      	adds	r3, r3, r2
 80075fe:	0018      	movs	r0, r3
 8007600:	f7fe fe62 	bl	80062c8 <vListInitialise>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3301      	adds	r3, #1
 8007608:	607b      	str	r3, [r7, #4]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2b37      	cmp	r3, #55	; 0x37
 800760e:	d9ef      	bls.n	80075f0 <prvInitialiseTaskLists+0xc>
 8007610:	4b0f      	ldr	r3, [pc, #60]	; (8007650 <prvInitialiseTaskLists+0x6c>)
 8007612:	0018      	movs	r0, r3
 8007614:	f7fe fe58 	bl	80062c8 <vListInitialise>
 8007618:	4b0e      	ldr	r3, [pc, #56]	; (8007654 <prvInitialiseTaskLists+0x70>)
 800761a:	0018      	movs	r0, r3
 800761c:	f7fe fe54 	bl	80062c8 <vListInitialise>
 8007620:	4b0d      	ldr	r3, [pc, #52]	; (8007658 <prvInitialiseTaskLists+0x74>)
 8007622:	0018      	movs	r0, r3
 8007624:	f7fe fe50 	bl	80062c8 <vListInitialise>
 8007628:	4b0c      	ldr	r3, [pc, #48]	; (800765c <prvInitialiseTaskLists+0x78>)
 800762a:	0018      	movs	r0, r3
 800762c:	f7fe fe4c 	bl	80062c8 <vListInitialise>
 8007630:	4b0b      	ldr	r3, [pc, #44]	; (8007660 <prvInitialiseTaskLists+0x7c>)
 8007632:	0018      	movs	r0, r3
 8007634:	f7fe fe48 	bl	80062c8 <vListInitialise>
 8007638:	4b0a      	ldr	r3, [pc, #40]	; (8007664 <prvInitialiseTaskLists+0x80>)
 800763a:	4a05      	ldr	r2, [pc, #20]	; (8007650 <prvInitialiseTaskLists+0x6c>)
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	4b0a      	ldr	r3, [pc, #40]	; (8007668 <prvInitialiseTaskLists+0x84>)
 8007640:	4a04      	ldr	r2, [pc, #16]	; (8007654 <prvInitialiseTaskLists+0x70>)
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	46c0      	nop			; (mov r8, r8)
 8007646:	46bd      	mov	sp, r7
 8007648:	b002      	add	sp, #8
 800764a:	bd80      	pop	{r7, pc}
 800764c:	200007fc 	.word	0x200007fc
 8007650:	20000c5c 	.word	0x20000c5c
 8007654:	20000c70 	.word	0x20000c70
 8007658:	20000c8c 	.word	0x20000c8c
 800765c:	20000ca0 	.word	0x20000ca0
 8007660:	20000cb8 	.word	0x20000cb8
 8007664:	20000c84 	.word	0x20000c84
 8007668:	20000c88 	.word	0x20000c88

0800766c <prvCheckTasksWaitingTermination>:
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	e01a      	b.n	80076aa <prvCheckTasksWaitingTermination+0x3e>
 8007674:	f000 fcac 	bl	8007fd0 <vPortEnterCritical>
 8007678:	4b10      	ldr	r3, [pc, #64]	; (80076bc <prvCheckTasksWaitingTermination+0x50>)
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	607b      	str	r3, [r7, #4]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	3304      	adds	r3, #4
 8007684:	0018      	movs	r0, r3
 8007686:	f7fe fea0 	bl	80063ca <uxListRemove>
 800768a:	4b0d      	ldr	r3, [pc, #52]	; (80076c0 <prvCheckTasksWaitingTermination+0x54>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	1e5a      	subs	r2, r3, #1
 8007690:	4b0b      	ldr	r3, [pc, #44]	; (80076c0 <prvCheckTasksWaitingTermination+0x54>)
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	4b0b      	ldr	r3, [pc, #44]	; (80076c4 <prvCheckTasksWaitingTermination+0x58>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	1e5a      	subs	r2, r3, #1
 800769a:	4b0a      	ldr	r3, [pc, #40]	; (80076c4 <prvCheckTasksWaitingTermination+0x58>)
 800769c:	601a      	str	r2, [r3, #0]
 800769e:	f000 fca9 	bl	8007ff4 <vPortExitCritical>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	0018      	movs	r0, r3
 80076a6:	f000 f80f 	bl	80076c8 <prvDeleteTCB>
 80076aa:	4b06      	ldr	r3, [pc, #24]	; (80076c4 <prvCheckTasksWaitingTermination+0x58>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1e0      	bne.n	8007674 <prvCheckTasksWaitingTermination+0x8>
 80076b2:	46c0      	nop			; (mov r8, r8)
 80076b4:	46bd      	mov	sp, r7
 80076b6:	b002      	add	sp, #8
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	46c0      	nop			; (mov r8, r8)
 80076bc:	20000ca0 	.word	0x20000ca0
 80076c0:	20000ccc 	.word	0x20000ccc
 80076c4:	20000cb4 	.word	0x20000cb4

080076c8 <prvDeleteTCB>:
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2259      	movs	r2, #89	; 0x59
 80076d4:	5c9b      	ldrb	r3, [r3, r2]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d109      	bne.n	80076ee <prvDeleteTCB+0x26>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076de:	0018      	movs	r0, r3
 80076e0:	f000 fdb4 	bl	800824c <vPortFree>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	0018      	movs	r0, r3
 80076e8:	f000 fdb0 	bl	800824c <vPortFree>
 80076ec:	e010      	b.n	8007710 <prvDeleteTCB+0x48>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2259      	movs	r2, #89	; 0x59
 80076f2:	5c9b      	ldrb	r3, [r3, r2]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d104      	bne.n	8007702 <prvDeleteTCB+0x3a>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	0018      	movs	r0, r3
 80076fc:	f000 fda6 	bl	800824c <vPortFree>
 8007700:	e006      	b.n	8007710 <prvDeleteTCB+0x48>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2259      	movs	r2, #89	; 0x59
 8007706:	5c9b      	ldrb	r3, [r3, r2]
 8007708:	2b02      	cmp	r3, #2
 800770a:	d001      	beq.n	8007710 <prvDeleteTCB+0x48>
 800770c:	b672      	cpsid	i
 800770e:	e7fe      	b.n	800770e <prvDeleteTCB+0x46>
 8007710:	46c0      	nop			; (mov r8, r8)
 8007712:	46bd      	mov	sp, r7
 8007714:	b002      	add	sp, #8
 8007716:	bd80      	pop	{r7, pc}

08007718 <prvResetNextTaskUnblockTime>:
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	4b0e      	ldr	r3, [pc, #56]	; (8007758 <prvResetNextTaskUnblockTime+0x40>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d101      	bne.n	800772c <prvResetNextTaskUnblockTime+0x14>
 8007728:	2301      	movs	r3, #1
 800772a:	e000      	b.n	800772e <prvResetNextTaskUnblockTime+0x16>
 800772c:	2300      	movs	r3, #0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d004      	beq.n	800773c <prvResetNextTaskUnblockTime+0x24>
 8007732:	4b0a      	ldr	r3, [pc, #40]	; (800775c <prvResetNextTaskUnblockTime+0x44>)
 8007734:	2201      	movs	r2, #1
 8007736:	4252      	negs	r2, r2
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	e008      	b.n	800774e <prvResetNextTaskUnblockTime+0x36>
 800773c:	4b06      	ldr	r3, [pc, #24]	; (8007758 <prvResetNextTaskUnblockTime+0x40>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	607b      	str	r3, [r7, #4]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	4b04      	ldr	r3, [pc, #16]	; (800775c <prvResetNextTaskUnblockTime+0x44>)
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	46c0      	nop			; (mov r8, r8)
 8007750:	46bd      	mov	sp, r7
 8007752:	b002      	add	sp, #8
 8007754:	bd80      	pop	{r7, pc}
 8007756:	46c0      	nop			; (mov r8, r8)
 8007758:	20000c84 	.word	0x20000c84
 800775c:	20000cec 	.word	0x20000cec

08007760 <xTaskGetSchedulerState>:
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	4b0a      	ldr	r3, [pc, #40]	; (8007790 <xTaskGetSchedulerState+0x30>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d102      	bne.n	8007774 <xTaskGetSchedulerState+0x14>
 800776e:	2301      	movs	r3, #1
 8007770:	607b      	str	r3, [r7, #4]
 8007772:	e008      	b.n	8007786 <xTaskGetSchedulerState+0x26>
 8007774:	4b07      	ldr	r3, [pc, #28]	; (8007794 <xTaskGetSchedulerState+0x34>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d102      	bne.n	8007782 <xTaskGetSchedulerState+0x22>
 800777c:	2302      	movs	r3, #2
 800777e:	607b      	str	r3, [r7, #4]
 8007780:	e001      	b.n	8007786 <xTaskGetSchedulerState+0x26>
 8007782:	2300      	movs	r3, #0
 8007784:	607b      	str	r3, [r7, #4]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	0018      	movs	r0, r3
 800778a:	46bd      	mov	sp, r7
 800778c:	b002      	add	sp, #8
 800778e:	bd80      	pop	{r7, pc}
 8007790:	20000cd8 	.word	0x20000cd8
 8007794:	20000cf4 	.word	0x20000cf4

08007798 <xTaskPriorityDisinherit>:
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	60bb      	str	r3, [r7, #8]
 80077a4:	2300      	movs	r3, #0
 80077a6:	60fb      	str	r3, [r7, #12]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d044      	beq.n	8007838 <xTaskPriorityDisinherit+0xa0>
 80077ae:	4b25      	ldr	r3, [pc, #148]	; (8007844 <xTaskPriorityDisinherit+0xac>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d001      	beq.n	80077bc <xTaskPriorityDisinherit+0x24>
 80077b8:	b672      	cpsid	i
 80077ba:	e7fe      	b.n	80077ba <xTaskPriorityDisinherit+0x22>
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <xTaskPriorityDisinherit+0x30>
 80077c4:	b672      	cpsid	i
 80077c6:	e7fe      	b.n	80077c6 <xTaskPriorityDisinherit+0x2e>
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077cc:	1e5a      	subs	r2, r3, #1
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	651a      	str	r2, [r3, #80]	; 0x50
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077da:	429a      	cmp	r2, r3
 80077dc:	d02c      	beq.n	8007838 <xTaskPriorityDisinherit+0xa0>
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d128      	bne.n	8007838 <xTaskPriorityDisinherit+0xa0>
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	3304      	adds	r3, #4
 80077ea:	0018      	movs	r0, r3
 80077ec:	f7fe fded 	bl	80063ca <uxListRemove>
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fc:	2238      	movs	r2, #56	; 0x38
 80077fe:	1ad2      	subs	r2, r2, r3
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	619a      	str	r2, [r3, #24]
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007808:	4b0f      	ldr	r3, [pc, #60]	; (8007848 <xTaskPriorityDisinherit+0xb0>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	429a      	cmp	r2, r3
 800780e:	d903      	bls.n	8007818 <xTaskPriorityDisinherit+0x80>
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007814:	4b0c      	ldr	r3, [pc, #48]	; (8007848 <xTaskPriorityDisinherit+0xb0>)
 8007816:	601a      	str	r2, [r3, #0]
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800781c:	0013      	movs	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	189b      	adds	r3, r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4a09      	ldr	r2, [pc, #36]	; (800784c <xTaskPriorityDisinherit+0xb4>)
 8007826:	189a      	adds	r2, r3, r2
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	3304      	adds	r3, #4
 800782c:	0019      	movs	r1, r3
 800782e:	0010      	movs	r0, r2
 8007830:	f7fe fd73 	bl	800631a <vListInsertEnd>
 8007834:	2301      	movs	r3, #1
 8007836:	60fb      	str	r3, [r7, #12]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	0018      	movs	r0, r3
 800783c:	46bd      	mov	sp, r7
 800783e:	b004      	add	sp, #16
 8007840:	bd80      	pop	{r7, pc}
 8007842:	46c0      	nop			; (mov r8, r8)
 8007844:	200007f8 	.word	0x200007f8
 8007848:	20000cd4 	.word	0x20000cd4
 800784c:	200007fc 	.word	0x200007fc

08007850 <prvAddCurrentTaskToDelayedList>:
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
 800785a:	4b21      	ldr	r3, [pc, #132]	; (80078e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	4b20      	ldr	r3, [pc, #128]	; (80078e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3304      	adds	r3, #4
 8007866:	0018      	movs	r0, r3
 8007868:	f7fe fdaf 	bl	80063ca <uxListRemove>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	3301      	adds	r3, #1
 8007870:	d10b      	bne.n	800788a <prvAddCurrentTaskToDelayedList+0x3a>
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d008      	beq.n	800788a <prvAddCurrentTaskToDelayedList+0x3a>
 8007878:	4b1a      	ldr	r3, [pc, #104]	; (80078e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	1d1a      	adds	r2, r3, #4
 800787e:	4b1a      	ldr	r3, [pc, #104]	; (80078e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007880:	0011      	movs	r1, r2
 8007882:	0018      	movs	r0, r3
 8007884:	f7fe fd49 	bl	800631a <vListInsertEnd>
 8007888:	e026      	b.n	80078d8 <prvAddCurrentTaskToDelayedList+0x88>
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	18d3      	adds	r3, r2, r3
 8007890:	60bb      	str	r3, [r7, #8]
 8007892:	4b14      	ldr	r3, [pc, #80]	; (80078e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	605a      	str	r2, [r3, #4]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d209      	bcs.n	80078b6 <prvAddCurrentTaskToDelayedList+0x66>
 80078a2:	4b12      	ldr	r3, [pc, #72]	; (80078ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	4b0f      	ldr	r3, [pc, #60]	; (80078e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3304      	adds	r3, #4
 80078ac:	0019      	movs	r1, r3
 80078ae:	0010      	movs	r0, r2
 80078b0:	f7fe fd55 	bl	800635e <vListInsert>
 80078b4:	e010      	b.n	80078d8 <prvAddCurrentTaskToDelayedList+0x88>
 80078b6:	4b0e      	ldr	r3, [pc, #56]	; (80078f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	4b0a      	ldr	r3, [pc, #40]	; (80078e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3304      	adds	r3, #4
 80078c0:	0019      	movs	r1, r3
 80078c2:	0010      	movs	r0, r2
 80078c4:	f7fe fd4b 	bl	800635e <vListInsert>
 80078c8:	4b0a      	ldr	r3, [pc, #40]	; (80078f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d202      	bcs.n	80078d8 <prvAddCurrentTaskToDelayedList+0x88>
 80078d2:	4b08      	ldr	r3, [pc, #32]	; (80078f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	46c0      	nop			; (mov r8, r8)
 80078da:	46bd      	mov	sp, r7
 80078dc:	b004      	add	sp, #16
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	20000cd0 	.word	0x20000cd0
 80078e4:	200007f8 	.word	0x200007f8
 80078e8:	20000cb8 	.word	0x20000cb8
 80078ec:	20000c88 	.word	0x20000c88
 80078f0:	20000c84 	.word	0x20000c84
 80078f4:	20000cec 	.word	0x20000cec

080078f8 <xTimerCreateTimerTask>:
 80078f8:	b590      	push	{r4, r7, lr}
 80078fa:	b089      	sub	sp, #36	; 0x24
 80078fc:	af04      	add	r7, sp, #16
 80078fe:	2300      	movs	r3, #0
 8007900:	60fb      	str	r3, [r7, #12]
 8007902:	f000 fa8b 	bl	8007e1c <prvCheckForValidListAndQueue>
 8007906:	4b17      	ldr	r3, [pc, #92]	; (8007964 <xTimerCreateTimerTask+0x6c>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d020      	beq.n	8007950 <xTimerCreateTimerTask+0x58>
 800790e:	2300      	movs	r3, #0
 8007910:	60bb      	str	r3, [r7, #8]
 8007912:	2300      	movs	r3, #0
 8007914:	607b      	str	r3, [r7, #4]
 8007916:	003a      	movs	r2, r7
 8007918:	1d39      	adds	r1, r7, #4
 800791a:	2308      	movs	r3, #8
 800791c:	18fb      	adds	r3, r7, r3
 800791e:	0018      	movs	r0, r3
 8007920:	f7fe fcba 	bl	8006298 <vApplicationGetTimerTaskMemory>
 8007924:	683c      	ldr	r4, [r7, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	490f      	ldr	r1, [pc, #60]	; (8007968 <xTimerCreateTimerTask+0x70>)
 800792c:	480f      	ldr	r0, [pc, #60]	; (800796c <xTimerCreateTimerTask+0x74>)
 800792e:	9202      	str	r2, [sp, #8]
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	2302      	movs	r3, #2
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	2300      	movs	r3, #0
 8007938:	0022      	movs	r2, r4
 800793a:	f7ff f996 	bl	8006c6a <xTaskCreateStatic>
 800793e:	0002      	movs	r2, r0
 8007940:	4b0b      	ldr	r3, [pc, #44]	; (8007970 <xTimerCreateTimerTask+0x78>)
 8007942:	601a      	str	r2, [r3, #0]
 8007944:	4b0a      	ldr	r3, [pc, #40]	; (8007970 <xTimerCreateTimerTask+0x78>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <xTimerCreateTimerTask+0x58>
 800794c:	2301      	movs	r3, #1
 800794e:	60fb      	str	r3, [r7, #12]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <xTimerCreateTimerTask+0x62>
 8007956:	b672      	cpsid	i
 8007958:	e7fe      	b.n	8007958 <xTimerCreateTimerTask+0x60>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	0018      	movs	r0, r3
 800795e:	46bd      	mov	sp, r7
 8007960:	b005      	add	sp, #20
 8007962:	bd90      	pop	{r4, r7, pc}
 8007964:	20000d28 	.word	0x20000d28
 8007968:	08008534 	.word	0x08008534
 800796c:	08007a7d 	.word	0x08007a7d
 8007970:	20000d2c 	.word	0x20000d2c

08007974 <xTimerGenericCommand>:
 8007974:	b580      	push	{r7, lr}
 8007976:	b08a      	sub	sp, #40	; 0x28
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	603b      	str	r3, [r7, #0]
 8007982:	2300      	movs	r3, #0
 8007984:	627b      	str	r3, [r7, #36]	; 0x24
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d101      	bne.n	8007990 <xTimerGenericCommand+0x1c>
 800798c:	b672      	cpsid	i
 800798e:	e7fe      	b.n	800798e <xTimerGenericCommand+0x1a>
 8007990:	4b1d      	ldr	r3, [pc, #116]	; (8007a08 <xTimerGenericCommand+0x94>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d031      	beq.n	80079fc <xTimerGenericCommand+0x88>
 8007998:	2114      	movs	r1, #20
 800799a:	187b      	adds	r3, r7, r1
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	187b      	adds	r3, r7, r1
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	605a      	str	r2, [r3, #4]
 80079a6:	187b      	adds	r3, r7, r1
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	609a      	str	r2, [r3, #8]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b05      	cmp	r3, #5
 80079b0:	dc1a      	bgt.n	80079e8 <xTimerGenericCommand+0x74>
 80079b2:	f7ff fed5 	bl	8007760 <xTaskGetSchedulerState>
 80079b6:	0003      	movs	r3, r0
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d10a      	bne.n	80079d2 <xTimerGenericCommand+0x5e>
 80079bc:	4b12      	ldr	r3, [pc, #72]	; (8007a08 <xTimerGenericCommand+0x94>)
 80079be:	6818      	ldr	r0, [r3, #0]
 80079c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079c2:	2314      	movs	r3, #20
 80079c4:	18f9      	adds	r1, r7, r3
 80079c6:	2300      	movs	r3, #0
 80079c8:	f7fe fded 	bl	80065a6 <xQueueGenericSend>
 80079cc:	0003      	movs	r3, r0
 80079ce:	627b      	str	r3, [r7, #36]	; 0x24
 80079d0:	e014      	b.n	80079fc <xTimerGenericCommand+0x88>
 80079d2:	4b0d      	ldr	r3, [pc, #52]	; (8007a08 <xTimerGenericCommand+0x94>)
 80079d4:	6818      	ldr	r0, [r3, #0]
 80079d6:	2314      	movs	r3, #20
 80079d8:	18f9      	adds	r1, r7, r3
 80079da:	2300      	movs	r3, #0
 80079dc:	2200      	movs	r2, #0
 80079de:	f7fe fde2 	bl	80065a6 <xQueueGenericSend>
 80079e2:	0003      	movs	r3, r0
 80079e4:	627b      	str	r3, [r7, #36]	; 0x24
 80079e6:	e009      	b.n	80079fc <xTimerGenericCommand+0x88>
 80079e8:	4b07      	ldr	r3, [pc, #28]	; (8007a08 <xTimerGenericCommand+0x94>)
 80079ea:	6818      	ldr	r0, [r3, #0]
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	2314      	movs	r3, #20
 80079f0:	18f9      	adds	r1, r7, r3
 80079f2:	2300      	movs	r3, #0
 80079f4:	f7fe fe9b 	bl	800672e <xQueueGenericSendFromISR>
 80079f8:	0003      	movs	r3, r0
 80079fa:	627b      	str	r3, [r7, #36]	; 0x24
 80079fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fe:	0018      	movs	r0, r3
 8007a00:	46bd      	mov	sp, r7
 8007a02:	b00a      	add	sp, #40	; 0x28
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	46c0      	nop			; (mov r8, r8)
 8007a08:	20000d28 	.word	0x20000d28

08007a0c <prvProcessExpiredTimer>:
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b086      	sub	sp, #24
 8007a10:	af02      	add	r7, sp, #8
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
 8007a16:	4b18      	ldr	r3, [pc, #96]	; (8007a78 <prvProcessExpiredTimer+0x6c>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	60fb      	str	r3, [r7, #12]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	3304      	adds	r3, #4
 8007a24:	0018      	movs	r0, r3
 8007a26:	f7fe fcd0 	bl	80063ca <uxListRemove>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d119      	bne.n	8007a66 <prvProcessExpiredTimer+0x5a>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	699a      	ldr	r2, [r3, #24]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	18d1      	adds	r1, r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f000 f8b6 	bl	8007bb0 <prvInsertTimerInActiveList>
 8007a44:	1e03      	subs	r3, r0, #0
 8007a46:	d00e      	beq.n	8007a66 <prvProcessExpiredTimer+0x5a>
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	2300      	movs	r3, #0
 8007a52:	2100      	movs	r1, #0
 8007a54:	f7ff ff8e 	bl	8007974 <xTimerGenericCommand>
 8007a58:	0003      	movs	r3, r0
 8007a5a:	60bb      	str	r3, [r7, #8]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d101      	bne.n	8007a66 <prvProcessExpiredTimer+0x5a>
 8007a62:	b672      	cpsid	i
 8007a64:	e7fe      	b.n	8007a64 <prvProcessExpiredTimer+0x58>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	0010      	movs	r0, r2
 8007a6e:	4798      	blx	r3
 8007a70:	46c0      	nop			; (mov r8, r8)
 8007a72:	46bd      	mov	sp, r7
 8007a74:	b004      	add	sp, #16
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	20000d20 	.word	0x20000d20

08007a7c <prvTimerTask>:
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	2308      	movs	r3, #8
 8007a86:	18fb      	adds	r3, r7, r3
 8007a88:	0018      	movs	r0, r3
 8007a8a:	f000 f851 	bl	8007b30 <prvGetNextExpireTime>
 8007a8e:	0003      	movs	r3, r0
 8007a90:	60fb      	str	r3, [r7, #12]
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	0011      	movs	r1, r2
 8007a98:	0018      	movs	r0, r3
 8007a9a:	f000 f803 	bl	8007aa4 <prvProcessTimerOrBlockTask>
 8007a9e:	f000 f8c9 	bl	8007c34 <prvProcessReceivedCommands>
 8007aa2:	e7ef      	b.n	8007a84 <prvTimerTask+0x8>

08007aa4 <prvProcessTimerOrBlockTask>:
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
 8007aae:	f7ff facf 	bl	8007050 <vTaskSuspendAll>
 8007ab2:	2308      	movs	r3, #8
 8007ab4:	18fb      	adds	r3, r7, r3
 8007ab6:	0018      	movs	r0, r3
 8007ab8:	f000 f85a 	bl	8007b70 <prvSampleTimeNow>
 8007abc:	0003      	movs	r3, r0
 8007abe:	60fb      	str	r3, [r7, #12]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d129      	bne.n	8007b1a <prvProcessTimerOrBlockTask+0x76>
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10c      	bne.n	8007ae6 <prvProcessTimerOrBlockTask+0x42>
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d808      	bhi.n	8007ae6 <prvProcessTimerOrBlockTask+0x42>
 8007ad4:	f7ff fac8 	bl	8007068 <xTaskResumeAll>
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	0011      	movs	r1, r2
 8007ade:	0018      	movs	r0, r3
 8007ae0:	f7ff ff94 	bl	8007a0c <prvProcessExpiredTimer>
 8007ae4:	e01b      	b.n	8007b1e <prvProcessTimerOrBlockTask+0x7a>
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d006      	beq.n	8007afa <prvProcessTimerOrBlockTask+0x56>
 8007aec:	4b0e      	ldr	r3, [pc, #56]	; (8007b28 <prvProcessTimerOrBlockTask+0x84>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	425a      	negs	r2, r3
 8007af4:	4153      	adcs	r3, r2
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	603b      	str	r3, [r7, #0]
 8007afa:	4b0c      	ldr	r3, [pc, #48]	; (8007b2c <prvProcessTimerOrBlockTask+0x88>)
 8007afc:	6818      	ldr	r0, [r3, #0]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	683a      	ldr	r2, [r7, #0]
 8007b06:	0019      	movs	r1, r3
 8007b08:	f7ff f87c 	bl	8006c04 <vQueueWaitForMessageRestricted>
 8007b0c:	f7ff faac 	bl	8007068 <xTaskResumeAll>
 8007b10:	1e03      	subs	r3, r0, #0
 8007b12:	d104      	bne.n	8007b1e <prvProcessTimerOrBlockTask+0x7a>
 8007b14:	f000 fa4c 	bl	8007fb0 <vPortYield>
 8007b18:	e001      	b.n	8007b1e <prvProcessTimerOrBlockTask+0x7a>
 8007b1a:	f7ff faa5 	bl	8007068 <xTaskResumeAll>
 8007b1e:	46c0      	nop			; (mov r8, r8)
 8007b20:	46bd      	mov	sp, r7
 8007b22:	b004      	add	sp, #16
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	46c0      	nop			; (mov r8, r8)
 8007b28:	20000d24 	.word	0x20000d24
 8007b2c:	20000d28 	.word	0x20000d28

08007b30 <prvGetNextExpireTime>:
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	4b0c      	ldr	r3, [pc, #48]	; (8007b6c <prvGetNextExpireTime+0x3c>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	425a      	negs	r2, r3
 8007b40:	4153      	adcs	r3, r2
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	001a      	movs	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d105      	bne.n	8007b5e <prvGetNextExpireTime+0x2e>
 8007b52:	4b06      	ldr	r3, [pc, #24]	; (8007b6c <prvGetNextExpireTime+0x3c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	60fb      	str	r3, [r7, #12]
 8007b5c:	e001      	b.n	8007b62 <prvGetNextExpireTime+0x32>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	60fb      	str	r3, [r7, #12]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	0018      	movs	r0, r3
 8007b66:	46bd      	mov	sp, r7
 8007b68:	b004      	add	sp, #16
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	20000d20 	.word	0x20000d20

08007b70 <prvSampleTimeNow>:
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	f7ff fb02 	bl	8007180 <xTaskGetTickCount>
 8007b7c:	0003      	movs	r3, r0
 8007b7e:	60fb      	str	r3, [r7, #12]
 8007b80:	4b0a      	ldr	r3, [pc, #40]	; (8007bac <prvSampleTimeNow+0x3c>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d205      	bcs.n	8007b96 <prvSampleTimeNow+0x26>
 8007b8a:	f000 f8ed 	bl	8007d68 <prvSwitchTimerLists>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	e002      	b.n	8007b9c <prvSampleTimeNow+0x2c>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	601a      	str	r2, [r3, #0]
 8007b9c:	4b03      	ldr	r3, [pc, #12]	; (8007bac <prvSampleTimeNow+0x3c>)
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	601a      	str	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	0018      	movs	r0, r3
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	b004      	add	sp, #16
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	20000d30 	.word	0x20000d30

08007bb0 <prvInsertTimerInActiveList>:
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
 8007bbc:	603b      	str	r3, [r7, #0]
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	617b      	str	r3, [r7, #20]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	605a      	str	r2, [r3, #4]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	611a      	str	r2, [r3, #16]
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d812      	bhi.n	8007bfc <prvInsertTimerInActiveList+0x4c>
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	1ad2      	subs	r2, r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d302      	bcc.n	8007bea <prvInsertTimerInActiveList+0x3a>
 8007be4:	2301      	movs	r3, #1
 8007be6:	617b      	str	r3, [r7, #20]
 8007be8:	e01b      	b.n	8007c22 <prvInsertTimerInActiveList+0x72>
 8007bea:	4b10      	ldr	r3, [pc, #64]	; (8007c2c <prvInsertTimerInActiveList+0x7c>)
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	3304      	adds	r3, #4
 8007bf2:	0019      	movs	r1, r3
 8007bf4:	0010      	movs	r0, r2
 8007bf6:	f7fe fbb2 	bl	800635e <vListInsert>
 8007bfa:	e012      	b.n	8007c22 <prvInsertTimerInActiveList+0x72>
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d206      	bcs.n	8007c12 <prvInsertTimerInActiveList+0x62>
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d302      	bcc.n	8007c12 <prvInsertTimerInActiveList+0x62>
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	617b      	str	r3, [r7, #20]
 8007c10:	e007      	b.n	8007c22 <prvInsertTimerInActiveList+0x72>
 8007c12:	4b07      	ldr	r3, [pc, #28]	; (8007c30 <prvInsertTimerInActiveList+0x80>)
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3304      	adds	r3, #4
 8007c1a:	0019      	movs	r1, r3
 8007c1c:	0010      	movs	r0, r2
 8007c1e:	f7fe fb9e 	bl	800635e <vListInsert>
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	0018      	movs	r0, r3
 8007c26:	46bd      	mov	sp, r7
 8007c28:	b006      	add	sp, #24
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	20000d24 	.word	0x20000d24
 8007c30:	20000d20 	.word	0x20000d20

08007c34 <prvProcessReceivedCommands>:
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b08c      	sub	sp, #48	; 0x30
 8007c38:	af02      	add	r7, sp, #8
 8007c3a:	e082      	b.n	8007d42 <prvProcessReceivedCommands+0x10e>
 8007c3c:	2308      	movs	r3, #8
 8007c3e:	18fb      	adds	r3, r7, r3
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	da10      	bge.n	8007c68 <prvProcessReceivedCommands+0x34>
 8007c46:	2308      	movs	r3, #8
 8007c48:	18fb      	adds	r3, r7, r3
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <prvProcessReceivedCommands+0x24>
 8007c54:	b672      	cpsid	i
 8007c56:	e7fe      	b.n	8007c56 <prvProcessReceivedCommands+0x22>
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5e:	6858      	ldr	r0, [r3, #4]
 8007c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	0019      	movs	r1, r3
 8007c66:	4790      	blx	r2
 8007c68:	2308      	movs	r3, #8
 8007c6a:	18fb      	adds	r3, r7, r3
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	db66      	blt.n	8007d40 <prvProcessReceivedCommands+0x10c>
 8007c72:	2308      	movs	r3, #8
 8007c74:	18fb      	adds	r3, r7, r3
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	623b      	str	r3, [r7, #32]
 8007c7a:	6a3b      	ldr	r3, [r7, #32]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d004      	beq.n	8007c8c <prvProcessReceivedCommands+0x58>
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	3304      	adds	r3, #4
 8007c86:	0018      	movs	r0, r3
 8007c88:	f7fe fb9f 	bl	80063ca <uxListRemove>
 8007c8c:	1d3b      	adds	r3, r7, #4
 8007c8e:	0018      	movs	r0, r3
 8007c90:	f7ff ff6e 	bl	8007b70 <prvSampleTimeNow>
 8007c94:	0003      	movs	r3, r0
 8007c96:	61fb      	str	r3, [r7, #28]
 8007c98:	2308      	movs	r3, #8
 8007c9a:	18fb      	adds	r3, r7, r3
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b09      	cmp	r3, #9
 8007ca0:	d84f      	bhi.n	8007d42 <prvProcessReceivedCommands+0x10e>
 8007ca2:	009a      	lsls	r2, r3, #2
 8007ca4:	4b2e      	ldr	r3, [pc, #184]	; (8007d60 <prvProcessReceivedCommands+0x12c>)
 8007ca6:	18d3      	adds	r3, r2, r3
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	469f      	mov	pc, r3
 8007cac:	2008      	movs	r0, #8
 8007cae:	183b      	adds	r3, r7, r0
 8007cb0:	685a      	ldr	r2, [r3, #4]
 8007cb2:	6a3b      	ldr	r3, [r7, #32]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	18d1      	adds	r1, r2, r3
 8007cb8:	183b      	adds	r3, r7, r0
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	69fa      	ldr	r2, [r7, #28]
 8007cbe:	6a38      	ldr	r0, [r7, #32]
 8007cc0:	f7ff ff76 	bl	8007bb0 <prvInsertTimerInActiveList>
 8007cc4:	1e03      	subs	r3, r0, #0
 8007cc6:	d03c      	beq.n	8007d42 <prvProcessReceivedCommands+0x10e>
 8007cc8:	6a3b      	ldr	r3, [r7, #32]
 8007cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ccc:	6a3a      	ldr	r2, [r7, #32]
 8007cce:	0010      	movs	r0, r2
 8007cd0:	4798      	blx	r3
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	69db      	ldr	r3, [r3, #28]
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d133      	bne.n	8007d42 <prvProcessReceivedCommands+0x10e>
 8007cda:	2308      	movs	r3, #8
 8007cdc:	18fb      	adds	r3, r7, r3
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	18d2      	adds	r2, r2, r3
 8007ce6:	6a38      	ldr	r0, [r7, #32]
 8007ce8:	2300      	movs	r3, #0
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	2300      	movs	r3, #0
 8007cee:	2100      	movs	r1, #0
 8007cf0:	f7ff fe40 	bl	8007974 <xTimerGenericCommand>
 8007cf4:	0003      	movs	r3, r0
 8007cf6:	61bb      	str	r3, [r7, #24]
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d121      	bne.n	8007d42 <prvProcessReceivedCommands+0x10e>
 8007cfe:	b672      	cpsid	i
 8007d00:	e7fe      	b.n	8007d00 <prvProcessReceivedCommands+0xcc>
 8007d02:	2308      	movs	r3, #8
 8007d04:	18fb      	adds	r3, r7, r3
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	619a      	str	r2, [r3, #24]
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d101      	bne.n	8007d18 <prvProcessReceivedCommands+0xe4>
 8007d14:	b672      	cpsid	i
 8007d16:	e7fe      	b.n	8007d16 <prvProcessReceivedCommands+0xe2>
 8007d18:	6a3b      	ldr	r3, [r7, #32]
 8007d1a:	699a      	ldr	r2, [r3, #24]
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	18d1      	adds	r1, r2, r3
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	69fa      	ldr	r2, [r7, #28]
 8007d24:	6a38      	ldr	r0, [r7, #32]
 8007d26:	f7ff ff43 	bl	8007bb0 <prvInsertTimerInActiveList>
 8007d2a:	e00a      	b.n	8007d42 <prvProcessReceivedCommands+0x10e>
 8007d2c:	6a3b      	ldr	r3, [r7, #32]
 8007d2e:	222c      	movs	r2, #44	; 0x2c
 8007d30:	5c9b      	ldrb	r3, [r3, r2]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d105      	bne.n	8007d42 <prvProcessReceivedCommands+0x10e>
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	0018      	movs	r0, r3
 8007d3a:	f000 fa87 	bl	800824c <vPortFree>
 8007d3e:	e000      	b.n	8007d42 <prvProcessReceivedCommands+0x10e>
 8007d40:	46c0      	nop			; (mov r8, r8)
 8007d42:	4b08      	ldr	r3, [pc, #32]	; (8007d64 <prvProcessReceivedCommands+0x130>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2208      	movs	r2, #8
 8007d48:	18b9      	adds	r1, r7, r2
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	0018      	movs	r0, r3
 8007d4e:	f7fe fd5f 	bl	8006810 <xQueueReceive>
 8007d52:	1e03      	subs	r3, r0, #0
 8007d54:	d000      	beq.n	8007d58 <prvProcessReceivedCommands+0x124>
 8007d56:	e771      	b.n	8007c3c <prvProcessReceivedCommands+0x8>
 8007d58:	46c0      	nop			; (mov r8, r8)
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	b00a      	add	sp, #40	; 0x28
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	0800862c 	.word	0x0800862c
 8007d64:	20000d28 	.word	0x20000d28

08007d68 <prvSwitchTimerLists>:
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b088      	sub	sp, #32
 8007d6c:	af02      	add	r7, sp, #8
 8007d6e:	e03e      	b.n	8007dee <prvSwitchTimerLists+0x86>
 8007d70:	4b28      	ldr	r3, [pc, #160]	; (8007e14 <prvSwitchTimerLists+0xac>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	613b      	str	r3, [r7, #16]
 8007d7a:	4b26      	ldr	r3, [pc, #152]	; (8007e14 <prvSwitchTimerLists+0xac>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	3304      	adds	r3, #4
 8007d88:	0018      	movs	r0, r3
 8007d8a:	f7fe fb1e 	bl	80063ca <uxListRemove>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	0010      	movs	r0, r2
 8007d96:	4798      	blx	r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d126      	bne.n	8007dee <prvSwitchTimerLists+0x86>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	18d3      	adds	r3, r2, r3
 8007da8:	60bb      	str	r3, [r7, #8]
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d90e      	bls.n	8007dd0 <prvSwitchTimerLists+0x68>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	605a      	str	r2, [r3, #4]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	611a      	str	r2, [r3, #16]
 8007dbe:	4b15      	ldr	r3, [pc, #84]	; (8007e14 <prvSwitchTimerLists+0xac>)
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	0019      	movs	r1, r3
 8007dc8:	0010      	movs	r0, r2
 8007dca:	f7fe fac8 	bl	800635e <vListInsert>
 8007dce:	e00e      	b.n	8007dee <prvSwitchTimerLists+0x86>
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	2300      	movs	r3, #0
 8007dda:	2100      	movs	r1, #0
 8007ddc:	f7ff fdca 	bl	8007974 <xTimerGenericCommand>
 8007de0:	0003      	movs	r3, r0
 8007de2:	607b      	str	r3, [r7, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d101      	bne.n	8007dee <prvSwitchTimerLists+0x86>
 8007dea:	b672      	cpsid	i
 8007dec:	e7fe      	b.n	8007dec <prvSwitchTimerLists+0x84>
 8007dee:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <prvSwitchTimerLists+0xac>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1bb      	bne.n	8007d70 <prvSwitchTimerLists+0x8>
 8007df8:	4b06      	ldr	r3, [pc, #24]	; (8007e14 <prvSwitchTimerLists+0xac>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	617b      	str	r3, [r7, #20]
 8007dfe:	4b06      	ldr	r3, [pc, #24]	; (8007e18 <prvSwitchTimerLists+0xb0>)
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	4b04      	ldr	r3, [pc, #16]	; (8007e14 <prvSwitchTimerLists+0xac>)
 8007e04:	601a      	str	r2, [r3, #0]
 8007e06:	4b04      	ldr	r3, [pc, #16]	; (8007e18 <prvSwitchTimerLists+0xb0>)
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	46c0      	nop			; (mov r8, r8)
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	b006      	add	sp, #24
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	20000d20 	.word	0x20000d20
 8007e18:	20000d24 	.word	0x20000d24

08007e1c <prvCheckForValidListAndQueue>:
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af02      	add	r7, sp, #8
 8007e22:	f000 f8d5 	bl	8007fd0 <vPortEnterCritical>
 8007e26:	4b17      	ldr	r3, [pc, #92]	; (8007e84 <prvCheckForValidListAndQueue+0x68>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d124      	bne.n	8007e78 <prvCheckForValidListAndQueue+0x5c>
 8007e2e:	4b16      	ldr	r3, [pc, #88]	; (8007e88 <prvCheckForValidListAndQueue+0x6c>)
 8007e30:	0018      	movs	r0, r3
 8007e32:	f7fe fa49 	bl	80062c8 <vListInitialise>
 8007e36:	4b15      	ldr	r3, [pc, #84]	; (8007e8c <prvCheckForValidListAndQueue+0x70>)
 8007e38:	0018      	movs	r0, r3
 8007e3a:	f7fe fa45 	bl	80062c8 <vListInitialise>
 8007e3e:	4b14      	ldr	r3, [pc, #80]	; (8007e90 <prvCheckForValidListAndQueue+0x74>)
 8007e40:	4a11      	ldr	r2, [pc, #68]	; (8007e88 <prvCheckForValidListAndQueue+0x6c>)
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	4b13      	ldr	r3, [pc, #76]	; (8007e94 <prvCheckForValidListAndQueue+0x78>)
 8007e46:	4a11      	ldr	r2, [pc, #68]	; (8007e8c <prvCheckForValidListAndQueue+0x70>)
 8007e48:	601a      	str	r2, [r3, #0]
 8007e4a:	4913      	ldr	r1, [pc, #76]	; (8007e98 <prvCheckForValidListAndQueue+0x7c>)
 8007e4c:	4a13      	ldr	r2, [pc, #76]	; (8007e9c <prvCheckForValidListAndQueue+0x80>)
 8007e4e:	2300      	movs	r3, #0
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	000b      	movs	r3, r1
 8007e54:	2110      	movs	r1, #16
 8007e56:	200a      	movs	r0, #10
 8007e58:	f7fe fb33 	bl	80064c2 <xQueueGenericCreateStatic>
 8007e5c:	0002      	movs	r2, r0
 8007e5e:	4b09      	ldr	r3, [pc, #36]	; (8007e84 <prvCheckForValidListAndQueue+0x68>)
 8007e60:	601a      	str	r2, [r3, #0]
 8007e62:	4b08      	ldr	r3, [pc, #32]	; (8007e84 <prvCheckForValidListAndQueue+0x68>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d006      	beq.n	8007e78 <prvCheckForValidListAndQueue+0x5c>
 8007e6a:	4b06      	ldr	r3, [pc, #24]	; (8007e84 <prvCheckForValidListAndQueue+0x68>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a0c      	ldr	r2, [pc, #48]	; (8007ea0 <prvCheckForValidListAndQueue+0x84>)
 8007e70:	0011      	movs	r1, r2
 8007e72:	0018      	movs	r0, r3
 8007e74:	f7fe fe9e 	bl	8006bb4 <vQueueAddToRegistry>
 8007e78:	f000 f8bc 	bl	8007ff4 <vPortExitCritical>
 8007e7c:	46c0      	nop			; (mov r8, r8)
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	46c0      	nop			; (mov r8, r8)
 8007e84:	20000d28 	.word	0x20000d28
 8007e88:	20000cf8 	.word	0x20000cf8
 8007e8c:	20000d0c 	.word	0x20000d0c
 8007e90:	20000d20 	.word	0x20000d20
 8007e94:	20000d24 	.word	0x20000d24
 8007e98:	20000dd4 	.word	0x20000dd4
 8007e9c:	20000d34 	.word	0x20000d34
 8007ea0:	0800853c 	.word	0x0800853c

08007ea4 <pxPortInitialiseStack>:
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	3b04      	subs	r3, #4
 8007eb4:	60fb      	str	r3, [r7, #12]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2280      	movs	r2, #128	; 0x80
 8007eba:	0452      	lsls	r2, r2, #17
 8007ebc:	601a      	str	r2, [r3, #0]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	3b04      	subs	r3, #4
 8007ec2:	60fb      	str	r3, [r7, #12]
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	3b04      	subs	r3, #4
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	4a08      	ldr	r2, [pc, #32]	; (8007ef4 <pxPortInitialiseStack+0x50>)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	601a      	str	r2, [r3, #0]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	3b14      	subs	r3, #20
 8007eda:	60fb      	str	r3, [r7, #12]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	601a      	str	r2, [r3, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	3b20      	subs	r3, #32
 8007ee6:	60fb      	str	r3, [r7, #12]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	0018      	movs	r0, r3
 8007eec:	46bd      	mov	sp, r7
 8007eee:	b004      	add	sp, #16
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	46c0      	nop			; (mov r8, r8)
 8007ef4:	08007ef9 	.word	0x08007ef9

08007ef8 <prvTaskExitError>:
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	2300      	movs	r3, #0
 8007f00:	607b      	str	r3, [r7, #4]
 8007f02:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <prvTaskExitError+0x28>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3301      	adds	r3, #1
 8007f08:	d001      	beq.n	8007f0e <prvTaskExitError+0x16>
 8007f0a:	b672      	cpsid	i
 8007f0c:	e7fe      	b.n	8007f0c <prvTaskExitError+0x14>
 8007f0e:	b672      	cpsid	i
 8007f10:	46c0      	nop			; (mov r8, r8)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d0fc      	beq.n	8007f12 <prvTaskExitError+0x1a>
 8007f18:	46c0      	nop			; (mov r8, r8)
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	b002      	add	sp, #8
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	20000100 	.word	0x20000100

08007f24 <SVC_Handler>:
 8007f24:	b580      	push	{r7, lr}
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	46c0      	nop			; (mov r8, r8)
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
	...

08007f30 <vPortStartFirstTask>:
 8007f30:	4a0b      	ldr	r2, [pc, #44]	; (8007f60 <pxCurrentTCBConst2>)
 8007f32:	6813      	ldr	r3, [r2, #0]
 8007f34:	6818      	ldr	r0, [r3, #0]
 8007f36:	3020      	adds	r0, #32
 8007f38:	f380 8809 	msr	PSP, r0
 8007f3c:	2002      	movs	r0, #2
 8007f3e:	f380 8814 	msr	CONTROL, r0
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007f48:	46ae      	mov	lr, r5
 8007f4a:	bc08      	pop	{r3}
 8007f4c:	bc04      	pop	{r2}
 8007f4e:	b662      	cpsie	i
 8007f50:	4718      	bx	r3
 8007f52:	46c0      	nop			; (mov r8, r8)
 8007f54:	46c0      	nop			; (mov r8, r8)
 8007f56:	46c0      	nop			; (mov r8, r8)
 8007f58:	46c0      	nop			; (mov r8, r8)
 8007f5a:	46c0      	nop			; (mov r8, r8)
 8007f5c:	46c0      	nop			; (mov r8, r8)
 8007f5e:	46c0      	nop			; (mov r8, r8)

08007f60 <pxCurrentTCBConst2>:
 8007f60:	200007f8 	.word	0x200007f8
 8007f64:	46c0      	nop			; (mov r8, r8)
 8007f66:	46c0      	nop			; (mov r8, r8)

08007f68 <xPortStartScheduler>:
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	4b0e      	ldr	r3, [pc, #56]	; (8007fa8 <xPortStartScheduler+0x40>)
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	4b0d      	ldr	r3, [pc, #52]	; (8007fa8 <xPortStartScheduler+0x40>)
 8007f72:	21ff      	movs	r1, #255	; 0xff
 8007f74:	0409      	lsls	r1, r1, #16
 8007f76:	430a      	orrs	r2, r1
 8007f78:	601a      	str	r2, [r3, #0]
 8007f7a:	4b0b      	ldr	r3, [pc, #44]	; (8007fa8 <xPortStartScheduler+0x40>)
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	4b0a      	ldr	r3, [pc, #40]	; (8007fa8 <xPortStartScheduler+0x40>)
 8007f80:	21ff      	movs	r1, #255	; 0xff
 8007f82:	0609      	lsls	r1, r1, #24
 8007f84:	430a      	orrs	r2, r1
 8007f86:	601a      	str	r2, [r3, #0]
 8007f88:	f000 f898 	bl	80080bc <prvSetupTimerInterrupt>
 8007f8c:	4b07      	ldr	r3, [pc, #28]	; (8007fac <xPortStartScheduler+0x44>)
 8007f8e:	2200      	movs	r2, #0
 8007f90:	601a      	str	r2, [r3, #0]
 8007f92:	f7ff ffcd 	bl	8007f30 <vPortStartFirstTask>
 8007f96:	f7ff f9b5 	bl	8007304 <vTaskSwitchContext>
 8007f9a:	f7ff ffad 	bl	8007ef8 <prvTaskExitError>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	0018      	movs	r0, r3
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	46c0      	nop			; (mov r8, r8)
 8007fa8:	e000ed20 	.word	0xe000ed20
 8007fac:	20000100 	.word	0x20000100

08007fb0 <vPortYield>:
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	4b05      	ldr	r3, [pc, #20]	; (8007fcc <vPortYield+0x1c>)
 8007fb6:	2280      	movs	r2, #128	; 0x80
 8007fb8:	0552      	lsls	r2, r2, #21
 8007fba:	601a      	str	r2, [r3, #0]
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	f3bf 8f6f 	isb	sy
 8007fc4:	46c0      	nop			; (mov r8, r8)
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	46c0      	nop			; (mov r8, r8)
 8007fcc:	e000ed04 	.word	0xe000ed04

08007fd0 <vPortEnterCritical>:
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	b672      	cpsid	i
 8007fd6:	4b06      	ldr	r3, [pc, #24]	; (8007ff0 <vPortEnterCritical+0x20>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	1c5a      	adds	r2, r3, #1
 8007fdc:	4b04      	ldr	r3, [pc, #16]	; (8007ff0 <vPortEnterCritical+0x20>)
 8007fde:	601a      	str	r2, [r3, #0]
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	46c0      	nop			; (mov r8, r8)
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	46c0      	nop			; (mov r8, r8)
 8007ff0:	20000100 	.word	0x20000100

08007ff4 <vPortExitCritical>:
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	4b09      	ldr	r3, [pc, #36]	; (8008020 <vPortExitCritical+0x2c>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <vPortExitCritical+0x10>
 8008000:	b672      	cpsid	i
 8008002:	e7fe      	b.n	8008002 <vPortExitCritical+0xe>
 8008004:	4b06      	ldr	r3, [pc, #24]	; (8008020 <vPortExitCritical+0x2c>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	1e5a      	subs	r2, r3, #1
 800800a:	4b05      	ldr	r3, [pc, #20]	; (8008020 <vPortExitCritical+0x2c>)
 800800c:	601a      	str	r2, [r3, #0]
 800800e:	4b04      	ldr	r3, [pc, #16]	; (8008020 <vPortExitCritical+0x2c>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d100      	bne.n	8008018 <vPortExitCritical+0x24>
 8008016:	b662      	cpsie	i
 8008018:	46c0      	nop			; (mov r8, r8)
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	46c0      	nop			; (mov r8, r8)
 8008020:	20000100 	.word	0x20000100

08008024 <ulSetInterruptMaskFromISR>:
 8008024:	f3ef 8010 	mrs	r0, PRIMASK
 8008028:	b672      	cpsid	i
 800802a:	4770      	bx	lr
 800802c:	46c0      	nop			; (mov r8, r8)
 800802e:	0018      	movs	r0, r3

08008030 <vClearInterruptMaskFromISR>:
 8008030:	f380 8810 	msr	PRIMASK, r0
 8008034:	4770      	bx	lr
 8008036:	46c0      	nop			; (mov r8, r8)
	...

08008040 <PendSV_Handler>:
 8008040:	f3ef 8009 	mrs	r0, PSP
 8008044:	4b0e      	ldr	r3, [pc, #56]	; (8008080 <pxCurrentTCBConst>)
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	3820      	subs	r0, #32
 800804a:	6010      	str	r0, [r2, #0]
 800804c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800804e:	4644      	mov	r4, r8
 8008050:	464d      	mov	r5, r9
 8008052:	4656      	mov	r6, sl
 8008054:	465f      	mov	r7, fp
 8008056:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008058:	b508      	push	{r3, lr}
 800805a:	b672      	cpsid	i
 800805c:	f7ff f952 	bl	8007304 <vTaskSwitchContext>
 8008060:	b662      	cpsie	i
 8008062:	bc0c      	pop	{r2, r3}
 8008064:	6811      	ldr	r1, [r2, #0]
 8008066:	6808      	ldr	r0, [r1, #0]
 8008068:	3010      	adds	r0, #16
 800806a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800806c:	46a0      	mov	r8, r4
 800806e:	46a9      	mov	r9, r5
 8008070:	46b2      	mov	sl, r6
 8008072:	46bb      	mov	fp, r7
 8008074:	f380 8809 	msr	PSP, r0
 8008078:	3820      	subs	r0, #32
 800807a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800807c:	4718      	bx	r3
 800807e:	46c0      	nop			; (mov r8, r8)

08008080 <pxCurrentTCBConst>:
 8008080:	200007f8 	.word	0x200007f8
 8008084:	46c0      	nop			; (mov r8, r8)
 8008086:	46c0      	nop			; (mov r8, r8)

08008088 <SysTick_Handler>:
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	f7ff ffc9 	bl	8008024 <ulSetInterruptMaskFromISR>
 8008092:	0003      	movs	r3, r0
 8008094:	607b      	str	r3, [r7, #4]
 8008096:	f7ff f881 	bl	800719c <xTaskIncrementTick>
 800809a:	1e03      	subs	r3, r0, #0
 800809c:	d003      	beq.n	80080a6 <SysTick_Handler+0x1e>
 800809e:	4b06      	ldr	r3, [pc, #24]	; (80080b8 <SysTick_Handler+0x30>)
 80080a0:	2280      	movs	r2, #128	; 0x80
 80080a2:	0552      	lsls	r2, r2, #21
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	0018      	movs	r0, r3
 80080aa:	f7ff ffc1 	bl	8008030 <vClearInterruptMaskFromISR>
 80080ae:	46c0      	nop			; (mov r8, r8)
 80080b0:	46bd      	mov	sp, r7
 80080b2:	b002      	add	sp, #8
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	46c0      	nop			; (mov r8, r8)
 80080b8:	e000ed04 	.word	0xe000ed04

080080bc <prvSetupTimerInterrupt>:
 80080bc:	b580      	push	{r7, lr}
 80080be:	af00      	add	r7, sp, #0
 80080c0:	4b0b      	ldr	r3, [pc, #44]	; (80080f0 <prvSetupTimerInterrupt+0x34>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]
 80080c6:	4b0b      	ldr	r3, [pc, #44]	; (80080f4 <prvSetupTimerInterrupt+0x38>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	4b0a      	ldr	r3, [pc, #40]	; (80080f8 <prvSetupTimerInterrupt+0x3c>)
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	23fa      	movs	r3, #250	; 0xfa
 80080d2:	0099      	lsls	r1, r3, #2
 80080d4:	0010      	movs	r0, r2
 80080d6:	f7f8 f817 	bl	8000108 <__udivsi3>
 80080da:	0003      	movs	r3, r0
 80080dc:	001a      	movs	r2, r3
 80080de:	4b07      	ldr	r3, [pc, #28]	; (80080fc <prvSetupTimerInterrupt+0x40>)
 80080e0:	3a01      	subs	r2, #1
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	4b02      	ldr	r3, [pc, #8]	; (80080f0 <prvSetupTimerInterrupt+0x34>)
 80080e6:	2207      	movs	r2, #7
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	46c0      	nop			; (mov r8, r8)
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	e000e010 	.word	0xe000e010
 80080f4:	e000e018 	.word	0xe000e018
 80080f8:	200000f8 	.word	0x200000f8
 80080fc:	e000e014 	.word	0xe000e014

08008100 <pvPortMalloc>:
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	2300      	movs	r3, #0
 800810a:	60fb      	str	r3, [r7, #12]
 800810c:	f7fe ffa0 	bl	8007050 <vTaskSuspendAll>
 8008110:	4b49      	ldr	r3, [pc, #292]	; (8008238 <pvPortMalloc+0x138>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d101      	bne.n	800811c <pvPortMalloc+0x1c>
 8008118:	f000 f8e0 	bl	80082dc <prvHeapInit>
 800811c:	4b47      	ldr	r3, [pc, #284]	; (800823c <pvPortMalloc+0x13c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	4013      	ands	r3, r2
 8008124:	d000      	beq.n	8008128 <pvPortMalloc+0x28>
 8008126:	e079      	b.n	800821c <pvPortMalloc+0x11c>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d012      	beq.n	8008154 <pvPortMalloc+0x54>
 800812e:	2208      	movs	r2, #8
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	189b      	adds	r3, r3, r2
 8008134:	607b      	str	r3, [r7, #4]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2207      	movs	r2, #7
 800813a:	4013      	ands	r3, r2
 800813c:	d00a      	beq.n	8008154 <pvPortMalloc+0x54>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2207      	movs	r2, #7
 8008142:	4393      	bics	r3, r2
 8008144:	3308      	adds	r3, #8
 8008146:	607b      	str	r3, [r7, #4]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2207      	movs	r2, #7
 800814c:	4013      	ands	r3, r2
 800814e:	d001      	beq.n	8008154 <pvPortMalloc+0x54>
 8008150:	b672      	cpsid	i
 8008152:	e7fe      	b.n	8008152 <pvPortMalloc+0x52>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d060      	beq.n	800821c <pvPortMalloc+0x11c>
 800815a:	4b39      	ldr	r3, [pc, #228]	; (8008240 <pvPortMalloc+0x140>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	429a      	cmp	r2, r3
 8008162:	d85b      	bhi.n	800821c <pvPortMalloc+0x11c>
 8008164:	4b37      	ldr	r3, [pc, #220]	; (8008244 <pvPortMalloc+0x144>)
 8008166:	613b      	str	r3, [r7, #16]
 8008168:	4b36      	ldr	r3, [pc, #216]	; (8008244 <pvPortMalloc+0x144>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	617b      	str	r3, [r7, #20]
 800816e:	e004      	b.n	800817a <pvPortMalloc+0x7a>
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	613b      	str	r3, [r7, #16]
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	617b      	str	r3, [r7, #20]
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	429a      	cmp	r2, r3
 8008182:	d903      	bls.n	800818c <pvPortMalloc+0x8c>
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1f1      	bne.n	8008170 <pvPortMalloc+0x70>
 800818c:	4b2a      	ldr	r3, [pc, #168]	; (8008238 <pvPortMalloc+0x138>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	429a      	cmp	r2, r3
 8008194:	d042      	beq.n	800821c <pvPortMalloc+0x11c>
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2208      	movs	r2, #8
 800819c:	189b      	adds	r3, r3, r2
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	601a      	str	r2, [r3, #0]
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	1ad2      	subs	r2, r2, r3
 80081b0:	2308      	movs	r3, #8
 80081b2:	005b      	lsls	r3, r3, #1
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d916      	bls.n	80081e6 <pvPortMalloc+0xe6>
 80081b8:	697a      	ldr	r2, [r7, #20]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	18d3      	adds	r3, r2, r3
 80081be:	60bb      	str	r3, [r7, #8]
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2207      	movs	r2, #7
 80081c4:	4013      	ands	r3, r2
 80081c6:	d001      	beq.n	80081cc <pvPortMalloc+0xcc>
 80081c8:	b672      	cpsid	i
 80081ca:	e7fe      	b.n	80081ca <pvPortMalloc+0xca>
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	685a      	ldr	r2, [r3, #4]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	1ad2      	subs	r2, r2, r3
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	605a      	str	r2, [r3, #4]
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	605a      	str	r2, [r3, #4]
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	0018      	movs	r0, r3
 80081e2:	f000 f8db 	bl	800839c <prvInsertBlockIntoFreeList>
 80081e6:	4b16      	ldr	r3, [pc, #88]	; (8008240 <pvPortMalloc+0x140>)
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	1ad2      	subs	r2, r2, r3
 80081f0:	4b13      	ldr	r3, [pc, #76]	; (8008240 <pvPortMalloc+0x140>)
 80081f2:	601a      	str	r2, [r3, #0]
 80081f4:	4b12      	ldr	r3, [pc, #72]	; (8008240 <pvPortMalloc+0x140>)
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	4b13      	ldr	r3, [pc, #76]	; (8008248 <pvPortMalloc+0x148>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d203      	bcs.n	8008208 <pvPortMalloc+0x108>
 8008200:	4b0f      	ldr	r3, [pc, #60]	; (8008240 <pvPortMalloc+0x140>)
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	4b10      	ldr	r3, [pc, #64]	; (8008248 <pvPortMalloc+0x148>)
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	685a      	ldr	r2, [r3, #4]
 800820c:	4b0b      	ldr	r3, [pc, #44]	; (800823c <pvPortMalloc+0x13c>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	431a      	orrs	r2, r3
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	605a      	str	r2, [r3, #4]
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2200      	movs	r2, #0
 800821a:	601a      	str	r2, [r3, #0]
 800821c:	f7fe ff24 	bl	8007068 <xTaskResumeAll>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2207      	movs	r2, #7
 8008224:	4013      	ands	r3, r2
 8008226:	d001      	beq.n	800822c <pvPortMalloc+0x12c>
 8008228:	b672      	cpsid	i
 800822a:	e7fe      	b.n	800822a <pvPortMalloc+0x12a>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	0018      	movs	r0, r3
 8008230:	46bd      	mov	sp, r7
 8008232:	b006      	add	sp, #24
 8008234:	bd80      	pop	{r7, pc}
 8008236:	46c0      	nop			; (mov r8, r8)
 8008238:	20001a2c 	.word	0x20001a2c
 800823c:	20001a38 	.word	0x20001a38
 8008240:	20001a30 	.word	0x20001a30
 8008244:	20001a24 	.word	0x20001a24
 8008248:	20001a34 	.word	0x20001a34

0800824c <vPortFree>:
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	60fb      	str	r3, [r7, #12]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d035      	beq.n	80082ca <vPortFree+0x7e>
 800825e:	2308      	movs	r3, #8
 8008260:	425b      	negs	r3, r3
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	18d3      	adds	r3, r2, r3
 8008266:	60fb      	str	r3, [r7, #12]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	60bb      	str	r3, [r7, #8]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	4b18      	ldr	r3, [pc, #96]	; (80082d4 <vPortFree+0x88>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4013      	ands	r3, r2
 8008276:	d101      	bne.n	800827c <vPortFree+0x30>
 8008278:	b672      	cpsid	i
 800827a:	e7fe      	b.n	800827a <vPortFree+0x2e>
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <vPortFree+0x3c>
 8008284:	b672      	cpsid	i
 8008286:	e7fe      	b.n	8008286 <vPortFree+0x3a>
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	4b11      	ldr	r3, [pc, #68]	; (80082d4 <vPortFree+0x88>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4013      	ands	r3, r2
 8008292:	d01a      	beq.n	80082ca <vPortFree+0x7e>
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d116      	bne.n	80082ca <vPortFree+0x7e>
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	685a      	ldr	r2, [r3, #4]
 80082a0:	4b0c      	ldr	r3, [pc, #48]	; (80082d4 <vPortFree+0x88>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	43db      	mvns	r3, r3
 80082a6:	401a      	ands	r2, r3
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	605a      	str	r2, [r3, #4]
 80082ac:	f7fe fed0 	bl	8007050 <vTaskSuspendAll>
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	685a      	ldr	r2, [r3, #4]
 80082b4:	4b08      	ldr	r3, [pc, #32]	; (80082d8 <vPortFree+0x8c>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	18d2      	adds	r2, r2, r3
 80082ba:	4b07      	ldr	r3, [pc, #28]	; (80082d8 <vPortFree+0x8c>)
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	0018      	movs	r0, r3
 80082c2:	f000 f86b 	bl	800839c <prvInsertBlockIntoFreeList>
 80082c6:	f7fe fecf 	bl	8007068 <xTaskResumeAll>
 80082ca:	46c0      	nop			; (mov r8, r8)
 80082cc:	46bd      	mov	sp, r7
 80082ce:	b004      	add	sp, #16
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	46c0      	nop			; (mov r8, r8)
 80082d4:	20001a38 	.word	0x20001a38
 80082d8:	20001a30 	.word	0x20001a30

080082dc <prvHeapInit>:
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	23c0      	movs	r3, #192	; 0xc0
 80082e4:	011b      	lsls	r3, r3, #4
 80082e6:	60bb      	str	r3, [r7, #8]
 80082e8:	4b26      	ldr	r3, [pc, #152]	; (8008384 <prvHeapInit+0xa8>)
 80082ea:	60fb      	str	r3, [r7, #12]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2207      	movs	r2, #7
 80082f0:	4013      	ands	r3, r2
 80082f2:	d00c      	beq.n	800830e <prvHeapInit+0x32>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3307      	adds	r3, #7
 80082f8:	60fb      	str	r3, [r7, #12]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2207      	movs	r2, #7
 80082fe:	4393      	bics	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	1ad2      	subs	r2, r2, r3
 8008308:	4b1e      	ldr	r3, [pc, #120]	; (8008384 <prvHeapInit+0xa8>)
 800830a:	18d3      	adds	r3, r2, r3
 800830c:	60bb      	str	r3, [r7, #8]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	607b      	str	r3, [r7, #4]
 8008312:	4b1d      	ldr	r3, [pc, #116]	; (8008388 <prvHeapInit+0xac>)
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	4b1b      	ldr	r3, [pc, #108]	; (8008388 <prvHeapInit+0xac>)
 800831a:	2200      	movs	r2, #0
 800831c:	605a      	str	r2, [r3, #4]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	18d3      	adds	r3, r2, r3
 8008324:	60fb      	str	r3, [r7, #12]
 8008326:	2208      	movs	r2, #8
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	1a9b      	subs	r3, r3, r2
 800832c:	60fb      	str	r3, [r7, #12]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2207      	movs	r2, #7
 8008332:	4393      	bics	r3, r2
 8008334:	60fb      	str	r3, [r7, #12]
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	4b14      	ldr	r3, [pc, #80]	; (800838c <prvHeapInit+0xb0>)
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	4b13      	ldr	r3, [pc, #76]	; (800838c <prvHeapInit+0xb0>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2200      	movs	r2, #0
 8008342:	605a      	str	r2, [r3, #4]
 8008344:	4b11      	ldr	r3, [pc, #68]	; (800838c <prvHeapInit+0xb0>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2200      	movs	r2, #0
 800834a:	601a      	str	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	603b      	str	r3, [r7, #0]
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	1ad2      	subs	r2, r2, r3
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	605a      	str	r2, [r3, #4]
 800835a:	4b0c      	ldr	r3, [pc, #48]	; (800838c <prvHeapInit+0xb0>)
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	601a      	str	r2, [r3, #0]
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	4b0a      	ldr	r3, [pc, #40]	; (8008390 <prvHeapInit+0xb4>)
 8008368:	601a      	str	r2, [r3, #0]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	4b09      	ldr	r3, [pc, #36]	; (8008394 <prvHeapInit+0xb8>)
 8008370:	601a      	str	r2, [r3, #0]
 8008372:	4b09      	ldr	r3, [pc, #36]	; (8008398 <prvHeapInit+0xbc>)
 8008374:	2280      	movs	r2, #128	; 0x80
 8008376:	0612      	lsls	r2, r2, #24
 8008378:	601a      	str	r2, [r3, #0]
 800837a:	46c0      	nop			; (mov r8, r8)
 800837c:	46bd      	mov	sp, r7
 800837e:	b004      	add	sp, #16
 8008380:	bd80      	pop	{r7, pc}
 8008382:	46c0      	nop			; (mov r8, r8)
 8008384:	20000e24 	.word	0x20000e24
 8008388:	20001a24 	.word	0x20001a24
 800838c:	20001a2c 	.word	0x20001a2c
 8008390:	20001a34 	.word	0x20001a34
 8008394:	20001a30 	.word	0x20001a30
 8008398:	20001a38 	.word	0x20001a38

0800839c <prvInsertBlockIntoFreeList>:
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	4b27      	ldr	r3, [pc, #156]	; (8008444 <prvInsertBlockIntoFreeList+0xa8>)
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	e002      	b.n	80083b0 <prvInsertBlockIntoFreeList+0x14>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	60fb      	str	r3, [r7, #12]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d8f7      	bhi.n	80083aa <prvInsertBlockIntoFreeList+0xe>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	60bb      	str	r3, [r7, #8]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	18d3      	adds	r3, r2, r3
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d108      	bne.n	80083de <prvInsertBlockIntoFreeList+0x42>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	685a      	ldr	r2, [r3, #4]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	18d2      	adds	r2, r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	605a      	str	r2, [r3, #4]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	607b      	str	r3, [r7, #4]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	60bb      	str	r3, [r7, #8]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	18d2      	adds	r2, r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d118      	bne.n	8008424 <prvInsertBlockIntoFreeList+0x88>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	4b14      	ldr	r3, [pc, #80]	; (8008448 <prvInsertBlockIntoFreeList+0xac>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d00d      	beq.n	800841a <prvInsertBlockIntoFreeList+0x7e>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	18d2      	adds	r2, r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	605a      	str	r2, [r3, #4]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	e008      	b.n	800842c <prvInsertBlockIntoFreeList+0x90>
 800841a:	4b0b      	ldr	r3, [pc, #44]	; (8008448 <prvInsertBlockIntoFreeList+0xac>)
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	601a      	str	r2, [r3, #0]
 8008422:	e003      	b.n	800842c <prvInsertBlockIntoFreeList+0x90>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	601a      	str	r2, [r3, #0]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	429a      	cmp	r2, r3
 8008432:	d002      	beq.n	800843a <prvInsertBlockIntoFreeList+0x9e>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	46c0      	nop			; (mov r8, r8)
 800843c:	46bd      	mov	sp, r7
 800843e:	b004      	add	sp, #16
 8008440:	bd80      	pop	{r7, pc}
 8008442:	46c0      	nop			; (mov r8, r8)
 8008444:	20001a24 	.word	0x20001a24
 8008448:	20001a2c 	.word	0x20001a2c

0800844c <__libc_init_array>:
 800844c:	b570      	push	{r4, r5, r6, lr}
 800844e:	2600      	movs	r6, #0
 8008450:	4d0c      	ldr	r5, [pc, #48]	; (8008484 <__libc_init_array+0x38>)
 8008452:	4c0d      	ldr	r4, [pc, #52]	; (8008488 <__libc_init_array+0x3c>)
 8008454:	1b64      	subs	r4, r4, r5
 8008456:	10a4      	asrs	r4, r4, #2
 8008458:	42a6      	cmp	r6, r4
 800845a:	d109      	bne.n	8008470 <__libc_init_array+0x24>
 800845c:	2600      	movs	r6, #0
 800845e:	f000 f82b 	bl	80084b8 <_init>
 8008462:	4d0a      	ldr	r5, [pc, #40]	; (800848c <__libc_init_array+0x40>)
 8008464:	4c0a      	ldr	r4, [pc, #40]	; (8008490 <__libc_init_array+0x44>)
 8008466:	1b64      	subs	r4, r4, r5
 8008468:	10a4      	asrs	r4, r4, #2
 800846a:	42a6      	cmp	r6, r4
 800846c:	d105      	bne.n	800847a <__libc_init_array+0x2e>
 800846e:	bd70      	pop	{r4, r5, r6, pc}
 8008470:	00b3      	lsls	r3, r6, #2
 8008472:	58eb      	ldr	r3, [r5, r3]
 8008474:	4798      	blx	r3
 8008476:	3601      	adds	r6, #1
 8008478:	e7ee      	b.n	8008458 <__libc_init_array+0xc>
 800847a:	00b3      	lsls	r3, r6, #2
 800847c:	58eb      	ldr	r3, [r5, r3]
 800847e:	4798      	blx	r3
 8008480:	3601      	adds	r6, #1
 8008482:	e7f2      	b.n	800846a <__libc_init_array+0x1e>
 8008484:	08008654 	.word	0x08008654
 8008488:	08008654 	.word	0x08008654
 800848c:	08008654 	.word	0x08008654
 8008490:	08008658 	.word	0x08008658

08008494 <memcpy>:
 8008494:	2300      	movs	r3, #0
 8008496:	b510      	push	{r4, lr}
 8008498:	429a      	cmp	r2, r3
 800849a:	d100      	bne.n	800849e <memcpy+0xa>
 800849c:	bd10      	pop	{r4, pc}
 800849e:	5ccc      	ldrb	r4, [r1, r3]
 80084a0:	54c4      	strb	r4, [r0, r3]
 80084a2:	3301      	adds	r3, #1
 80084a4:	e7f8      	b.n	8008498 <memcpy+0x4>

080084a6 <memset>:
 80084a6:	0003      	movs	r3, r0
 80084a8:	1812      	adds	r2, r2, r0
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d100      	bne.n	80084b0 <memset+0xa>
 80084ae:	4770      	bx	lr
 80084b0:	7019      	strb	r1, [r3, #0]
 80084b2:	3301      	adds	r3, #1
 80084b4:	e7f9      	b.n	80084aa <memset+0x4>
	...

080084b8 <_init>:
 80084b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ba:	46c0      	nop			; (mov r8, r8)
 80084bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084be:	bc08      	pop	{r3}
 80084c0:	469e      	mov	lr, r3
 80084c2:	4770      	bx	lr

080084c4 <_fini>:
 80084c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c6:	46c0      	nop			; (mov r8, r8)
 80084c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ca:	bc08      	pop	{r3}
 80084cc:	469e      	mov	lr, r3
 80084ce:	4770      	bx	lr
